/* Generated by the Nim Compiler v2.0.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI520093758 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093767 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI520093711 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311439 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217749 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555835 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555181 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555180 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI654311441 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
NTI654311441.base = NTI33554450;
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555178 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555178.node = NNI33555178;
NTI33555180.base = NTI33555177;
NTI33555181.base = NTI33555177;
var NNI33555177 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555180, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555181, name: "up", sons: null}]};
NTI33555177.node = NNI33555177;
var NNI33555173 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555173.node = NNI33555173;
NTI33555177.base = NTI33555173;
NTI33555178.base = NTI33555177;
NTI134217741.base = NTI33555178;
NTI134217743.base = NTI134217741;
var NNI33555835 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554450, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554450, name: "Field2", sons: null}]};
NTI33555835.node = NNI33555835;
var NNI134217751 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555178;
var NNI134217749 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555178;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555178;
NTI654311439.base = NTI33554450;
var NNI520093711 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI520093711.node = NNI520093711;
var NNI520093767 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI520093767.node = NNI520093767;
var NNI520093758 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI520093758.node = NNI520093758;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function mnewString(len_33557003) {
        var result = new Array(len_33557003);
    for (var i = 0; i < len_33557003; i++) {result[i] = 0;}
    return result;
  

  
}

function arrayConstr(len_33557314, value_33557315, typ_33557316) {
        var result = new Array(len_33557314);
    for (var i = 0; i < len_33557314; ++i) result[i] = nimCopy(null, value_33557315, typ_33557316);
    return result;
  

  
}

function cstrToNimstr(c_33556898) {
      var ln = c_33556898.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556898.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556898.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function raiseException(e_33556653, ename_33556654) {
    e_33556653.name = ename_33556654;
    if ((excHandler == 0)) {
    unhandledException(e_33556653);
    }
    
    e_33556653.trace = nimCopy(null, rawWriteStackTrace_33556604(), NTI33554449);
    throw e_33556653;

  
}

function addInt(a_33557050, b_33557051) {
        var result = a_33557050 + b_33557051;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557324, a_33557325, b_33557326) {
  var result_33557327 = 0;

  BeforeRet: {
    if (((a_33557325 <= i_33557324) && (i_33557324 <= b_33557326))) {
    result_33557327 = i_33557324;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  };

  return result_33557327;

}

function chckIndx(i_33557319, a_33557320, b_33557321) {
  var result_33557322 = 0;

  BeforeRet: {
    if (((a_33557320 <= i_33557319) && (i_33557319 <= b_33557321))) {
    result_33557322 = i_33557319;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557319, a_33557320, b_33557321);
    }
    
  };

  return result_33557322;

}

function addChar(x_33557415, c_33557416) {
    x_33557415.push(c_33557416);

  
}

function makeNimstrLit(c_33556895) {
      var result = [];
  for (var i = 0; i < c_33556895.length; ++i) {
    result[i] = c_33556895.charCodeAt(i);
  }
  return result;
  

  
}

function subInt(a_33557054, b_33557055) {
        var result = a_33557054 - b_33557055;
    checkOverflowInt(result);
    return result;
  

  
}
var F = {procname: "module jsre", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function re_520093699(pattern_520093700) {
  var result_520093701 = null;

  var F = {procname: "jsregex.re", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/scratch/jsregex.nim", line: 0};
  framePtr = F;
    F.line = 4;
    F.filename = "jsregex.nim";
    result_520093701 = new RegExp(pattern_520093700);
  framePtr = F.prev;

  return result_520093701;

}

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet1[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 631;
    F.filename = "system.nim";
    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }  framePtr = F.prev;

  return result_33556922;

}

function add_33556373(x_33556374, x_33556374_Idx, y_33556375) {
          if (x_33556374[x_33556374_Idx] === null) { x_33556374[x_33556374_Idx] = []; }
      var off = x_33556374[x_33556374_Idx].length;
      x_33556374[x_33556374_Idx].length += y_33556375.length;
      for (var i = 0; i < y_33556375.length; ++i) {
        x_33556374[x_33556374_Idx][off+i] = y_33556375.charCodeAt(i);
      }
    

  
}

function auxWriteStackTrace_33556508(f_33556509) {
  var result_33556510 = [[]];

    var it_33556518 = f_33556509;
    var i_33556519 = 0;
    var total_33556520 = 0;
    var tempFrames_33556521 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555835);
    Label1: {
        Label2: while (true) {
        if (!(!((it_33556518 == null)) && (i_33556519 <= 63))) break Label2;
          tempFrames_33556521[i_33556519].Field0 = it_33556518.procname;
          tempFrames_33556521[i_33556519].Field1 = it_33556518.line;
          tempFrames_33556521[i_33556519].Field2 = it_33556518.filename;
          i_33556519 += 1;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    Label3: {
        Label4: while (true) {
        if (!!((it_33556518 == null))) break Label4;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    result_33556510[0] = nimCopy(null, [], NTI33554449);
    if (!((total_33556520 == i_33556519))) {
    result_33556510[0].push.apply(result_33556510[0], [40]);;
    result_33556510[0].push.apply(result_33556510[0], HEX24_369098760((total_33556520 - i_33556519)));;
    result_33556510[0].push.apply(result_33556510[0], [32,99,97,108,108,115,32,111,109,105,116,116,101,100,41,32,46,46,46,10]);;
    }
    
    Label5: {
      var j_33556554 = 0;
      var colontmp__520093962 = 0;
      colontmp__520093962 = (i_33556519 - 1);
      var res_520093964 = colontmp__520093962;
      Label6: {
          Label7: while (true) {
          if (!(0 <= res_520093964)) break Label7;
            j_33556554 = res_520093964;
            result_33556510[0].push.apply(result_33556510[0], cstrToNimstr(tempFrames_33556521[j_33556554].Field2));;
            if ((0 < tempFrames_33556521[j_33556554].Field1)) {
            result_33556510[0].push.apply(result_33556510[0], [40]);;
            addInt_301990129(result_33556510, 0, tempFrames_33556521[j_33556554].Field1);
            if (false) {
            result_33556510[0].push.apply(result_33556510[0], [44,32]);;
            addInt_301990129(result_33556510, 0, 0);
            }
            
            result_33556510[0].push.apply(result_33556510[0], [41]);;
            }
            
            result_33556510[0].push.apply(result_33556510[0], [32,97,116,32]);;
            add_33556373(result_33556510, 0, tempFrames_33556521[j_33556554].Field0);
            result_33556510[0].push.apply(result_33556510[0], [10]);;
            res_520093964 -= 1;
          }
      };
    };

  return result_33556510[0];

}

function rawWriteStackTrace_33556604() {
  var result_33556605 = [];

    if (!((framePtr == null))) {
    result_33556605 = nimCopy(null, ([84,114,97,99,101,98,97,99,107,32,40,109,111,115,116,32,114,101,99,101,110,116,32,99,97,108,108,32,108,97,115,116,41,10] || []).concat(auxWriteStackTrace_33556508(framePtr) || []), NTI33554449);
    }
    else {
      result_33556605 = nimCopy(null, [78,111,32,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,32,97,118,97,105,108,97,98,108,101,10], NTI33554449);
    }
    

  return result_33556605;

}

function unhandledException(e_33556649) {
    var buf_33556650 = [[]];
    if (!(((e_33556649.message).length == 0))) {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556650[0].push.apply(buf_33556650[0], e_33556649.message);;
    }
    else {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556650[0].push.apply(buf_33556650[0], [32,91]);;
    add_33556373(buf_33556650, 0, e_33556649.name);
    buf_33556650[0].push.apply(buf_33556650[0], [93,10]);;
    buf_33556650[0].push.apply(buf_33556650[0], rawWriteStackTrace_33556604());;
    var cbuf_33556651 = toJSStr(buf_33556650[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556651);
  }
  else {
    throw cbuf_33556651;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33557048) {
        if (a_33557048 > 2147483647 || a_33557048 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: [118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101], parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_301990090(result_301990092, result_301990092_Idx, x_301990093, start_301990094, n_301990095) {
    var Temporary1;

  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 43;
    F.filename = "digitsutils.nim";
    var old_301990096 = (result_301990092[result_301990092_Idx]).length;
    F.line = 44;
    if (result_301990092[result_301990092_Idx].length < (Temporary1 = chckRange(addInt(old_301990096, n_301990095), 0, 2147483647), Temporary1)) { for (var i = result_301990092[result_301990092_Idx].length; i < Temporary1; ++i) result_301990092[result_301990092_Idx].push(0); }
         else {result_301990092[result_301990092_Idx].length = Temporary1; };
    Label2: {
      F.line = 46;
      var iHEX60gensym4_301990110 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520093957 = 0;
      Label3: {
        F.line = 120;
          Label4: while (true) {
          if (!(i_520093957 < n_301990095)) break Label4;
            F.line = 49;
            F.filename = "digitsutils.nim";
            iHEX60gensym4_301990110 = i_520093957;
            F.line = 49;
            result_301990092[result_301990092_Idx][chckIndx(addInt(old_301990096, iHEX60gensym4_301990110), 0, (result_301990092[result_301990092_Idx]).length - 1)] = x_301990093.charCodeAt(chckIndx(addInt(start_301990094, iHEX60gensym4_301990110), 0, (x_301990093).length - 1));
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520093957 = addInt(i_520093957, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function addChars_301990086(result_301990088, result_301990088_Idx, x_301990089) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 55;
    F.filename = "digitsutils.nim";
    addChars_301990090(result_301990088, result_301990088_Idx, x_301990089, 0, ((x_301990089) == null ? 0 : (x_301990089).length));
  framePtr = F.prev;

  
}

function addInt_301990111(result_301990112, result_301990112_Idx, x_301990113) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 111;
    F.filename = "digitsutils.nim";
    addChars_301990086(result_301990112, result_301990112_Idx, ((x_301990113) + ""));
  framePtr = F.prev;

  
}

function addInt_301990129(result_301990130, result_301990130_Idx, x_301990131) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 115;
    F.filename = "digitsutils.nim";
    addInt_301990111(result_301990130, result_301990130_Idx, BigInt(x_301990131));
  framePtr = F.prev;

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 18;
    F.filename = "dollars.nim";
    addInt_301990129(result_369098762, 0, x_369098761);
  framePtr = F.prev;

  return result_369098762[0];

}

function raiseIndexError(i_33556812, a_33556813, b_33556814) {
    var Temporary1;

    if ((b_33556814 < a_33556813)) {
    Temporary1 = [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,44,32,116,104,101,32,99,111,110,116,97,105,110,101,114,32,105,115,32,101,109,112,116,121];
    }
    else {
    Temporary1 = ([105,110,100,101,120,32] || []).concat(HEX24_369098760(i_33556812) || [],[32,110,111,116,32,105,110,32] || [],HEX24_369098760(a_33556813) || [],[32,46,46,32] || [],HEX24_369098760(b_33556814) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554449), parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addEscapedChar_33558018(s_33558019, s_33558019_Idx, c_33558020) {
  var F = {procname: "system.addEscapedChar", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2454;
    F.filename = "system.nim";
    switch (c_33558020) {
    case 7:
      F.line = 2455;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,97]);;
      break;
    case 8:
      F.line = 2456;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,98]);;
      break;
    case 9:
      F.line = 2457;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,116]);;
      break;
    case 10:
      F.line = 2458;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,110]);;
      break;
    case 11:
      F.line = 2459;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,118]);;
      break;
    case 12:
      F.line = 2460;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,102]);;
      break;
    case 13:
      F.line = 2461;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,114]);;
      break;
    case 27:
      F.line = 2462;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,101]);;
      break;
    case 92:
      F.line = 2463;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,92]);;
      break;
    case 39:
      F.line = 2464;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,39]);;
      break;
    case 34:
      F.line = 2465;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,34]);;
      break;
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
      F.line = 2466;
      addChar(s_33558019[s_33558019_Idx], c_33558020);;
      break;
    default: 
      F.line = 2468;
      s_33558019[s_33558019_Idx].push.apply(s_33558019[s_33558019_Idx], [92,120]);;
      F.line = 2470;
      var n_33558030 = c_33558020;
      F.line = 2471;
      addChar(s_33558019[s_33558019_Idx], [48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70][chckIndx(((n_33558030 & 240) >> 4), 0, ([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70]).length - 1)]);;
      F.line = 2472;
      addChar(s_33558019[s_33558019_Idx], [48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70][chckIndx((n_33558030 & 15), 0, ([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70]).length - 1)]);;
      break;
    }
  framePtr = F.prev;

  
}

function addQuoted_520093913(s_520093915, s_520093915_Idx, x_520093916) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2500;
    F.filename = "system.nim";
    s_520093915[s_520093915_Idx].push.apply(s_520093915[s_520093915_Idx], [34]);;
    Label1: {
      F.line = 2501;
      var c_520093917 = 0;
      F.line = 75;
      F.filename = "iterators.nim";
      var iHEX60gensym6_520093950 = 0;
      F.line = 76;
      var nHEX60gensym6_520093951 = ((x_520093916) == null ? 0 : (x_520093916).length);
      Label2: {
        F.line = 80;
          Label3: while (true) {
          if (!(iHEX60gensym6_520093950 < nHEX60gensym6_520093951)) break Label3;
            F.line = 2501;
            F.filename = "system.nim";
            c_520093917 = x_520093916.charCodeAt(chckIndx(iHEX60gensym6_520093950, 0, (x_520093916).length - 1));
            if ((c_520093917 <= 127)) {
            F.line = 2505;
            addEscapedChar_33558018(s_520093915, s_520093915_Idx, c_520093917);
            }
            else {
              F.line = 2507;
            addChar(s_520093915[s_520093915_Idx], c_520093917);;
            }
            
            F.line = 79;
            F.filename = "iterators.nim";
            iHEX60gensym6_520093950 = addInt(iHEX60gensym6_520093950, 1);
          }
      };
    };
    F.line = 2508;
    F.filename = "system.nim";
    s_520093915[s_520093915_Idx].push.apply(s_520093915[s_520093915_Idx], [34]);;
  framePtr = F.prev;

  
}

function sysFatal_268435501(message_268435504) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_268435504, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}

function raiseAssert_268435499(msg_268435500) {
  var F = {procname: "assertions.raiseAssert", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 36;
    F.filename = "assertions.nim";
    sysFatal_268435501(msg_268435500);
  framePtr = F.prev;

  
}

function failedAssertImpl_268435541(msg_268435542) {
  var F = {procname: "assertions.failedAssertImpl", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 41;
    F.filename = "assertions.nim";
    raiseAssert_268435499(msg_268435542);
  framePtr = F.prev;

  
}

function collectionToString_520093879(x_520093881, prefix_520093882, separator_520093883, suffix_520093884) {
  var result_520093885 = [[]];

  var F = {procname: "collectionToString.collectionToString", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 90;
    F.filename = "dollars.nim";
    result_520093885[0] = nimCopy(null, prefix_520093882, NTI33554449);
    F.line = 91;
    var firstElement_520093886 = true;
    Label1: {
      F.line = 92;
      var value_520093909 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520093945 = 0;
      F.line = 242;
      var L_520093946 = (x_520093881).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520093945 < L_520093946)) break Label3;
            F.line = 92;
            F.filename = "dollars.nim";
            value_520093909 = x_520093881[i_520093945];
            if (firstElement_520093886) {
            F.line = 94;
            firstElement_520093886 = false;
            }
            else {
              F.line = 96;
            result_520093885[0].push.apply(result_520093885[0], separator_520093883);;
            }
            
            if ((value_520093909 == null)) {
            F.line = 101;
            result_520093885[0].push.apply(result_520093885[0], [110,105,108]);;
            }
            else {
              F.line = 103;
            addQuoted_520093913(result_520093885, 0, value_520093909);
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_520093945 += 1;
            if (!(((x_520093881).length == L_520093946))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 106;
    F.filename = "dollars.nim";
    result_520093885[0].push.apply(result_520093885[0], suffix_520093884);;
  framePtr = F.prev;

  return result_520093885[0];

}

function HEX24_520093875(x_520093877) {
  var result_520093878 = [];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 117;
    F.filename = "dollars.nim";
    result_520093878 = nimCopy(null, collectionToString_520093879(x_520093877, [64,91], [44,32], [93]), NTI33554449);
  framePtr = F.prev;

  return result_520093878;

}

function contains_654311475(pattern_654311476, self_654311477) {
  var result_654311478 = false;

  var F = {procname: "jsre.contains", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/js/jsre.nim", line: 0};
  framePtr = F;
    F.line = 61;
    F.filename = "jsre.nim";
    result_654311478 = self_654311477.test(pattern_654311476);
  framePtr = F.prev;

  return result_654311478;

}

function startsWith_654311479(pattern_654311480, self_654311481) {
  var result_654311482 = false;

  var F = {procname: "jsre.startsWith", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/js/jsre.nim", line: 0};
  framePtr = F;
    F.line = 64;
    F.filename = "jsre.nim";
    result_654311482 = contains_654311475(pattern_654311480, new RegExp(toJSStr(([94] || []).concat(cstrToNimstr(self_654311481.source) || [])), self_654311481.flags));
  framePtr = F.prev;

  return result_654311482;

}

function HEX5BHEX5D_520093768(s_520093771, x_520093772) {
  var result_520093773 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_520093775 = ((x_520093772.a) | 0);
    F.line = 84;
    var L_520093777 = addInt(subInt(x_520093772.b, a_520093775), 1);
    F.line = 85;
    result_520093773 = nimCopy(null, mnewString(chckRange(L_520093777, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_520093782 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520093967 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520093967 < L_520093777)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_520093782 = i_520093967;
            F.line = 86;
            result_520093773[chckIndx(i_520093782, 0, (result_520093773).length - 1)] = s_520093771[chckIndx(addInt(i_520093782, a_520093775), 0, (s_520093771).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520093967 = addInt(i_520093967, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_520093773;

}

function HEX2EHEX2E_520093717(a_520093720, b_520093721) {
  var result_520093724 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_520093724 = nimCopy(result_520093724, {a: a_520093720, b: b_520093721}, NTI520093711);
  framePtr = F.prev;

  return result_520093724;

}

function matchLen_520093705(str_520093706, pattern_520093707, start_520093708) {
  var result_520093709 = 0;

  var F = {procname: "jsregex.matchLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/scratch/jsregex.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (startsWith_654311479(toJSStr(HEX5BHEX5D_520093768(str_520093706, HEX2EHEX2E_520093717(start_520093708, subInt((str_520093706).length, 1)))), pattern_520093707)) {
    F.line = 10;
    F.filename = "jsregex.nim";
    var m_520093783 = (toJSStr(str_520093706).match(pattern_520093707) || []);
    F.line = 11;
    result_520093709 = ((((m_520093783[chckIndx(0, 0, (m_520093783).length - 1)]) == null ? 0 : (m_520093783[chckIndx(0, 0, (m_520093783).length - 1)]).length)) | 0);
    break BeforeRet;
    }
    
    F.line = 12;
    result_520093709 = (-1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520093709;

}

function HEX5BHEX5D_520093835(s_520093838, x_520093839) {
  var result_520093840 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_520093842 = ((x_520093839.a) | 0);
    F.line = 84;
    var L_520093844 = addInt(subInt(((x_520093839.b) | 0), a_520093842), 1);
    F.line = 85;
    result_520093840 = nimCopy(null, mnewString(chckRange(L_520093844, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_520093849 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520093972 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520093972 < L_520093844)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_520093849 = i_520093972;
            F.line = 86;
            result_520093840[chckIndx(i_520093849, 0, (result_520093840).length - 1)] = s_520093838[chckIndx(addInt(i_520093849, a_520093842), 0, (s_520093838).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520093972 = addInt(i_520093972, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_520093840;

}

function HEX2EHEX2E_520093800(a_520093803, b_520093804) {
  var result_520093807 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/di68kap/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_520093807 = nimCopy(result_520093807, {a: a_520093803, b: b_520093804}, NTI520093767);
  framePtr = F.prev;

  return result_520093807;

}

function findBounds_520093784(str_520093785, pattern_520093786, start_520093787, last_520093788) {
    var Temporary1;

  var result_520093791 = {Field0: 0, Field1: 0};

  var F = {procname: "jsregex.findBounds", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/scratch/jsregex.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 15;
    F.filename = "jsregex.nim";
    if ((last_520093788 < 0)) {
    Temporary1 = (str_520093785).length;
    }
    else {
    Temporary1 = ((last_520093788) | 0);
    }
    
    var strend_520093792 = ((Temporary1) | 0);
    F.line = 16;
    var a_520093850 = (((toJSStr(HEX5BHEX5D_520093835(str_520093785, HEX2EHEX2E_520093800(start_520093787, subInt(strend_520093792, 1)))).search(pattern_520093786) || [])) | 0);
    F.line = 17;
    var m_520093851 = (toJSStr(str_520093785).match(pattern_520093786) || []);
    F.line = 18;
    var b_520093852 = addInt(a_520093850, ((((m_520093851[chckIndx(0, 0, (m_520093851).length - 1)]) == null ? 0 : (m_520093851[chckIndx(0, 0, (m_520093851).length - 1)]).length)) | 0));
    F.line = 19;
    var colontmp__520093969 = a_520093850;
    F.line = 19;
    var colontmp__520093970 = b_520093852;
    F.line = 19;
    result_520093791 = nimCopy(result_520093791, {Field0: colontmp__520093969, Field1: colontmp__520093970}, NTI520093758);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520093791;

}
var F = {procname: "module jsregex", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/scratch/jsregex.nim", line: 0};
framePtr = F;
F.line = 22;
F.filename = "jsregex.nim";
var rx_520093870 = re_520093699("[0-9]+");
F.line = 23;
var result_520093871 = [[]];
F.line = 24;
var index_520093872 = [0];
F.line = 24;
var size_520093873 = [0];
F.line = 27;
result_520093871[0] = nimCopy(null, (rx_520093870.exec("abc 123 def 456 gh 78 ijk") || []), NTI654311441);
F.line = 28;
rawEcho(HEX24_520093875(result_520093871[0]));
F.line = 29;
result_520093871[0] = nimCopy(null, ("abc 123 def 456 gh 78 ijk".match(rx_520093870) || []), NTI654311439);
F.line = 30;
rawEcho(HEX24_520093875(result_520093871[0]));
F.line = 31;
index_520093872[0] = ("abc 123 def 456 gh 78 ijk".search(rx_520093870) || []);
F.line = 32;
rawEcho(HEX24_369098760(index_520093872[0]));
F.line = 33;
index_520093872[0] = ("   ".search(rx_520093870) || []);
F.line = 34;
rawEcho(HEX24_369098760(index_520093872[0]));
F.line = 36;
rawEcho([45,45,45]);
F.line = 37;
size_520093873[0] = ((matchLen_520093705([97,98,99,32,49,50,51,32,100,101,102,32,52,53,54,32,103,104,32,55,56,32,105,106,107], rx_520093870, 0)) | 0);
F.line = 38;
rawEcho(HEX24_369098760(size_520093873[0]));
F.line = 39;
size_520093873[0] = ((matchLen_520093705([97,98,99,32,49,50,51,32,100,101,102,32,52,53,54,32,103,104,32,55,56,32,105,106,107], rx_520093870, 4)) | 0);
F.line = 40;
rawEcho(HEX24_369098760(size_520093873[0]));
F.line = 41;
var tmpTuple_520093937 = findBounds_520093784([97,98,99,32,49,50,51,32,100,101,102,32,52,53,54,32,103,104,32,55,56,32,105,106,107], rx_520093870, 0, (-1));
F.line = 41;
var a_520093938 = tmpTuple_520093937["Field0"];
F.line = 41;
var b_520093939 = tmpTuple_520093937["Field1"];
F.line = 42;
rawEcho(HEX24_369098760(((a_520093938) | 0)));
F.line = 43;
rawEcho(HEX24_369098760(((b_520093939) | 0)));
F.line = 45;
var myregex_520093940 = re_520093699("[abc]");
framePtr = F.prev;
var F = {procname: "module jsregex", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/scratch/jsregex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
