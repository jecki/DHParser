/* Generated by the Nim Compiler v2.0.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI520095744 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093704 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520094903 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094860 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866153 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1107296319 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555179 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217746 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520094504 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094273 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094480 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094403 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094397 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094392 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI939524175 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI939524181 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI503316800 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1040187395 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI520093717 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093714 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093711 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093722 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093721 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093720 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093702 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520093700 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520095668 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1107296261 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1107296259 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217749 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555835 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555181 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555180 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555178 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555178.node = NNI33555178;
NTI33555180.base = NTI33555177;
NTI33555181.base = NTI33555177;
var NNI33555177 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555180, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555181, name: "up", sons: null}]};
NTI33555177.node = NNI33555177;
var NNI33555173 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555173.node = NNI33555173;
NTI33555177.base = NTI33555173;
NTI33555178.base = NTI33555177;
NTI134217741.base = NTI33555178;
NTI134217743.base = NTI134217741;
var NNI33555835 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554450, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554450, name: "Field2", sons: null}]};
NTI33555835.node = NNI33555835;
var NNI134217751 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555178;
var NNI134217749 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555178;
NTI1107296261.base = NTI33554449;
var NNI1107296259 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "buf", len: 0, typ: NTI1107296261, name: "buf", sons: null}, 
{kind: 1, offset: "start", len: 0, typ: NTI33554438, name: "start", sons: null}, 
{kind: 1, offset: "stop", len: 0, typ: NTI33554438, name: "stop", sons: null}]};
NTI1107296259.node = NNI1107296259;
NTI520093720.base = NTI33554449;
NTI520093721.base = NTI520093700;
var NNI520093717 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1040187395, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554449, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI33554449, name: "Field3", sons: null}]};
NTI520093717.node = NNI520093717;
NTI520093714.base = NTI520093717;
var NNI520093711 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI520093714, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI33554435, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI33554435, name: "last", sons: null}]};
NTI520093711.node = NNI520093711;
NTI520093722.base = NTI520093711;
var NNI520093702 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nameRef", len: 0, typ: NTI520093720, name: "nameRef", sons: null}, 
{kind: 1, offset: "childrenSeq", len: 0, typ: NTI520093721, name: "childrenSeq", sons: null}, 
{kind: 1, offset: "textSlice", len: 0, typ: NTI1107296259, name: "textSlice", sons: null}, 
{kind: 1, offset: "attributesRef", len: 0, typ: NTI520093722, name: "attributesRef", sons: null}, 
{kind: 1, offset: "sourcePos", len: 0, typ: NTI33554438, name: "sourcePos", sons: null}]};
NTI520093702.node = NNI520093702;
NTI520093702.base = NTI33555173;
NTI520093700.base = NTI520093702;
NTI520095668.base = NTI520093700;
var NNI134217742 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217742.node = NNI134217742;
NTI134217742.base = NTI134217741;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555178;
NTI503316800.base = NTI33554449;
var NNI939524181 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI939524175, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI939524181.node = NNI939524181;
NTI520094392.base = NTI33554449;
NTI520094397.base = NTI33554449;
NTI520094403.base = NTI33554449;
NTI520094273.base = NTI33554449;
NTI520094480.base = NTI520094273;
NTI520094504.base = NTI33554449;
var NNI134217746 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217746.node = NNI134217746;
var NNI33555179 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555179.node = NNI33555179;
NTI33555179.base = NTI33555177;
NTI134217746.base = NTI33555179;
var NNI1107296319 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI1107296319.node = NNI1107296319;
var NNI687866153 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554435, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI687866153.node = NNI687866153;
NTI520094860.base = NTI33554449;
NTI520094903.base = NTI33554449;
var NNI520093704 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI520093704.node = NNI520093704;
NTI520093704.base = NTI33555178;
NTI520095744.base = NTI520093700;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}

function arrayConstr(len_33557314, value_33557315, typ_33557316) {
        var result = new Array(len_33557314);
    for (var i = 0; i < len_33557314; ++i) result[i] = nimCopy(null, value_33557315, typ_33557316);
    return result;
  

  
}

function mnewString(len_33557003) {
        return new Array(len_33557003);
  

  
}

function addInt(a_33557050, b_33557051) {
        var result = a_33557050 + b_33557051;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557324, a_33557325, b_33557326) {
  var result_33557327 = 0;

  BeforeRet: {
    if (((a_33557325 <= i_33557324) && (i_33557324 <= b_33557326))) {
    result_33557327 = i_33557324;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  };

  return result_33557327;

}

function chckIndx(i_33557319, a_33557320, b_33557321) {
  var result_33557322 = 0;

  BeforeRet: {
    if (((a_33557320 <= i_33557319) && (i_33557319 <= b_33557321))) {
    result_33557322 = i_33557319;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557319, a_33557320, b_33557321);
    }
    
  };

  return result_33557322;

}

function cstrToNimstr(c_33556898) {
      var ln = c_33556898.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556898.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556898.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function raiseException(e_33556653, ename_33556654) {
    e_33556653.name = ename_33556654;
    if ((excHandler == 0)) {
    unhandledException(e_33556653);
    }
    
    e_33556653.trace = nimCopy(null, rawWriteStackTrace_33556604(), NTI33554449);
    throw e_33556653;

  
}

function subInt(a_33557054, b_33557055) {
        var result = a_33557054 - b_33557055;
    checkOverflowInt(result);
    return result;
  

  
}

function divInt(a_33557062, b_33557063) {
        if (b_33557063 == 0) raiseDivByZero();
    if (b_33557063 == -1 && a_33557062 == 2147483647) raiseOverflow();
    return Math.trunc(a_33557062 / b_33557063);
  

  
}

function mulInt(a_33557058, b_33557059) {
        var result = a_33557058 * b_33557059;
    checkOverflowInt(result);
    return result;
  

  
}

function modInt(a_33557066, b_33557067) {
        if (b_33557067 == 0) raiseDivByZero();
    if (b_33557067 == -1 && a_33557066 == 2147483647) raiseOverflow();
    return Math.trunc(a_33557066 % b_33557067);
  

  
}

function eqStrings(a_33557041, b_33557042) {
        if (a_33557041 == b_33557042) return true;
    if (a_33557041 === null && b_33557042.length == 0) return true;
    if (b_33557042 === null && a_33557041.length == 0) return true;
    if ((!a_33557041) || (!b_33557042)) return false;
    var alen = a_33557041.length;
    if (alen != b_33557042.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33557041[i] != b_33557042[i]) return false;
    return true;
  

  
}

function makeNimstrLit(c_33556895) {
      var result = [];
  for (var i = 0; i < c_33556895.length; ++i) {
    result[i] = c_33556895.charCodeAt(i);
  }
  return result;
  

  
}

function genericReset(x_33557306, ti_33557307) {
  var result_33557308 = null;

    result_33557308 = null;
    switch (ti_33557307.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (isFatPointer_33557259(ti_33557307)) {
              result_33557308 = [null, 0];
      
      }
      
      break;
    case 19:
            result_33557308 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_33557307.kind == 17)) {
      result_33557308 = {m_type: ti_33557307};
      }
      else {
        result_33557308 = {};
      }
      
      break;
    case 24:
    case 27:
    case 28:
            result_33557308 = [];
    
      break;
    case 4:
    case 16:
            result_33557308 = new Array(x_33557306.length);
      for (var i = 0; i < x_33557306.length; ++i) {
        result_33557308[i] = genericReset(x_33557306[i], ti_33557307.base);
      }
    
      break;
    default: 
      break;
    }

  return result_33557308;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet2 = setConstr(13, 10);

function nimMax(a_33557108, b_33557109) {
    var Temporary1;

  var result_33557110 = 0;

  BeforeRet: {
    if ((b_33557109 <= a_33557108)) {
    Temporary1 = a_33557108;
    }
    else {
    Temporary1 = b_33557109;
    }
    
    result_33557110 = Temporary1;
    break BeforeRet;
  };

  return result_33557110;

}

function nimMin(a_33557104, b_33557105) {
    var Temporary1;

  var result_33557106 = 0;

  BeforeRet: {
    if ((a_33557104 <= b_33557105)) {
    Temporary1 = a_33557104;
    }
    else {
    Temporary1 = b_33557105;
    }
    
    result_33557106 = Temporary1;
    break BeforeRet;
  };

  return result_33557106;

}
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(60, 62, 94);
var ConstSet5 = setConstr(45, 43, 32);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([48, 57]);
var ConstSet9 = setConstr([65, 90], [97, 122]);

function addChar(x_33557415, c_33557416) {
    x_33557415.push(c_33557416);

  
}

function nimBoolToStr(x_33556438) {
  var result_33556439 = [];

    if (x_33556438) {
    result_33556439 = nimCopy(null, [116,114,117,101], NTI33554449);
    }
    else {
      result_33556439 = nimCopy(null, [102,97,108,115,101], NTI33554449);
    }
    

  return result_33556439;

}
var F = {procname: "module macros", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/hashes.nim", line: 0};
framePtr = F;
F.line = 218;
F.filename = "hashes.nim";
var objectID_1040187569 = [0];
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet1[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function add_33556373(x_33556374, x_33556374_Idx, y_33556375) {
          if (x_33556374[x_33556374_Idx] === null) { x_33556374[x_33556374_Idx] = []; }
      var off = x_33556374[x_33556374_Idx].length;
      x_33556374[x_33556374_Idx].length += y_33556375.length;
      for (var i = 0; i < y_33556375.length; ++i) {
        x_33556374[x_33556374_Idx][off+i] = y_33556375.charCodeAt(i);
      }
    

  
}

function raiseRangeError() {
    raiseException({message: [118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101], parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");

  
}

function raiseIndexError(i_33556812, a_33556813, b_33556814) {
    var Temporary1;

    if ((b_33556814 < a_33556813)) {
    Temporary1 = [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,44,32,116,104,101,32,99,111,110,116,97,105,110,101,114,32,105,115,32,101,109,112,116,121];
    }
    else {
    Temporary1 = ([105,110,100,101,120,32] || []).concat(HEX24_369098760(i_33556812) || [],[32,110,111,116,32,105,110,32] || [],HEX24_369098760(a_33556813) || [],[32,46,46,32] || [],HEX24_369098760(b_33556814) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554449), parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addChars_301990090(result_301990092, result_301990092_Idx, x_301990093, start_301990094, n_301990095) {
    var Temporary1;

  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 43;
    F.filename = "digitsutils.nim";
    var old_301990096 = (result_301990092[result_301990092_Idx]).length;
    F.line = 44;
    if (result_301990092[result_301990092_Idx].length < (Temporary1 = chckRange(addInt(old_301990096, n_301990095), 0, 2147483647), Temporary1)) { for (var i = result_301990092[result_301990092_Idx].length; i < Temporary1; ++i) result_301990092[result_301990092_Idx].push(0); }
         else {result_301990092[result_301990092_Idx].length = Temporary1; };
    Label2: {
      F.line = 46;
      var iHEX60gensym4_301990110 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_1107296658 = 0;
      Label3: {
        F.line = 120;
          Label4: while (true) {
          if (!(i_1107296658 < n_301990095)) break Label4;
            F.line = 49;
            F.filename = "digitsutils.nim";
            iHEX60gensym4_301990110 = i_1107296658;
            F.line = 49;
            result_301990092[result_301990092_Idx][chckIndx(addInt(old_301990096, iHEX60gensym4_301990110), 0, (result_301990092[result_301990092_Idx]).length - 1)] = x_301990093.charCodeAt(chckIndx(addInt(start_301990094, iHEX60gensym4_301990110), 0, (x_301990093).length - 1));
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_1107296658 = addInt(i_1107296658, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function addChars_301990086(result_301990088, result_301990088_Idx, x_301990089) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 55;
    F.filename = "digitsutils.nim";
    addChars_301990090(result_301990088, result_301990088_Idx, x_301990089, 0, ((x_301990089) == null ? 0 : (x_301990089).length));
  framePtr = F.prev;

  
}

function addInt_301990111(result_301990112, result_301990112_Idx, x_301990113) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 111;
    F.filename = "digitsutils.nim";
    addChars_301990086(result_301990112, result_301990112_Idx, ((x_301990113) + ""));
  framePtr = F.prev;

  
}

function addInt_301990129(result_301990130, result_301990130_Idx, x_301990131) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 115;
    F.filename = "digitsutils.nim";
    addInt_301990111(result_301990130, result_301990130_Idx, BigInt(x_301990131));
  framePtr = F.prev;

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 18;
    F.filename = "dollars.nim";
    addInt_301990129(result_369098762, 0, x_369098761);
  framePtr = F.prev;

  return result_369098762[0];

}

function auxWriteStackTrace_33556508(f_33556509) {
  var result_33556510 = [[]];

    var it_33556518 = f_33556509;
    var i_33556519 = 0;
    var total_33556520 = 0;
    var tempFrames_33556521 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555835);
    Label1: {
        Label2: while (true) {
        if (!(!((it_33556518 == null)) && (i_33556519 <= 63))) break Label2;
          tempFrames_33556521[i_33556519].Field0 = it_33556518.procname;
          tempFrames_33556521[i_33556519].Field1 = it_33556518.line;
          tempFrames_33556521[i_33556519].Field2 = it_33556518.filename;
          i_33556519 += 1;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    Label3: {
        Label4: while (true) {
        if (!!((it_33556518 == null))) break Label4;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    result_33556510[0] = nimCopy(null, [], NTI33554449);
    if (!((total_33556520 == i_33556519))) {
    result_33556510[0].push.apply(result_33556510[0], [40]);;
    result_33556510[0].push.apply(result_33556510[0], HEX24_369098760((total_33556520 - i_33556519)));;
    result_33556510[0].push.apply(result_33556510[0], [32,99,97,108,108,115,32,111,109,105,116,116,101,100,41,32,46,46,46,10]);;
    }
    
    Label5: {
      var j_33556554 = 0;
      var colontmp__1107296650 = 0;
      colontmp__1107296650 = (i_33556519 - 1);
      var res_1107296652 = colontmp__1107296650;
      Label6: {
          Label7: while (true) {
          if (!(0 <= res_1107296652)) break Label7;
            j_33556554 = res_1107296652;
            result_33556510[0].push.apply(result_33556510[0], cstrToNimstr(tempFrames_33556521[j_33556554].Field2));;
            if ((0 < tempFrames_33556521[j_33556554].Field1)) {
            result_33556510[0].push.apply(result_33556510[0], [40]);;
            addInt_301990129(result_33556510, 0, tempFrames_33556521[j_33556554].Field1);
            if (false) {
            result_33556510[0].push.apply(result_33556510[0], [44,32]);;
            addInt_301990129(result_33556510, 0, 0);
            }
            
            result_33556510[0].push.apply(result_33556510[0], [41]);;
            }
            
            result_33556510[0].push.apply(result_33556510[0], [32,97,116,32]);;
            add_33556373(result_33556510, 0, tempFrames_33556521[j_33556554].Field0);
            result_33556510[0].push.apply(result_33556510[0], [10]);;
            res_1107296652 -= 1;
          }
      };
    };

  return result_33556510[0];

}

function rawWriteStackTrace_33556604() {
  var result_33556605 = [];

    if (!((framePtr == null))) {
    result_33556605 = nimCopy(null, ([84,114,97,99,101,98,97,99,107,32,40,109,111,115,116,32,114,101,99,101,110,116,32,99,97,108,108,32,108,97,115,116,41,10] || []).concat(auxWriteStackTrace_33556508(framePtr) || []), NTI33554449);
    }
    else {
      result_33556605 = nimCopy(null, [78,111,32,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,32,97,118,97,105,108,97,98,108,101,10], NTI33554449);
    }
    

  return result_33556605;

}

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 635;
    F.filename = "system.nim";
    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }  framePtr = F.prev;

  return result_33556922;

}

function unhandledException(e_33556649) {
    var buf_33556650 = [[]];
    if (!(((e_33556649.message).length == 0))) {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556650[0].push.apply(buf_33556650[0], e_33556649.message);;
    }
    else {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556650[0].push.apply(buf_33556650[0], [32,91]);;
    add_33556373(buf_33556650, 0, e_33556649.name);
    buf_33556650[0].push.apply(buf_33556650[0], [93,10]);;
    buf_33556650[0].push.apply(buf_33556650[0], rawWriteStackTrace_33556604());;
    var cbuf_33556651 = toJSStr(buf_33556650[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556651);
  }
  else {
    throw cbuf_33556651;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33557048) {
        if (a_33557048 > 2147483647 || a_33557048 < -2147483648) raiseOverflow();
  

  
}

function makeStringSlice_1107296268(str_1107296270) {
  var result_1107296271 = ({buf: [null, 0], start: 0, stop: 0});

  var F = {procname: "makeStringSlice.makeStringSlice", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 49;
    F.filename = "strslice.nim";
    F.line = 57;
    var strRef_1107296273 = null;
    var strRef_1107296273_Idx = 0;
    F.line = 58;
    strRef_1107296273 = [[]]; strRef_1107296273_Idx = 0;
    F.line = 59;
    strRef_1107296273[strRef_1107296273_Idx] = nimCopy(null, str_1107296270, NTI33554449);
    result_1107296271 = nimCopy(result_1107296271, {buf: [strRef_1107296273, strRef_1107296273_Idx], start: 0, stop: subInt((((str_1107296270).length) | 0), 1)}, NTI1107296259);
  framePtr = F.prev;

  return result_1107296271;

}
var F = {procname: "module strslice", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
framePtr = F;
F.line = 63;
F.filename = "strslice.nim";
var EmptyStringSlice_1107296311 = makeStringSlice_1107296268([]);
framePtr = F.prev;
var F = {procname: "module strslice", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function init_520097034(node_520097037, name_520097038, data_520097039, attributes_520097040) {
  var result_520097041 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 30;
    F.filename = "nodetree.nim";
    node_520097037.nameRef[0] = [[]]; node_520097037.nameRef[1] = 0;
    F.line = 31;
    node_520097037.nameRef[0][node_520097037.nameRef[1]] = nimCopy(null, name_520097038, NTI33554449);
    F.line = 33;
    node_520097037.childrenSeq = nimCopy(null, data_520097039, NTI520095668);
    F.line = 34;
    node_520097037.textSlice = nimCopy(node_520097037.textSlice, EmptyStringSlice_1107296311, NTI1107296259);
    F.line = 44;
    node_520097037.attributesRef = attributes_520097040;
    F.line = 45;
    node_520097037.sourcePos = (-1);
    F.line = 46;
    result_520097041 = node_520097037;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097041;

}

function new_520094392() {
  var result_520094395 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 840;
    F.filename = "system.nim";
    var r_520094397 = null;
    F.line = 843;
    r_520094397 = ({m_type: NTI520093702, nameRef: [null, 0], childrenSeq: [], textSlice: ({buf: [null, 0], start: 0, stop: 0}), attributesRef: null, sourcePos: 0});
    F.line = 844;
    result_520094395 = r_520094397;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094395;

}

function toStringSlice_520097012(str_520097014) {
  var result_520097015 = ({buf: [null, 0], start: 0, stop: 0});

  var F = {procname: "toStringSlice.toStringSlice", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 67;
    F.filename = "strslice.nim";
    result_520097015 = nimCopy(result_520097015, makeStringSlice_1107296268(str_520097014), NTI1107296259);
  framePtr = F.prev;

  return result_520097015;

}

function init_520096998(node_520097001, name_520097002, data_520097003, attributes_520097004) {
  var result_520097005 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 30;
    F.filename = "nodetree.nim";
    node_520097001.nameRef[0] = [[]]; node_520097001.nameRef[1] = 0;
    F.line = 31;
    node_520097001.nameRef[0][node_520097001.nameRef[1]] = nimCopy(null, name_520097002, NTI33554449);
    F.line = 43;
    node_520097001.textSlice = nimCopy(node_520097001.textSlice, toStringSlice_520097012(data_520097003), NTI1107296259);
    F.line = 44;
    node_520097001.attributesRef = attributes_520097004;
    F.line = 45;
    node_520097001.sourcePos = (-1);
    F.line = 46;
    result_520097005 = node_520097001;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097005;

}

function init_520096966(node_520096969, name_520096970, data_520096971, attributes_520096972) {
  var result_520096973 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 52;
    F.filename = "nodetree.nim";
    var attrRef_520096974 = null;
    F.line = 53;
    attrRef_520096974 = ({data: [], counter: 0, first: 0, last: 0});
    F.line = 54;
    attrRef_520096974 = nimCopy(attrRef_520096974, attributes_520096972, NTI520093711);
    F.line = 55;
    result_520096973 = init_520096998(node_520096969, name_520096970, data_520096971, attrRef_520096974);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520096973;

}

function nextPowerOfTwo_805306615(x_805306616) {
  var result_805306617 = 0;

    result_805306617 = (x_805306616 - 1);
    result_805306617 = (result_805306617 | (result_805306617 >> 16));
    result_805306617 = (result_805306617 | (result_805306617 >> 8));
    result_805306617 = (result_805306617 | (result_805306617 >> 4));
    result_805306617 = (result_805306617 | (result_805306617 >> 2));
    result_805306617 = (result_805306617 | (result_805306617 >> 1));
    result_805306617 += (1 + ((x_805306616 <= 0) ? 1 : 0));

  return result_805306617;

}

function raiseDivByZero() {
    raiseException({message: [100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111], parent: null, m_type: NTI134217742, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function slotsNeeded_1023410218(count_1023410219) {
  var result_1023410220 = 0;

  var F = {procname: "tables.slotsNeeded", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 39;
    F.filename = "hashcommon.nim";
    result_1023410220 = nextPowerOfTwo_805306615(addInt(divInt(mulInt(count_1023410219, 3), 2), 4));
  framePtr = F.prev;

  return result_1023410220;

}

function initOrderedTable_520095625(initialSize_520095628) {
  var result_520095629 = ({data: [], counter: 0, first: 0, last: 0});

  var F = {procname: "initOrderedTable.initOrderedTable", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym66_520095631 = slotsNeeded_1023410218(chckRange(initialSize_520095628, 0, 2147483647));
    F.line = 169;
    result_520095629.counter = 0;
    F.line = 170;
    result_520095629.data = new Array(chckRange(correctSizeHEX60gensym66_520095631, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym66_520095631, 0, 2147483647) ; ++i) { result_520095629.data[i] = {Field0: 0, Field1: 0, Field2: [], Field3: []}; }    F.line = 172;
    result_520095629.first = (-1);
    F.line = 173;
    result_520095629.last = (-1);
  framePtr = F.prev;

  return result_520095629;

}

function imul_1040187704(a_1040187705, b_1040187706) {
  var result_1040187707 = 0;

  var F = {procname: "hashes.imul", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 293;
    F.filename = "hashes.nim";
    var mask_1040187708 = 65535;
    F.line = 295;
    var aHi_1040187713 = (((a_1040187705 >>> 16) & mask_1040187708) >>> 0);
    F.line = 296;
    var aLo_1040187714 = ((a_1040187705 & mask_1040187708) >>> 0);
    F.line = 297;
    var bHi_1040187719 = (((b_1040187706 >>> 16) & mask_1040187708) >>> 0);
    F.line = 298;
    var bLo_1040187720 = ((b_1040187706 & mask_1040187708) >>> 0);
    F.line = 299;
    result_1040187707 = ((((aLo_1040187714 * bLo_1040187720) >>> 0) + ((((((aHi_1040187713 * bLo_1040187720) >>> 0) + ((aLo_1040187714 * bHi_1040187719) >>> 0)) >>> 0) << 16) >>> 0)) >>> 0);
  framePtr = F.prev;

  return result_1040187707;

}

function rotl32_1040187725(x_1040187726, r_1040187727) {
  var result_1040187728 = 0;

  var F = {procname: "hashes.rotl32", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 304;
    F.filename = "hashes.nim";
    result_1040187728 = ((((x_1040187726 << r_1040187727) >>> 0) | (x_1040187726 >>> subInt(32, r_1040187727))) >>> 0);
  framePtr = F.prev;

  return result_1040187728;

}

function murmurHash_1040187737(x_1040187738) {
  var result_1040187739 = 0;

  var F = {procname: "hashes.murmurHash", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/hashes.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 315;
    F.filename = "hashes.nim";
    var size_1040187748 = (x_1040187738).length;
    F.line = 316;
    var stepSize_1040187749 = 4;
    F.line = 317;
    var n_1040187750 = divInt(size_1040187748, stepSize_1040187749);
    F.line = 319;
    var h1_1040187751 = 0;
    F.line = 320;
    var i_1040187752 = 0;
    Label1: {
      F.line = 323;
        Label2: while (true) {
        if (!(i_1040187752 < mulInt(n_1040187750, stepSize_1040187749))) break Label2;
          F.line = 324;
          var k1_1040187753 = 0;
          F.line = 326;
          var j_1040187754 = stepSize_1040187749;
          Label3: {
            F.line = 327;
              Label4: while (true) {
              if (!(0 < j_1040187754)) break Label4;
                F.line = 328;
                j_1040187754 = subInt(j_1040187754, 1);
                F.line = 329;
                k1_1040187753 = ((((k1_1040187753 << 8) >>> 0) | x_1040187738[chckIndx(addInt(i_1040187752, j_1040187754), 0, (x_1040187738).length - 1)]) >>> 0);
              }
          };
          F.line = 332;
          i_1040187752 = addInt(i_1040187752, stepSize_1040187749);
          F.line = 334;
          k1_1040187753 = imul_1040187704(k1_1040187753, 3432918353);
          F.line = 335;
          k1_1040187753 = rotl32_1040187725(k1_1040187753, 15);
          F.line = 336;
          k1_1040187753 = imul_1040187704(k1_1040187753, 461845907);
          F.line = 338;
          h1_1040187751 = ((h1_1040187751 ^ k1_1040187753) >>> 0);
          F.line = 339;
          h1_1040187751 = rotl32_1040187725(h1_1040187751, 13);
          F.line = 340;
          h1_1040187751 = ((((h1_1040187751 * 5) >>> 0) + 3864292196) >>> 0);
        }
    };
    F.line = 343;
    var k1_1040187773 = 0;
    F.line = 344;
    var rem_1040187774 = modInt(size_1040187748, stepSize_1040187749);
    Label5: {
      F.line = 345;
        Label6: while (true) {
        if (!(0 < rem_1040187774)) break Label6;
          F.line = 346;
          rem_1040187774 = subInt(rem_1040187774, 1);
          F.line = 347;
          k1_1040187773 = ((((k1_1040187773 << 8) >>> 0) | x_1040187738[chckIndx(addInt(i_1040187752, rem_1040187774), 0, (x_1040187738).length - 1)]) >>> 0);
        }
    };
    F.line = 348;
    k1_1040187773 = imul_1040187704(k1_1040187773, 3432918353);
    F.line = 349;
    k1_1040187773 = rotl32_1040187725(k1_1040187773, 15);
    F.line = 350;
    k1_1040187773 = imul_1040187704(k1_1040187773, 461845907);
    F.line = 351;
    h1_1040187751 = ((h1_1040187751 ^ k1_1040187773) >>> 0);
    F.line = 354;
    h1_1040187751 = ((h1_1040187751 ^ size_1040187748) >>> 0);
    F.line = 355;
    h1_1040187751 = ((h1_1040187751 ^ (h1_1040187751 >>> 16)) >>> 0);
    F.line = 356;
    h1_1040187751 = imul_1040187704(h1_1040187751, 2246822507);
    F.line = 357;
    h1_1040187751 = ((h1_1040187751 ^ (h1_1040187751 >>> 13)) >>> 0);
    F.line = 358;
    h1_1040187751 = imul_1040187704(h1_1040187751, 3266489909);
    F.line = 359;
    h1_1040187751 = ((h1_1040187751 ^ (h1_1040187751 >>> 16)) >>> 0);
    F.line = 360;
    result_1040187739 = Number(BigInt.asIntN(32, BigInt(h1_1040187751)));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1040187739;

}

function hash_1040187839(x_1040187840) {
  var result_1040187841 = 0;

  var F = {procname: "hashes.hash", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 386;
    F.filename = "hashes.nim";
    result_1040187841 = murmurHash_1040187737((x_1040187840.slice(0, (x_1040187840).length - 1 + 1)));
  framePtr = F.prev;

  return result_1040187841;

}

function isFilled_1023410207(hcode_1023410208) {
  var result_1023410209 = false;

  var F = {procname: "tables.isFilled", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 27;
    F.filename = "hashcommon.nim";
    result_1023410209 = !((hcode_1023410208 == 0));
  framePtr = F.prev;

  return result_1023410209;

}

function nextTry_1023410210(h_1023410211, maxHash_1023410212) {
  var result_1023410213 = 0;

  var F = {procname: "tables.nextTry", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "hashcommon.nim";
    result_1023410213 = (addInt(h_1023410211, 1) & maxHash_1023410212);
  framePtr = F.prev;

  return result_1023410213;

}

function rawGet_520094003(t_520094006, key_520094007, hc_520094008, hc_520094008_Idx) {
  var result_520094009 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 59;
    F.filename = "hashcommon.nim";
    hc_520094008[hc_520094008_Idx] = hash_1040187839(key_520094007);
    if ((hc_520094008[hc_520094008_Idx] == 0)) {
    F.line = 61;
    hc_520094008[hc_520094008_Idx] = 314159265;
    }
    
    if (((t_520094006.data).length == 0)) {
    F.line = 43;
    result_520094009 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_520094061 = (hc_520094008[hc_520094008_Idx] & (t_520094006.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1023410207(t_520094006.data[chckIndx(h_520094061, 0, (t_520094006.data).length - 1)].Field0)) break Label2;
          if (((t_520094006.data[chckIndx(h_520094061, 0, (t_520094006.data).length - 1)].Field0 == hc_520094008[hc_520094008_Idx]) && eqStrings(t_520094006.data[chckIndx(h_520094061, 0, (t_520094006.data).length - 1)].Field2, key_520094007))) {
          F.line = 51;
          result_520094009 = h_520094061;
          break BeforeRet;
          }
          
          F.line = 52;
          h_520094061 = nextTry_1023410210(h_520094061, (t_520094006.data).length - 1);
        }
    };
    F.line = 53;
    result_520094009 = subInt((-1), h_520094061);
  };
  framePtr = F.prev;

  return result_520094009;

}

function sysFatal_268435501(message_268435504) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_268435504, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}

function raiseAssert_268435499(msg_268435500) {
  var F = {procname: "assertions.raiseAssert", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 36;
    F.filename = "assertions.nim";
    sysFatal_268435501(msg_268435500);
  framePtr = F.prev;

  
}

function failedAssertImpl_268435541(msg_268435542) {
  var F = {procname: "assertions.failedAssertImpl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 41;
    F.filename = "assertions.nim";
    raiseAssert_268435499(msg_268435542);
  framePtr = F.prev;

  
}

function mustRehash_520095865(t_520095867) {
  var result_520095868 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_520095867.counter < (t_520095867.data).length))) {
    F.line = 34;
    F.filename = "hashcommon.nim";
    failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 35;
    result_520095868 = ((mulInt((t_520095867.data).length, 2) < mulInt(t_520095867.counter, 3)) || (subInt((t_520095867.data).length, t_520095867.counter) < 4));
  framePtr = F.prev;

  return result_520095868;

}

function rawInsert_520096439(t_520096442, data_520096443, data_520096443_Idx, key_520096444, val_520096445, hc_520096446, h_520096447) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 25;
    F.filename = "tableimpl.nim";
    data_520096443[data_520096443_Idx][chckIndx(h_520096447, 0, (data_520096443[data_520096443_Idx]).length - 1)].Field2 = nimCopy(null, key_520096444, NTI33554449);
    F.line = 26;
    data_520096443[data_520096443_Idx][chckIndx(h_520096447, 0, (data_520096443[data_520096443_Idx]).length - 1)].Field3 = nimCopy(null, val_520096445, NTI33554449);
    F.line = 27;
    data_520096443[data_520096443_Idx][chckIndx(h_520096447, 0, (data_520096443[data_520096443_Idx]).length - 1)].Field0 = hc_520096446;
    F.line = 1279;
    F.filename = "tables.nim";
    data_520096443[data_520096443_Idx][chckIndx(h_520096447, 0, (data_520096443[data_520096443_Idx]).length - 1)].Field1 = (-1);
    if ((t_520096442.first < 0)) {
    F.line = 1280;
    t_520096442.first = h_520096447;
    }
    
    if ((0 <= t_520096442.last)) {
    F.line = 1281;
    data_520096443[data_520096443_Idx][chckIndx(t_520096442.last, 0, (data_520096443[data_520096443_Idx]).length - 1)].Field1 = h_520096447;
    }
    
    F.line = 1282;
    t_520096442.last = h_520096447;
  framePtr = F.prev;

  
}

function enlarge_520096028(t_520096031) {
          var Temporary6;
          var Temporary7;

  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 1285;
    F.filename = "tables.nim";
    var n_520096034 = [];
    F.line = 1286;
    n_520096034 = new Array(chckRange(mulInt((t_520096031.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_520096031.data).length, 2), 0, 2147483647) ; ++i) { n_520096034[i] = {Field0: 0, Field1: 0, Field2: [], Field3: []}; }    F.line = 1287;
    var h_520096086 = t_520096031.first;
    F.line = 1288;
    t_520096031.first = (-1);
    F.line = 1289;
    t_520096031.last = (-1);
    F.line = 1290;
    var Temporary1 = t_520096031.data; t_520096031.data = n_520096034; n_520096034 = Temporary1;    Label2: {
      F.line = 1291;
        Label3: while (true) {
        if (!(0 <= h_520096086)) break Label3;
          F.line = 1292;
          var nxt_520096144 = n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field1;
          F.line = 1293;
          var eh_520096198 = n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field0;
          if (isFilled_1023410207(eh_520096198)) {
          F.line = 1295;
          var j_520096202 = (eh_520096198 & (t_520096031.data).length - 1);
          Label4: {
            F.line = 1296;
              Label5: while (true) {
              if (!isFilled_1023410207(t_520096031.data[chckIndx(j_520096202, 0, (t_520096031.data).length - 1)].Field0)) break Label5;
                F.line = 1297;
                j_520096202 = nextTry_1023410210(j_520096202, (t_520096031.data).length - 1);
              }
          };
          F.line = 1298;
          Temporary6 = n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field2;
          n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field2 = genericReset(n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field2, NTI33554449);
          Temporary7 = n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field3;
          n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field3 = genericReset(n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field3, NTI33554449);
          rawInsert_520096439(t_520096031, t_520096031, "data", Temporary6, Temporary7, n_520096034[chckIndx(h_520096086, 0, (n_520096034).length - 1)].Field0, j_520096202);
          }
          
          F.line = 1299;
          h_520096086 = nxt_520096144;
        }
    };
  framePtr = F.prev;

  
}

function rawGetKnownHC_520096721(t_520096724, key_520096725, hc_520096726) {
  var result_520096727 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((t_520096724.data).length == 0)) {
    F.line = 43;
    F.filename = "hashcommon.nim";
    result_520096727 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_520096778 = (hc_520096726 & (t_520096724.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1023410207(t_520096724.data[chckIndx(h_520096778, 0, (t_520096724.data).length - 1)].Field0)) break Label2;
          if (((t_520096724.data[chckIndx(h_520096778, 0, (t_520096724.data).length - 1)].Field0 == hc_520096726) && eqStrings(t_520096724.data[chckIndx(h_520096778, 0, (t_520096724.data).length - 1)].Field2, key_520096725))) {
          F.line = 51;
          result_520096727 = h_520096778;
          break BeforeRet;
          }
          
          F.line = 52;
          h_520096778 = nextTry_1023410210(h_520096778, (t_520096724.data).length - 1);
        }
    };
    F.line = 53;
    result_520096727 = subInt((-1), h_520096778);
  };
  framePtr = F.prev;

  return result_520096727;

}

function HEX5BHEX5DHEX3D_520095684(t_520095687, key_520095688, val_520095689) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_520095687.data).length == 0)) {
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym69_520095738 = slotsNeeded_1023410218(32);
    F.line = 169;
    t_520095687.counter = 0;
    F.line = 170;
    t_520095687.data = new Array(chckRange(correctSizeHEX60gensym69_520095738, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym69_520095738, 0, 2147483647) ; ++i) { t_520095687.data[i] = {Field0: 0, Field1: 0, Field2: [], Field3: []}; }    F.line = 172;
    t_520095687.first = (-1);
    F.line = 173;
    t_520095687.last = (-1);
    }
    
    F.line = 59;
    var hc_520095743 = [0];
    F.line = 60;
    var index_520095758 = rawGet_520094003(t_520095687, key_520095688, hc_520095743, 0);
    if ((0 <= index_520095758)) {
    F.line = 61;
    t_520095687.data[chckIndx(index_520095758, 0, (t_520095687.data).length - 1)].Field3 = nimCopy(null, val_520095689, NTI33554449);
    }
    else {
      if (((t_520095687.data).length == 0)) {
      F.line = 165;
      var correctSizeHEX60gensym72_520095860 = slotsNeeded_1023410218(32);
      F.line = 169;
      t_520095687.counter = 0;
      F.line = 170;
      t_520095687.data = new Array(chckRange(correctSizeHEX60gensym72_520095860, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym72_520095860, 0, 2147483647) ; ++i) { t_520095687.data[i] = {Field0: 0, Field1: 0, Field2: [], Field3: []}; }      F.line = 172;
      t_520095687.first = (-1);
      F.line = 173;
      t_520095687.last = (-1);
      }
      
      if (mustRehash_520095865(t_520095687)) {
      F.line = 51;
      enlarge_520096028(t_520095687);
      F.line = 52;
      index_520095758 = rawGetKnownHC_520096721(t_520095687, key_520095688, hc_520095743[0]);
      }
      
      F.line = 53;
      index_520095758 = subInt((-1), index_520095758);
      F.line = 54;
      rawInsert_520096439(t_520095687, t_520095687, "data", key_520095688, val_520095689, hc_520095743[0], index_520095758);
      F.line = 62;
      t_520095687.counter = addInt(t_520095687.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function toOrderedTable_520095620(pairs_520095623) {
  var result_520095624 = [({data: [], counter: 0, first: 0, last: 0})];

  var F = {procname: "toOrderedTable.toOrderedTable", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 1358;
    F.filename = "tables.nim";
    result_520095624[0] = nimCopy(result_520095624[0], initOrderedTable_520095625((pairs_520095623).length), NTI520093711);
    Label1: {
      F.line = 1359;
      var key_520095642 = [];
      F.line = 1359;
      var val_520095643 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_520097193 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_520097193 < (pairs_520095623).length)) break Label3;
            F.line = 1359;
            F.filename = "tables.nim";
            key_520095642 = pairs_520095623[chckIndx(i_520097193, 0, (pairs_520095623).length - 1)]["Field0"];
            F.line = 1359;
            val_520095643 = pairs_520095623[chckIndx(i_520097193, 0, (pairs_520095623).length - 1)]["Field1"];
            F.line = 1359;
            HEX5BHEX5DHEX3D_520095684(result_520095624[0], key_520095642, val_520095643);
            F.line = 16;
            F.filename = "iterators.nim";
            i_520097193 = addInt(i_520097193, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_520095624[0];

}

function nsuJoinSep(a_788530731, sep_788530732) {
  var result_788530733 = [];

  var F = {procname: "strutils.join", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    if ((0 < (a_788530731).length)) {
    F.line = 1845;
    F.filename = "strutils.nim";
    var L_788530740 = mulInt((sep_788530732).length, subInt((a_788530731).length, 1));
    Label1: {
      F.line = 1846;
      var i_788530748 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520097203 = 0;
      F.line = 1846;
      F.filename = "strutils.nim";
      colontmp__520097203 = (a_788530731).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520097204 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_520097204 <= colontmp__520097203)) break Label3;
            F.line = 1846;
            F.filename = "strutils.nim";
            i_788530748 = res_520097204;
            F.line = 1846;
            L_788530740 = addInt(L_788530740, (a_788530731[chckIndx(i_788530748, 0, (a_788530731).length - 1)]).length);
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520097204 = addInt(res_520097204, 1);
          }
      };
    };
    F.line = 1847;
    F.filename = "strutils.nim";
    result_788530733 = nimCopy(null, mnewString(0), NTI33554449);
    F.line = 1848;
    result_788530733.push.apply(result_788530733, a_788530731[chckIndx(0, 0, (a_788530731).length - 1)]);;
    Label4: {
      F.line = 1849;
      var i_788530761 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520097207 = 0;
      F.line = 1849;
      F.filename = "strutils.nim";
      colontmp__520097207 = (a_788530731).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520097208 = 1;
      Label5: {
        F.line = 91;
          Label6: while (true) {
          if (!(res_520097208 <= colontmp__520097207)) break Label6;
            F.line = 1849;
            F.filename = "strutils.nim";
            i_788530761 = res_520097208;
            F.line = 1849;
            result_788530733.push.apply(result_788530733, sep_788530732);;
            F.line = 1849;
            result_788530733.push.apply(result_788530733, a_788530731[chckIndx(i_788530761, 0, (a_788530731).length - 1)]);;
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520097208 = addInt(res_520097208, 1);
          }
      };
    };
    }
    else {
      F.line = 1853;
      F.filename = "strutils.nim";
      result_788530733 = nimCopy(null, [], NTI33554449);
    }
    
  framePtr = F.prev;

  return result_788530733;

}

function newSeq_503317028(len_503317030) {
  var result_503317031 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 635;
    F.filename = "system.nim";
    result_503317031 = new Array(len_503317030); for (var i = 0 ; i < len_503317030 ; ++i) { result_503317031[i] = []; }  framePtr = F.prev;

  return result_503317031;

}

function nsuEndsWith(s_788530626, suffix_788530627) {
  var result_788530628 = false;

  var F = {procname: "strutils.endsWith", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 65;
    F.filename = "strimpl.nim";
    var suffixLenHEX60gensym153_788530634 = (suffix_788530627).length;
    F.line = 66;
    var sLenHEX60gensym153_788530635 = (s_788530626).length;
    F.line = 67;
    var iHEX60gensym153_788530636 = 0;
    F.line = 68;
    var jHEX60gensym153_788530637 = subInt(sLenHEX60gensym153_788530635, suffixLenHEX60gensym153_788530634);
    Label1: {
      F.line = 69;
        Label2: while (true) {
        if (!((0 <= addInt(iHEX60gensym153_788530636, jHEX60gensym153_788530637)) && (addInt(iHEX60gensym153_788530636, jHEX60gensym153_788530637) < sLenHEX60gensym153_788530635))) break Label2;
          if (!((s_788530626[chckIndx(addInt(iHEX60gensym153_788530636, jHEX60gensym153_788530637), 0, (s_788530626).length - 1)] == suffix_788530627[chckIndx(iHEX60gensym153_788530636, 0, (suffix_788530627).length - 1)]))) {
          F.line = 70;
          result_788530628 = false;
          break BeforeRet;
          }
          
          F.line = 71;
          iHEX60gensym153_788530636 = addInt(iHEX60gensym153_788530636, 1);
        }
    };
    if ((suffixLenHEX60gensym153_788530634 <= iHEX60gensym153_788530636)) {
    F.line = 72;
    result_788530628 = true;
    break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_788530628;

}

function nsuStartsWith(s_788530606, prefix_788530607) {
  var result_788530608 = false;

  var F = {procname: "strutils.startsWith", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 56;
    F.filename = "strimpl.nim";
    var prefixLenHEX60gensym146_788530613 = (prefix_788530607).length;
    F.line = 57;
    var sLenHEX60gensym146_788530614 = (s_788530606).length;
    F.line = 58;
    var iHEX60gensym146_788530615 = 0;
    Label1: {
      F.line = 1624;
      F.filename = "strutils.nim";
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym146_788530613 <= iHEX60gensym146_788530615)) {
          F.line = 60;
          F.filename = "strimpl.nim";
          result_788530608 = true;
          break BeforeRet;
          }
          
          if (((sLenHEX60gensym146_788530614 <= iHEX60gensym146_788530615) || !((s_788530606[chckIndx(iHEX60gensym146_788530615, 0, (s_788530606).length - 1)] == prefix_788530607[chckIndx(iHEX60gensym146_788530615, 0, (prefix_788530607).length - 1)])))) {
          F.line = 61;
          result_788530608 = false;
          break BeforeRet;
          }
          
          F.line = 62;
          iHEX60gensym146_788530615 = addInt(iHEX60gensym146_788530615, 1);
        }
    };
  };
  framePtr = F.prev;

  return result_788530608;

}

function substr_33558078(s_33558079, first_33558080, last_33558081) {
  var result_33558082 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2658;
    F.filename = "system.nim";
    var first_33558083 = nimMax(first_33558080, 0);
    F.line = 2659;
    var L_33558084 = nimMax(addInt(subInt(nimMin(last_33558081, (s_33558079).length - 1), first_33558083), 1), 0);
    F.line = 2660;
    result_33558082 = nimCopy(null, mnewString(chckRange(L_33558084, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 2661;
      var i_33558089 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520097235 = 0;
      F.line = 2661;
      F.filename = "system.nim";
      colontmp__520097235 = subInt(L_33558084, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520097236 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_520097236 <= colontmp__520097235)) break Label3;
            F.line = 2661;
            F.filename = "system.nim";
            i_33558089 = res_520097236;
            F.line = 2661;
            result_33558082[chckIndx(i_33558089, 0, (result_33558082).length - 1)] = s_33558079[chckIndx(addInt(i_33558089, first_33558083), 0, (s_33558079).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520097236 = addInt(res_520097236, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_33558082;

}

function nsuIndent(s_788530380, count_788530381, padding_788530382) {
            var Temporary6;

  var result_788530383 = [];

  var F = {procname: "strutils.indent", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1463;
    F.filename = "strutils.nim";
    result_788530383 = nimCopy(null, [], NTI33554449);
    F.line = 1464;
    var i_788530384 = 0;
    Label1: {
      F.line = 1465;
      var line_788530385 = [];
      F.line = 669;
      var first_520097229 = 0;
      F.line = 670;
      var last_520097230 = 0;
      F.line = 671;
      var eolpos_520097231 = 0;
      Label2: {
        F.line = 672;
          Label3: while (true) {
          if (!true) break Label3;
            Label4: {
              F.line = 673;
                Label5: while (true) {
                if (!((last_520097230 < (s_788530380).length) && !((ConstSet2[s_788530380[chckIndx(last_520097230, 0, (s_788530380).length - 1)]] != undefined)))) break Label5;
                  F.line = 673;
                  last_520097230 = addInt(last_520097230, 1);
                }
            };
            F.line = 675;
            eolpos_520097231 = last_520097230;
            if ((last_520097230 < (s_788530380).length)) {
            if ((s_788530380[chckIndx(last_520097230, 0, (s_788530380).length - 1)] == 10)) {
            F.line = 677;
            last_520097230 = addInt(last_520097230, 1);
            }
            else {
            if ((s_788530380[chckIndx(last_520097230, 0, (s_788530380).length - 1)] == 13)) {
            F.line = 679;
            last_520097230 = addInt(last_520097230, 1);
            if (((last_520097230 < (s_788530380).length) && (s_788530380[chckIndx(last_520097230, 0, (s_788530380).length - 1)] == 10))) {
            F.line = 680;
            last_520097230 = addInt(last_520097230, 1);
            }
            
            }
            }
            }
            
            F.line = 1465;
            if (false) {
            Temporary6 = subInt(last_520097230, 1);
            }
            else {
            Temporary6 = subInt(eolpos_520097231, 1);
            }
            
            line_788530385 = substr_33558078(s_788530380, first_520097229, Temporary6);
            if (!((i_788530384 == 0))) {
            F.line = 1467;
            result_788530383.push.apply(result_788530383, [10]);;
            }
            
            Label7: {
              F.line = 1468;
              var j_788530390 = 0;
              F.line = 75;
              F.filename = "iterators_1.nim";
              var colontmp__520097224 = 0;
              F.line = 1468;
              F.filename = "strutils.nim";
              colontmp__520097224 = count_788530381;
              F.line = 90;
              F.filename = "iterators_1.nim";
              var res_520097225 = 1;
              Label8: {
                F.line = 91;
                  Label9: while (true) {
                  if (!(res_520097225 <= colontmp__520097224)) break Label9;
                    F.line = 1468;
                    F.filename = "strutils.nim";
                    j_788530390 = res_520097225;
                    F.line = 1468;
                    result_788530383.push.apply(result_788530383, padding_788530382);;
                    F.line = 93;
                    F.filename = "iterators_1.nim";
                    res_520097225 = addInt(res_520097225, 1);
                  }
              };
            };
            F.line = 1465;
            F.filename = "strutils.nim";
            result_788530383.push.apply(result_788530383, line_788530385);;
            F.line = 1465;
            i_788530384 = addInt(i_788530384, 1);
            if ((eolpos_520097231 == last_520097230)) {
            F.line = 686;
            break Label2;
            }
            
            F.line = 688;
            first_520097229 = last_520097230;
          }
      };
    };
  framePtr = F.prev;

  return result_788530383;

}

function HEX5BHEX5D_788530459(s_788530462, x_788530463) {
  var result_788530464 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_788530466 = x_788530463.a;
    F.line = 84;
    var L_788530468 = addInt(subInt(subInt((s_788530462).length, x_788530463.b), a_788530466), 1);
    F.line = 85;
    result_788530464 = nimCopy(null, mnewString(chckRange(L_788530468, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_788530473 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520097239 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520097239 < L_788530468)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_788530473 = i_520097239;
            F.line = 86;
            result_788530464[chckIndx(i_788530473, 0, (result_788530464).length - 1)] = s_788530462[chckIndx(addInt(i_788530473, a_788530466), 0, (s_788530462).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520097239 = addInt(i_520097239, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_788530464;

}

function HEX2EHEX2E_939524200(a_939524203, b_939524204) {
  var result_939524207 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_939524207 = nimCopy(result_939524207, {a: a_939524203, b: b_939524204}, NTI939524181);
  framePtr = F.prev;

  return result_939524207;

}

function HEX5BHEX5D_520094717(s_520094719, i_520094720) {
  var result_520094721 = null;
  var result_520094721_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_520094721 = s_520094719; result_520094721_Idx = chckIndx(subInt((s_520094719).length, i_520094720), 0, (s_520094719).length - 1);
  framePtr = F.prev;

  return [result_520094721, result_520094721_Idx];

}

function delete_520094741(x_520094743, x_520094743_Idx, i_520094744) {
  var F = {procname: "delete.delete", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1966;
    F.filename = "system.nim";
    x_520094743[x_520094743_Idx].splice(i_520094744, 1);
  framePtr = F.prev;

  
}

function concat_520094772(seqs_520094774) {
  var result_520094775 = [];

  var F = {procname: "concat.concat", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/sequtils.nim", line: 0};
  framePtr = F;
    F.line = 134;
    F.filename = "sequtils.nim";
    var L_520094776 = 0;
    Label1: {
      F.line = 135;
      var seqitm_520094790 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_520097248 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_520097248 < (seqs_520094774).length)) break Label3;
            F.line = 135;
            F.filename = "sequtils.nim";
            seqitm_520094790 = seqs_520094774[chckIndx(i_520097248, 0, (seqs_520094774).length - 1)];
            F.line = 135;
            L_520094776 = addInt(L_520094776, (seqitm_520094790).length);
            F.line = 16;
            F.filename = "iterators.nim";
            i_520097248 = addInt(i_520097248, 1);
          }
      };
    };
    F.line = 136;
    F.filename = "sequtils.nim";
    result_520094775 = new Array(chckRange(L_520094776, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_520094776, 0, 2147483647) ; ++i) { result_520094775[i] = []; }    F.line = 137;
    var i_520094803 = 0;
    Label4: {
      F.line = 138;
      var s_520094807 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_520097256 = 0;
      Label5: {
        F.line = 14;
          Label6: while (true) {
          if (!(i_520097256 < (seqs_520094774).length)) break Label6;
            F.line = 138;
            F.filename = "sequtils.nim";
            s_520094807 = seqs_520094774[chckIndx(i_520097256, 0, (seqs_520094774).length - 1)];
            Label7: {
              F.line = 139;
              var itm_520094829 = [];
              F.line = 241;
              F.filename = "iterators.nim";
              var i_520097253 = 0;
              F.line = 242;
              var L_520097254 = (s_520094807).length;
              Label8: {
                F.line = 243;
                  Label9: while (true) {
                  if (!(i_520097253 < L_520097254)) break Label9;
                    F.line = 139;
                    F.filename = "sequtils.nim";
                    itm_520094829 = s_520094807[chckIndx(i_520097253, 0, (s_520094807).length - 1)];
                    F.line = 140;
                    result_520094775[chckIndx(i_520094803, 0, (result_520094775).length - 1)] = nimCopy(null, itm_520094829, NTI33554449);
                    F.line = 139;
                    i_520094803 = addInt(i_520094803, 1);
                    F.line = 245;
                    F.filename = "iterators.nim";
                    i_520097253 = addInt(i_520097253, 1);
                    if (!(((s_520094807).length == L_520097254))) {
                    F.line = 246;
                    failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              };
            };
            F.line = 16;
            i_520097256 = addInt(i_520097256, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_520094775;

}

function serialize_520094583(node_520094584, opening_520094587, closing_520094588, leafdata_520094591, ind_520094592) {
    var Temporary1;
    var Temporary3;
      var Temporary8;
      var Temporary12;
        var Temporary14;

  var result_520094593 = [];

  var F = {procname: "nodetree.serialize", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 199;
    F.filename = "nodetree.nim";
    result_520094593 = nimCopy(null, newSeq_503317028(0), NTI503316800);
    F.line = 200;
    var open_520094601 = opening_520094587(node_520094584);
    F.line = 201;
    var close_520094602 = closing_520094588(node_520094584);
    F.line = 202;
    var openLF_520094603 = nsuEndsWith(open_520094601, [10]);
    F.line = 203;
    var closeLF_520094604 = nsuStartsWith(close_520094602, [10]);
    if ((0 < ind_520094592)) {
    F.line = 205;
    if (openLF_520094603) {
    Temporary1 = nsuIndent(HEX5BHEX5D_788530459(open_520094601, HEX2EHEX2E_939524200(0, 2)), chckRange(ind_520094592, 0, 2147483647), [32]);
    }
    else {
    Temporary1 = nsuIndent(open_520094601, chckRange(ind_520094592, 0, 2147483647), [32]);
    }
    
    open_520094601 = nimCopy(null, Temporary1, NTI33554449);
    if (closeLF_520094604) {
    F.line = 206;
    close_520094602 = nimCopy(null, nsuIndent(HEX5BHEX5D_788530459(close_520094602, HEX2EHEX2E_939524200(1, 1)), chckRange(ind_520094592, 0, 2147483647), [32]), NTI33554449);
    }
    
    }
    else {
      if (openLF_520094603) {
      F.line = 208;
      open_520094601 = nimCopy(null, HEX5BHEX5D_788530459(open_520094601, HEX2EHEX2E_939524200(0, 2)), NTI33554449);
      }
      
      if (closeLF_520094604) {
      F.line = 209;
      close_520094602 = nimCopy(null, HEX5BHEX5D_788530459(close_520094602, HEX2EHEX2E_939524200(1, 1)), NTI33554449);
      }
      
    }
    
    F.line = 210;
    var Temporary2 = nimCopy(null, open_520094601, NTI33554449);
    result_520094593.push(Temporary2);;
    if (((node_520094584.childrenSeq).length == 0)) {
    F.line = 213;
    var lines_520094713 = [leafdata_520094591(node_520094584)];
    if ((!(openLF_520094603) && (0 < (lines_520094713[0]).length))) {
    F.line = 215;
    (Temporary3 = HEX5BHEX5D_520094717(result_520094593, 1), Temporary3)[0][Temporary3[1]].push.apply(Temporary3[0][Temporary3[1]], lines_520094713[0][chckIndx(0, 0, (lines_520094713[0]).length - 1)]);;
    F.line = 216;
    delete_520094741(lines_520094713, 0, 0);
    }
    
    Label4: {
      F.line = 217;
      var i_520094771 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__520097211 = 0;
      F.line = 217;
      F.filename = "nodetree.nim";
      colontmp__520097211 = subInt((lines_520094713[0]).length, 1);
      F.line = 65;
      F.filename = "iterators_1.nim";
      var res_520097213 = 0;
      Label5: {
        F.line = 66;
          Label6: while (true) {
          if (!(res_520097213 <= colontmp__520097211)) break Label6;
            F.line = 217;
            F.filename = "nodetree.nim";
            i_520094771 = res_520097213;
            F.line = 217;
            lines_520094713[0][chckIndx(i_520094771, 0, (lines_520094713[0]).length - 1)] = nimCopy(null, nsuIndent(lines_520094713[0][chckIndx(i_520094771, 0, (lines_520094713[0]).length - 1)], chckRange(addInt(ind_520094592, 2), 0, 2147483647), [32]), NTI33554449);
            F.line = 68;
            F.filename = "iterators_1.nim";
            res_520097213 = addInt(res_520097213, 1);
          }
      };
    };
    F.line = 219;
    F.filename = "nodetree.nim";
    result_520094593 = nimCopy(null, concat_520094772([nimCopy(null, result_520094593, NTI520094392), nimCopy(null, lines_520094713[0], NTI520094397)]), NTI520094403);
    if (closeLF_520094604) {
    F.line = 221;
    var Temporary7 = nimCopy(null, close_520094602, NTI33554449);
    result_520094593.push(Temporary7);;
    }
    else {
      F.line = 223;
    (Temporary8 = HEX5BHEX5D_520094717(result_520094593, 1), Temporary8)[0][Temporary8[1]].push.apply(Temporary8[0][Temporary8[1]], close_520094602);;
    }
    
    }
    else {
      F.line = 226;
      F.line = 226;
      var collectResult_520094863 = [];
      Label9: {
        F.line = 227;
        var child_520094897 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520097217 = 0;
        F.line = 242;
        var L_520097218 = (node_520094584.childrenSeq).length;
        Label10: {
          F.line = 243;
            Label11: while (true) {
            if (!(i_520097217 < L_520097218)) break Label11;
              F.line = 227;
              F.filename = "nodetree.nim";
              child_520094897 = node_520094584.childrenSeq[chckIndx(i_520097217, 0, (node_520094584.childrenSeq).length - 1)];
              F.line = 227;
              collectResult_520094863.push(serialize_520094583(child_520094897, opening_520094587, closing_520094588, leafdata_520094591, addInt(ind_520094592, 2)));;
              F.line = 245;
              F.filename = "iterators.nim";
              i_520097217 = addInt(i_520097217, 1);
              if (!(((node_520094584.childrenSeq).length == L_520097218))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      var childBlocks_520094902 = [nimCopy(null, collectResult_520094863, NTI520094480)];
      if ((!(openLF_520094603) && (0 < (childBlocks_520094902[0][chckIndx(0, 0, (childBlocks_520094902[0]).length - 1)][chckIndx(0, 0, (childBlocks_520094902[0][chckIndx(0, 0, (childBlocks_520094902[0]).length - 1)]).length - 1)]).length))) {
      F.line = 230;
      F.filename = "nodetree.nim";
      (Temporary12 = HEX5BHEX5D_520094717(result_520094593, 1), Temporary12)[0][Temporary12[1]].push.apply(Temporary12[0][Temporary12[1]], childBlocks_520094902[0][chckIndx(0, 0, (childBlocks_520094902[0]).length - 1)][chckIndx(0, 0, (childBlocks_520094902[0][chckIndx(0, 0, (childBlocks_520094902[0]).length - 1)]).length - 1)]);;
      F.line = 231;
      delete_520094741(childBlocks_520094902[0], chckIndx(0, 0, (childBlocks_520094902[0]).length - 1), 0);
      }
      
      F.line = 232;
      result_520094593 = nimCopy(null, concat_520094772([nimCopy(null, result_520094593, NTI520094504), concat_520094772(childBlocks_520094902[0])]), NTI520094403);
      if (closeLF_520094604) {
      F.line = 234;
      var Temporary13 = nimCopy(null, close_520094602, NTI33554449);
      result_520094593.push(Temporary13);;
      }
      else {
        F.line = 236;
      (Temporary14 = HEX5BHEX5D_520094717(result_520094593, 1), Temporary14)[0][Temporary14[1]].push.apply(Temporary14[0][Temporary14[1]], close_520094602);;
      }
      
    }
    
  framePtr = F.prev;

  return result_520094593;

}

function len_520095029(t_520095032) {
  var result_520095033 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 1513;
    F.filename = "tables.nim";
    result_520095033 = t_520095032.counter;
  framePtr = F.prev;

  return result_520095033;

}

function attr_520093884(node_520093885) {
  var result_520093886 = ({data: [], counter: 0, first: 0, last: 0});

  var F = {procname: "nodetree.attr", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((node_520093885.attributesRef == null)) {
    F.line = 125;
    F.filename = "nodetree.nim";
    node_520093885.attributesRef = ({data: [], counter: 0, first: 0, last: 0});
    }
    
    F.line = 126;
    result_520093886 = node_520093885.attributesRef;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520093886;

}

function high_1107296394(str_1107296395) {
  var result_1107296396 = 0;

  var F = {procname: "strslice.high", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "strslice.nim";
    result_1107296396 = subInt(str_1107296395.stop, str_1107296395.start);
  framePtr = F.prev;

  return result_1107296396;

}

function len_1107296397(str_1107296398) {
  var result_1107296399 = 0;

  var F = {procname: "strslice.len", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 87;
    F.filename = "strslice.nim";
    result_1107296399 = addInt(high_1107296394(str_1107296398), 1);
  framePtr = F.prev;

  return result_1107296399;

}

function last_1107296391(str_1107296392) {
  var result_1107296393 = 0;

  var F = {procname: "strslice.last", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 80;
    F.filename = "strslice.nim";
    result_1107296393 = str_1107296392.stop;
  framePtr = F.prev;

  return result_1107296393;

}

function first_1107296388(str_1107296389) {
  var result_1107296390 = 0;

  var F = {procname: "strslice.first", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 78;
    F.filename = "strslice.nim";
    result_1107296390 = str_1107296389.start;
  framePtr = F.prev;

  return result_1107296390;

}

function runeLenAt_738197598(s_738197599, i_738197600) {
  var result_738197601 = 0;

  var F = {procname: "unicode.runeLenAt", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    if ((s_738197599[chckIndx(i_738197600, 0, (s_738197599).length - 1)] <= 127)) {
    F.line = 74;
    F.filename = "unicode.nim";
    result_738197601 = 1;
    }
    else {
    if (((s_738197599[chckIndx(i_738197600, 0, (s_738197599).length - 1)] >>> 5) == 6)) {
    F.line = 75;
    result_738197601 = 2;
    }
    else {
    if (((s_738197599[chckIndx(i_738197600, 0, (s_738197599).length - 1)] >>> 4) == 14)) {
    F.line = 76;
    result_738197601 = 3;
    }
    else {
    if (((s_738197599[chckIndx(i_738197600, 0, (s_738197599).length - 1)] >>> 3) == 30)) {
    F.line = 77;
    result_738197601 = 4;
    }
    else {
    if (((s_738197599[chckIndx(i_738197600, 0, (s_738197599).length - 1)] >>> 2) == 62)) {
    F.line = 78;
    result_738197601 = 5;
    }
    else {
    if (((s_738197599[chckIndx(i_738197600, 0, (s_738197599).length - 1)] >>> 1) == 126)) {
    F.line = 79;
    result_738197601 = 6;
    }
    else {
      F.line = 80;
      result_738197601 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_738197601;

}

function runeLenAt_738204696(s_738204697, i_738204698) {
  var result_738204699 = 0;

  var F = {procname: "unicode.runeLenAt", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1161;
    F.filename = "unicode.nim";
    result_738204699 = runeLenAt_738197598((s_738204697.slice(0, (s_738204697).length - 1 + 1)), i_738204698);
  framePtr = F.prev;

  return result_738204699;

}

function str_1107296385(str_1107296386) {
  var result_1107296387 = null;
  var result_1107296387_Idx = 0;

  var F = {procname: "strslice.str", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 76;
    F.filename = "strslice.nim";
    result_1107296387 = str_1107296386.buf[0]; result_1107296387_Idx = str_1107296386.buf[1];
  framePtr = F.prev;

  return [result_1107296387, result_1107296387_Idx];

}

function runeLen_520094255(node_520094256) {
          var Temporary3;

  var result_520094257 = 0;

  var F = {procname: "nodetree.runeLen", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 138;
    F.filename = "nodetree.nim";
    result_520094257 = 0;
    if ((((node_520094256.childrenSeq).length == 0) && (0 < len_1107296397(node_520094256.textSlice)))) {
    F.line = 140;
    var last_520094261 = last_1107296391(node_520094256.textSlice);
    F.line = 141;
    var i_520094262 = first_1107296388(node_520094256.textSlice);
    Label1: {
      F.line = 142;
        Label2: while (true) {
        if (!(i_520094262 <= last_520094261)) break Label2;
          F.line = 143;
          i_520094262 = addInt(i_520094262, runeLenAt_738204696((Temporary3 = str_1107296385(node_520094256.textSlice), Temporary3)[0][Temporary3[1]], chckRange(i_520094262, 0, 2147483647)));
          F.line = 144;
          result_520094257 = addInt(result_520094257, 1);
        }
    };
    }
    else {
      Label4: {
        F.line = 146;
        var child_520094276 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520097263 = 0;
        F.line = 242;
        var L_520097264 = (node_520094256.childrenSeq).length;
        Label5: {
          F.line = 243;
            Label6: while (true) {
            if (!(i_520097263 < L_520097264)) break Label6;
              F.line = 146;
              F.filename = "nodetree.nim";
              child_520094276 = node_520094256.childrenSeq[chckIndx(i_520097263, 0, (node_520094256.childrenSeq).length - 1)];
              F.line = 146;
              result_520094257 = addInt(result_520094257, runeLen_520094255(child_520094276));
              F.line = 245;
              F.filename = "iterators.nim";
              i_520097263 = addInt(i_520097263, 1);
              if (!(((node_520094256.childrenSeq).length == L_520097264))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
  framePtr = F.prev;

  return result_520094257;

}

function parseSaturatedNatural_721420694(s_721420695, b_721420696, b_721420696_Idx) {
      var Temporary1;
          var Temporary4;

  var result_721420697 = 0;

  var F = {procname: "parseutils.parseSaturatedNatural", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 500;
    F.filename = "parseutils.nim";
    var i_721420698 = 0;
    if (((i_721420698 < (s_721420695).length) && (s_721420695[chckIndx(i_721420698, 0, (s_721420695).length - 1)] == 43))) {
    F.line = 501;
    i_721420698 = addInt(i_721420698, 1);
    }
    
      if (!(i_721420698 < (s_721420695).length)) Temporary1 = false; else {        Temporary1 = (ConstSet7[s_721420695[chckIndx(i_721420698, 0, (s_721420695).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 503;
    b_721420696[b_721420696_Idx] = 0;
    Label2: {
      F.line = 504;
        Label3: while (true) {
          if (!(i_721420698 < (s_721420695).length)) Temporary4 = false; else {            Temporary4 = (ConstSet8[s_721420695[chckIndx(i_721420698, 0, (s_721420695).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          F.line = 505;
          var c_721420727 = subInt(s_721420695[chckIndx(i_721420698, 0, (s_721420695).length - 1)], 48);
          if ((b_721420696[b_721420696_Idx] <= divInt(subInt(2147483647, c_721420727), 10))) {
          F.line = 507;
          b_721420696[b_721420696_Idx] = addInt(mulInt(b_721420696[b_721420696_Idx], 10), c_721420727);
          }
          else {
            F.line = 509;
            b_721420696[b_721420696_Idx] = 2147483647;
          }
          
          F.line = 510;
          i_721420698 = addInt(i_721420698, 1);
          Label5: {
            F.line = 511;
              Label6: while (true) {
              if (!((i_721420698 < (s_721420695).length) && (s_721420695[chckIndx(i_721420698, 0, (s_721420695).length - 1)] == 95))) break Label6;
                F.line = 511;
                i_721420698 = addInt(i_721420698, 1);
              }
          };
        }
    };
    F.line = 512;
    result_721420697 = i_721420698;
    }
    
  framePtr = F.prev;

  return result_721420697;

}

function parseSaturatedNatural_721421200(s_721421201, b_721421202, b_721421202_Idx, start_721421203) {
  var result_721421204 = 0;

  var F = {procname: "parseutils.parseSaturatedNatural", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 1013;
    F.filename = "parseutils.nim";
    result_721421204 = parseSaturatedNatural_721420694((s_721421201.slice(start_721421203, (s_721421201).length - 1 + 1)), b_721421202, b_721421202_Idx);
  framePtr = F.prev;

  return result_721421204;

}

function parseStandardFormatSpecifier_704643130(s_704643131, start_704643132, ignoreUnknownSuffix_704643133) {
      var Temporary1;
      var Temporary2;

  var result_704643134 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

  var F = {procname: "strformat.parseStandardFormatSpecifier", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 434;
    F.filename = "strformat.nim";
    result_704643134.fill = 32;
    F.line = 435;
    result_704643134.align = 0;
    F.line = 436;
    result_704643134.sign = 45;
    F.line = 437;
    var i_704643136 = start_704643132;
    if (((addInt(i_704643136, 1) < (s_704643131).length) && (ConstSet3[s_704643131[chckIndx(addInt(i_704643136, 1), 0, (s_704643131).length - 1)]] != undefined))) {
    F.line = 439;
    result_704643134.fill = s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)];
    F.line = 440;
    result_704643134.align = s_704643131[chckIndx(addInt(i_704643136, 1), 0, (s_704643131).length - 1)];
    F.line = 441;
    i_704643136 = addInt(i_704643136, 2);
    }
    else {
    if (((i_704643136 < (s_704643131).length) && (ConstSet4[s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)]] != undefined))) {
    F.line = 443;
    result_704643134.align = s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)];
    F.line = 444;
    i_704643136 = addInt(i_704643136, 1);
    }
    }
    if (((i_704643136 < (s_704643131).length) && (ConstSet5[s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)]] != undefined))) {
    F.line = 447;
    result_704643134.sign = s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)];
    F.line = 448;
    i_704643136 = addInt(i_704643136, 1);
    }
    
    if (((i_704643136 < (s_704643131).length) && (s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)] == 35))) {
    F.line = 451;
    result_704643134.alternateForm = true;
    F.line = 452;
    i_704643136 = addInt(i_704643136, 1);
    }
    
      if (!((addInt(i_704643136, 1) < (s_704643131).length) && (s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet6[s_704643131[chckIndx(addInt(i_704643136, 1), 0, (s_704643131).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 455;
    result_704643134.padWithZero = true;
    F.line = 456;
    i_704643136 = addInt(i_704643136, 1);
    }
    
    F.line = 458;
    var parsedLength_704643178 = parseSaturatedNatural_721421200(s_704643131, result_704643134, "minimumWidth", i_704643136);
    F.line = 459;
    i_704643136 = addInt(i_704643136, parsedLength_704643178);
    if (((i_704643136 < (s_704643131).length) && (s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)] == 46))) {
    F.line = 461;
    i_704643136 = addInt(i_704643136, 1);
    F.line = 462;
    var parsedLengthB_704643189 = parseSaturatedNatural_721421200(s_704643131, result_704643134, "precision", i_704643136);
    F.line = 463;
    i_704643136 = addInt(i_704643136, parsedLengthB_704643189);
    }
    else {
      F.line = 465;
      result_704643134.precision = (-1);
    }
    
      if (!(i_704643136 < (s_704643131).length)) Temporary2 = false; else {        Temporary2 = (ConstSet9[s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)]] != undefined);      }    if (Temporary2) {
    F.line = 468;
    result_704643134.typ = s_704643131[chckIndx(i_704643136, 0, (s_704643131).length - 1)];
    F.line = 469;
    i_704643136 = addInt(i_704643136, 1);
    }
    
    F.line = 470;
    result_704643134.endPosition = i_704643136;
    if ((!((i_704643136 == (s_704643131).length)) && !(ignoreUnknownSuffix_704643133))) {
    F.line = 472;
    raiseException({message: ([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,44,32,99,97,110,110,111,116,32,112,97,114,115,101,58,32] || []).concat(HEX5BHEX5D_788530459(s_704643131, HEX2EHEX2E_939524200(i_704643136, 1)) || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_704643134;

}

function nucruneLen(s_738197532) {
  var result_738197533 = 0;

  var F = {procname: "unicode.runeLen", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 52;
    F.filename = "unicode.nim";
    result_738197533 = 0;
    F.line = 53;
    var i_738197534 = 0;
    Label1: {
      F.line = 54;
        Label2: while (true) {
        if (!(i_738197534 < (s_738197532).length)) break Label2;
          if ((s_738197532[chckIndx(i_738197534, 0, (s_738197532).length - 1)] <= 127)) {
          F.line = 55;
          i_738197534 = addInt(i_738197534, 1);
          }
          else {
          if (((s_738197532[chckIndx(i_738197534, 0, (s_738197532).length - 1)] >>> 5) == 6)) {
          F.line = 56;
          i_738197534 = addInt(i_738197534, 2);
          }
          else {
          if (((s_738197532[chckIndx(i_738197534, 0, (s_738197532).length - 1)] >>> 4) == 14)) {
          F.line = 57;
          i_738197534 = addInt(i_738197534, 3);
          }
          else {
          if (((s_738197532[chckIndx(i_738197534, 0, (s_738197532).length - 1)] >>> 3) == 30)) {
          F.line = 58;
          i_738197534 = addInt(i_738197534, 4);
          }
          else {
          if (((s_738197532[chckIndx(i_738197534, 0, (s_738197532).length - 1)] >>> 2) == 62)) {
          F.line = 59;
          i_738197534 = addInt(i_738197534, 5);
          }
          else {
          if (((s_738197532[chckIndx(i_738197534, 0, (s_738197532).length - 1)] >>> 1) == 126)) {
          F.line = 60;
          i_738197534 = addInt(i_738197534, 6);
          }
          else {
            F.line = 61;
          i_738197534 = addInt(i_738197534, 1);
          }
          }}}}}
          F.line = 62;
          result_738197533 = addInt(result_738197533, 1);
        }
    };
  framePtr = F.prev;

  return result_738197533;

}

function runeLen_738204693(s_738204694) {
  var result_738204695 = 0;

  var F = {procname: "unicode.runeLen", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1153;
    F.filename = "unicode.nim";
    result_738204695 = nucruneLen((s_738204694.slice(0, (s_738204694).length - 1 + 1)));
  framePtr = F.prev;

  return result_738204695;

}

function runeOffset_738198222(s_738198223, pos_738198224, start_738198225) {
  var result_738198226 = 0;

  var F = {procname: "unicode.runeOffset", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 331;
    F.filename = "unicode.nim";
    var i_738198227 = 0;
    F.line = 332;
    var o_738198228 = start_738198225;
    Label1: {
      F.line = 333;
        Label2: while (true) {
        if (!(i_738198227 < pos_738198224)) break Label2;
          F.line = 334;
          o_738198228 = addInt(o_738198228, chckRange(runeLenAt_738197598(s_738198223, o_738198228), 0, 2147483647));
          if (((s_738198223).length <= o_738198228)) {
          F.line = 336;
          result_738198226 = (-1);
          break BeforeRet;
          }
          
          F.line = 337;
          i_738198227 = addInt(i_738198227, 1);
        }
    };
    F.line = 338;
    result_738198226 = o_738198228;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_738198226;

}

function runeOffset_738204868(s_738204869, pos_738204870, start_738204871) {
  var result_738204872 = 0;

  var F = {procname: "unicode.runeOffset", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1196;
    F.filename = "unicode.nim";
    result_738204872 = runeOffset_738198222((s_738204869.slice(0, (s_738204869).length - 1 + 1)), pos_738204870, start_738204871);
  framePtr = F.prev;

  return result_738204872;

}

function validateUtf8_738197840(s_738197841) {
  var result_738197842 = 0;

  var F = {procname: "unicode.validateUtf8", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 184;
    F.filename = "unicode.nim";
    var i_738197843 = 0;
    F.line = 185;
    var L_738197847 = (s_738197841).length;
    Label1: {
      F.line = 186;
        Label2: while (true) {
        if (!(i_738197843 < L_738197847)) break Label2;
          if ((s_738197841[chckIndx(i_738197843, 0, (s_738197841).length - 1)] <= 127)) {
          F.line = 188;
          i_738197843 = addInt(i_738197843, 1);
          }
          else {
          if (((s_738197841[chckIndx(i_738197843, 0, (s_738197841).length - 1)] >>> 5) == 6)) {
          if ((s_738197841[chckIndx(i_738197843, 0, (s_738197841).length - 1)] < 194)) {
          F.line = 190;
          result_738197842 = i_738197843;
          break BeforeRet;
          }
          
          if (((addInt(i_738197843, 1) < L_738197847) && ((s_738197841[chckIndx(addInt(i_738197843, 1), 0, (s_738197841).length - 1)] >>> 6) == 2))) {
          F.line = 191;
          i_738197843 = addInt(i_738197843, 2);
          }
          else {
            F.line = 192;
            result_738197842 = i_738197843;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_738197841[chckIndx(i_738197843, 0, (s_738197841).length - 1)] >>> 4) == 14)) {
          if ((((addInt(i_738197843, 2) < L_738197847) && ((s_738197841[chckIndx(addInt(i_738197843, 1), 0, (s_738197841).length - 1)] >>> 6) == 2)) && ((s_738197841[chckIndx(addInt(i_738197843, 2), 0, (s_738197841).length - 1)] >>> 6) == 2))) {
          F.line = 195;
          i_738197843 = addInt(i_738197843, 3);
          }
          else {
            F.line = 196;
            result_738197842 = i_738197843;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_738197841[chckIndx(i_738197843, 0, (s_738197841).length - 1)] >>> 3) == 30)) {
          if (((((addInt(i_738197843, 3) < L_738197847) && ((s_738197841[chckIndx(addInt(i_738197843, 1), 0, (s_738197841).length - 1)] >>> 6) == 2)) && ((s_738197841[chckIndx(addInt(i_738197843, 2), 0, (s_738197841).length - 1)] >>> 6) == 2)) && ((s_738197841[chckIndx(addInt(i_738197843, 3), 0, (s_738197841).length - 1)] >>> 6) == 2))) {
          F.line = 201;
          i_738197843 = addInt(i_738197843, 4);
          }
          else {
            F.line = 202;
            result_738197842 = i_738197843;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 204;
            result_738197842 = i_738197843;
            break BeforeRet;
          }
          }}}
        }
    };
    F.line = 205;
    result_738197842 = (-1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_738197842;

}

function validateUtf8_738204865(s_738204866) {
  var result_738204867 = 0;

  var F = {procname: "unicode.validateUtf8", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1186;
    F.filename = "unicode.nim";
    result_738204867 = validateUtf8_738197840((s_738204866.slice(0, (s_738204866).length - 1 + 1)));
  framePtr = F.prev;

  return result_738204867;

}

function nsuRepeatChar(c_788530273, count_788530274) {
  var result_788530275 = [];

  var F = {procname: "strutils.repeat", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1328;
    F.filename = "strutils.nim";
    result_788530275 = nimCopy(null, mnewString(count_788530274), NTI33554449);
    Label1: {
      F.line = 1329;
      var i_788530280 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520097272 = 0;
      F.line = 1329;
      F.filename = "strutils.nim";
      colontmp__520097272 = subInt(count_788530274, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520097273 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_520097273 <= colontmp__520097272)) break Label3;
            F.line = 1329;
            F.filename = "strutils.nim";
            i_788530280 = res_520097273;
            F.line = 1329;
            result_788530275[chckIndx(i_788530280, 0, (result_788530275).length - 1)] = c_788530273;
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520097273 = addInt(res_520097273, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_788530275;

}

function alignString_704643092(s_704643093, minimumWidth_704643094, align_704643095, fill_704643096) {
      var Temporary1;

  var result_704643097 = [];

  var F = {procname: "strformat.alignString", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    if ((minimumWidth_704643094 == 0)) {
    F.line = 335;
    F.filename = "strformat.nim";
    result_704643097 = nimCopy(null, s_704643093, NTI33554449);
    }
    else {
      F.line = 337;
      if ((validateUtf8_738204865(s_704643093) == (-1))) {
      Temporary1 = runeLen_738204693(s_704643093);
      }
      else {
      Temporary1 = (s_704643093).length;
      }
      
      var sRuneLen_704643098 = Temporary1;
      F.line = 338;
      var toFill_704643099 = subInt(minimumWidth_704643094, sRuneLen_704643098);
      if ((toFill_704643099 <= 0)) {
      F.line = 340;
      result_704643097 = nimCopy(null, s_704643093, NTI33554449);
      }
      else {
      if (((align_704643095 == 60) || (align_704643095 == 0))) {
      F.line = 342;
      result_704643097 = nimCopy(null, (s_704643093 || []).concat(nsuRepeatChar(fill_704643096, chckRange(toFill_704643099, 0, 2147483647)) || []), NTI33554449);
      }
      else {
      if ((align_704643095 == 94)) {
      F.line = 344;
      var half_704643100 = divInt(toFill_704643099, 2);
      F.line = 345;
      result_704643097 = nimCopy(null, (nsuRepeatChar(fill_704643096, chckRange(half_704643100, 0, 2147483647)) || []).concat(s_704643093 || [],nsuRepeatChar(fill_704643096, chckRange(subInt(toFill_704643099, half_704643100), 0, 2147483647)) || []), NTI33554449);
      }
      else {
        F.line = 347;
        result_704643097 = nimCopy(null, (nsuRepeatChar(fill_704643096, chckRange(toFill_704643099, 0, 2147483647)) || []).concat(s_704643093 || []), NTI33554449);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_704643097;

}

function formatValue_704643243(result_704643244, result_704643244_Idx, value_704643245, specifier_704643246) {
    var Temporary1;

  var F = {procname: "strformat.formatValue", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 557;
    F.filename = "strformat.nim";
    var spec_704643247 = parseStandardFormatSpecifier_704643130(specifier_704643246, 0, false);
    F.line = 558;
    var value_704643248 = nimCopy(null, value_704643245, NTI33554449);
    F.line = 559;
    switch (spec_704643247.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 562;
      raiseException({message: ([105,110,118,97,108,105,100,32,116,121,112,101,32,105,110,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,102,111,114,32,115,116,114,105,110,103,44,32,101,120,112,101,99,116,101,100,32,39,115,39,44,32,98,117,116,32,103,111,116,32] || []).concat([spec_704643247.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_704643247.precision == (-1)))) {
    if ((spec_704643247.precision < runeLen_738204693(value_704643248))) {
    F.line = 567;
    if (value_704643248.length < (Temporary1 = chckRange(runeOffset_738204868(value_704643248, chckRange(spec_704643247.precision, 0, 2147483647), 0), 0, 2147483647), Temporary1)) { for (var i = value_704643248.length; i < Temporary1; ++i) value_704643248.push(0); }
         else {value_704643248.length = Temporary1; };
    }
    
    }
    
    F.line = 568;
    result_704643244[result_704643244_Idx].push.apply(result_704643244[result_704643244_Idx], alignString_704643092(value_704643248, spec_704643247.minimumWidth, spec_704643247.align, spec_704643247.fill));;
  framePtr = F.prev;

  
}

function HEX5BHEX5D_1107296370(s_1107296373, x_1107296374) {
  var result_1107296375 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_1107296377 = ((x_1107296374.a) | 0);
    F.line = 84;
    var L_1107296379 = addInt(subInt(((x_1107296374.b) | 0), a_1107296377), 1);
    F.line = 85;
    result_1107296375 = nimCopy(null, mnewString(chckRange(L_1107296379, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_1107296384 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520097290 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520097290 < L_1107296379)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_1107296384 = i_520097290;
            F.line = 86;
            result_1107296375[chckIndx(i_1107296384, 0, (result_1107296375).length - 1)] = s_1107296373[chckIndx(addInt(i_1107296384, a_1107296377), 0, (s_1107296373).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520097290 = addInt(i_520097290, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1107296375;

}

function HEX2EHEX2E_1107296319(a_1107296322, b_1107296323) {
  var result_1107296326 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_1107296326 = nimCopy(result_1107296326, {a: a_1107296322, b: b_1107296323}, NTI1107296319);
  framePtr = F.prev;

  return result_1107296326;

}

function HEX24_1107296316(str_1107296317) {
  var result_1107296318 = [];

  var F = {procname: "strslice.$", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((str_1107296317.stop < 0)) {
    F.line = 73;
    F.filename = "strslice.nim";
    result_1107296318 = nimCopy(null, [], NTI33554449);
    break BeforeRet;
    }
    
    F.line = 74;
    result_1107296318 = nimCopy(null, HEX5BHEX5D_1107296370(str_1107296317.buf[0][str_1107296317.buf[1]], HEX2EHEX2E_1107296319(str_1107296317.start, str_1107296317.stop)), NTI33554449);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1107296318;

}

function content_520093758(node_520093759) {
  var result_520093760 = [];

  var F = {procname: "nodetree.content", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((node_520093759.childrenSeq).length == 0)) {
    F.line = 77;
    F.filename = "nodetree.nim";
    result_520093760 = nimCopy(null, HEX24_1107296316(node_520093759.textSlice), NTI33554449);
    break BeforeRet;
    }
    else {
      F.line = 79;
      result_520093760 = nimCopy(null, [], NTI33554449);
      Label1: {
        F.line = 80;
        var child_520093786 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520097286 = 0;
        F.line = 242;
        var L_520097287 = (node_520093759.childrenSeq).length;
        Label2: {
          F.line = 243;
            Label3: while (true) {
            if (!(i_520097286 < L_520097287)) break Label3;
              F.line = 80;
              F.filename = "nodetree.nim";
              child_520093786 = node_520093759.childrenSeq[chckIndx(i_520097286, 0, (node_520093759.childrenSeq).length - 1)];
              F.line = 80;
              result_520093760.push.apply(result_520093760, content_520093758(child_520093786));;
              F.line = 245;
              F.filename = "iterators.nim";
              i_520097286 = addInt(i_520097286, 1);
              if (!(((node_520093759.childrenSeq).length == L_520097287))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
  };
  framePtr = F.prev;

  return result_520093760;

}

function nsuFindChar(s_788530836, sub_788530837, start_788530838, last_788530839) {
    var Temporary1;

  var result_788530840 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1945;
    F.filename = "strutils.nim";
    result_788530840 = (-1);
    F.line = 1946;
    if ((last_788530839 < 0)) {
    Temporary1 = (s_788530836).length - 1;
    }
    else {
    Temporary1 = last_788530839;
    }
    
    var last_788530841 = Temporary1;
    Label2: {
      F.line = 1949;
      var iHEX60gensym176_788530855 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520097299 = 0;
      F.line = 1949;
      F.filename = "strutils.nim";
      colontmp__520097299 = start_788530838;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520097300 = colontmp__520097299;
      Label3: {
        F.line = 91;
          Label4: while (true) {
          if (!(res_520097300 <= last_788530841)) break Label4;
            F.line = 1963;
            F.filename = "strutils.nim";
            iHEX60gensym176_788530855 = res_520097300;
            if ((s_788530836[chckIndx(iHEX60gensym176_788530855, 0, (s_788530836).length - 1)] == sub_788530837)) {
            F.line = 1951;
            result_788530840 = iHEX60gensym176_788530855;
            break BeforeRet;
            }
            
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520097300 = addInt(res_520097300, 1);
          }
      };
    };
  };
  framePtr = F.prev;

  return result_788530840;

}

function substr_33558090(s_33558091, first_33558092) {
  var result_33558093 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2665;
    F.filename = "system.nim";
    result_33558093 = nimCopy(null, substr_33558078(s_33558091, first_33558092, (s_33558091).length - 1), NTI33554449);
  framePtr = F.prev;

  return result_33558093;

}

function fill_788530774(a_788530776, value_788530777) {
  var F = {procname: "fill.fill", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 72;
    F.filename = "algorithm.nim";
    var xHEX60gensym172_788530783 = 0;
    Label1: {
      F.line = 98;
        Label2: while (true) {
        if (!(xHEX60gensym172_788530783 <= (a_788530776).length - 1)) break Label2;
          F.line = 98;
          a_788530776[chckIndx(xHEX60gensym172_788530783, 0, (a_788530776).length - 1)] = value_788530777;
          F.line = 75;
          xHEX60gensym172_788530783 = addInt(xHEX60gensym172_788530783, 1);
        }
    };
  framePtr = F.prev;

  
}

function nsuInitSkipTable(a_788530771, sub_788530772) {
  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1878;
    F.filename = "strutils.nim";
    var m_788530773 = (sub_788530772).length;
    F.line = 1879;
    fill_788530774(a_788530771, m_788530773);
    Label1: {
      F.line = 1881;
      var i_788530793 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__520097303 = 0;
      F.line = 1881;
      F.filename = "strutils.nim";
      colontmp__520097303 = subInt(m_788530773, 1);
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520097304 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520097304 < colontmp__520097303)) break Label3;
            F.line = 1881;
            F.filename = "strutils.nim";
            i_788530793 = i_520097304;
            F.line = 1881;
            a_788530771[chckIndx(sub_788530772[chckIndx(i_788530793, 0, (sub_788530772).length - 1)], 0, (a_788530771).length - 1)] = subInt(subInt(m_788530773, 1), i_788530793);
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520097304 = addInt(i_520097304, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function nsuInitNewSkipTable(sub_788530811) {
  var result_788530812 = [new Int32Array(256)];

  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1891;
    F.filename = "strutils.nim";
    nsuInitSkipTable(result_788530812[0], sub_788530811);
  framePtr = F.prev;

  return result_788530812[0];

}

function nsuFindStrA(a_788530814, s_788530815, sub_788530816, start_788530817, last_788530818) {
    var Temporary1;

  var result_788530819 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1905;
    F.filename = "strutils.nim";
    if ((last_788530818 < 0)) {
    Temporary1 = (s_788530815).length - 1;
    }
    else {
    Temporary1 = last_788530818;
    }
    
    var last_788530820 = Temporary1;
    F.line = 1906;
    var subLast_788530821 = subInt((sub_788530816).length, 1);
    if ((subLast_788530821 == (-1))) {
    F.line = 1911;
    result_788530819 = start_788530817;
    break BeforeRet;
    }
    
    F.line = 1915;
    result_788530819 = (-1);
    F.line = 1916;
    var skip_788530822 = start_788530817;
    Label2: {
      F.line = 1918;
        Label3: while (true) {
        if (!(subLast_788530821 <= subInt(last_788530820, skip_788530822))) break Label3;
          F.line = 1919;
          var i_788530823 = subLast_788530821;
          Label4: {
            F.line = 1920;
              Label5: while (true) {
              if (!(s_788530815[chckIndx(addInt(skip_788530822, i_788530823), 0, (s_788530815).length - 1)] == sub_788530816[chckIndx(i_788530823, 0, (sub_788530816).length - 1)])) break Label5;
                if ((i_788530823 == 0)) {
                F.line = 1922;
                result_788530819 = skip_788530822;
                break BeforeRet;
                }
                
                F.line = 1923;
                i_788530823 = subInt(i_788530823, 1);
              }
          };
          F.line = 1924;
          skip_788530822 = addInt(skip_788530822, a_788530814[chckIndx(s_788530815[chckIndx(addInt(skip_788530822, subLast_788530821), 0, (s_788530815).length - 1)], 0, (a_788530814).length - 1)]);
        }
    };
  };
  framePtr = F.prev;

  return result_788530819;

}

function nsuReplaceStr(s_788531024, sub_788531025, by_788531026) {
  var result_788531027 = [];

  var F = {procname: "strutils.replace", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2180;
    F.filename = "strutils.nim";
    result_788531027 = nimCopy(null, [], NTI33554449);
    F.line = 2181;
    var subLen_788531028 = (sub_788531025).length;
    if ((subLen_788531028 == 0)) {
    F.line = 2183;
    result_788531027 = nimCopy(null, s_788531024, NTI33554449);
    }
    else {
    if ((subLen_788531028 == 1)) {
    F.line = 2187;
    var c_788531029 = sub_788531025[chckIndx(0, 0, (sub_788531025).length - 1)];
    F.line = 2188;
    var last_788531030 = (s_788531024).length - 1;
    F.line = 2189;
    var i_788531031 = 0;
    Label1: {
      F.line = 2190;
        Label2: while (true) {
        if (!true) break Label2;
          F.line = 2191;
          var j_788531032 = nsuFindChar(s_788531024, c_788531029, chckRange(i_788531031, 0, 2147483647), last_788531030);
          if ((j_788531032 < 0)) {
          F.line = 2192;
          break Label1;
          }
          
          F.line = 2193;
          result_788531027.push.apply(result_788531027, substr_33558078(s_788531024, i_788531031, subInt(j_788531032, 1)));;
          F.line = 2194;
          result_788531027.push.apply(result_788531027, by_788531026);;
          F.line = 2195;
          i_788531031 = addInt(j_788531032, subLen_788531028);
        }
    };
    F.line = 2197;
    result_788531027.push.apply(result_788531027, substr_33558090(s_788531024, i_788531031));;
    }
    else {
      F.line = 2199;
      var a_788531033 = nsuInitNewSkipTable(sub_788531025);
      F.line = 2200;
      var last_788531034 = (s_788531024).length - 1;
      F.line = 2201;
      var i_788531035 = 0;
      Label3: {
        F.line = 2202;
          Label4: while (true) {
          if (!true) break Label4;
            F.line = 2203;
            var j_788531036 = nsuFindStrA(a_788531033, s_788531024, sub_788531025, chckRange(i_788531035, 0, 2147483647), last_788531034);
            if ((j_788531036 < 0)) {
            F.line = 2204;
            break Label3;
            }
            
            F.line = 2205;
            result_788531027.push.apply(result_788531027, substr_33558078(s_788531024, i_788531035, subInt(j_788531036, 1)));;
            F.line = 2206;
            result_788531027.push.apply(result_788531027, by_788531026);;
            F.line = 2207;
            i_788531035 = addInt(j_788531036, subLen_788531028);
          }
      };
      F.line = 2209;
      result_788531027.push.apply(result_788531027, substr_33558090(s_788531024, i_788531035));;
    }
    }
  framePtr = F.prev;

  return result_788531027;

}

function HEX5BHEX5D_788530431(s_788530434, x_788530435) {
  var result_788530436 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_788530438 = x_788530435.a;
    F.line = 84;
    var L_788530440 = addInt(subInt(x_788530435.b, a_788530438), 1);
    F.line = 85;
    result_788530436 = nimCopy(null, mnewString(chckRange(L_788530440, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_788530445 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520097310 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520097310 < L_788530440)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_788530445 = i_520097310;
            F.line = 86;
            result_788530436[chckIndx(i_788530445, 0, (result_788530436).length - 1)] = s_788530434[chckIndx(addInt(i_788530445, a_788530438), 0, (s_788530434).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520097310 = addInt(i_520097310, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_788530436;

}

function HEX2EHEX2E_754974768(a_754974771, b_754974772) {
  var result_754974773 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_754974773 = nimCopy(result_754974773, {a: a_754974771, b: b_754974772}, NTI687866153);
  framePtr = F.prev;

  return result_754974773;

}

function asSxpr_520094972(node_520094973) {

function renderAttrs_520094975(node_520094976) {
  var result_520094977 = [];

  var F = {procname: "asSxpr.renderAttrs", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 242;
    F.filename = "nodetree.nim";
    F.line = 242;
    var attrStrs_520095034 = newSeq_503317028(chckRange(len_520095029(attr_520093884(node_520094976)), 0, 2147483647));
    Label1: {
      F.line = 244;
      var i_520095052 = (-1);
      Label2: {
        F.line = 243;
        var attr_520095390 = [];
        F.line = 243;
        var value_520095391 = [];
        F.line = 1695;
        F.filename = "tables.nim";
        var colontmp__520097278 = ({data: [], counter: 0, first: 0, last: 0});
        F.line = 243;
        F.filename = "nodetree.nim";
        colontmp__520097278 = nimCopy(colontmp__520097278, attr_520093884(node_520094976), NTI520093711);
        F.line = 1721;
        F.filename = "tables.nim";
        var L_520097280 = len_520095029(colontmp__520097278);
        if ((0 < colontmp__520097278.counter)) {
        F.line = 1303;
        var h_520097281 = colontmp__520097278.first;
        Label3: {
          F.line = 1304;
            Label4: while (true) {
            if (!(0 <= h_520097281)) break Label4;
              F.line = 1305;
              var nxt_520097283 = colontmp__520097278.data[chckIndx(h_520097281, 0, (colontmp__520097278.data).length - 1)].Field1;
              if (isFilled_1023410207(colontmp__520097278.data[chckIndx(h_520097281, 0, (colontmp__520097278.data).length - 1)].Field0)) {
              F.line = 244;
              F.filename = "nodetree.nim";
              attr_520095390 = colontmp__520097278.data[chckIndx(h_520097281, 0, (colontmp__520097278.data).length - 1)].Field2;
              F.line = 244;
              value_520095391 = colontmp__520097278.data[chckIndx(h_520097281, 0, (colontmp__520097278.data).length - 1)].Field3;
              F.line = 244;
              i_520095052 = addInt(i_520095052, 1);
              F.line = 244;
              Label5: {
                F.line = 244;
                var fmtRes_520095405 = [mnewString(0)];
                F.line = 244;
                fmtRes_520095405[0].push.apply(fmtRes_520095405[0], [96,40]);;
                F.line = 244;
                formatValue_704643243(fmtRes_520095405, 0, attr_520095390, []);
                F.line = 244;
                fmtRes_520095405[0].push.apply(fmtRes_520095405[0], [32,34]);;
                F.line = 244;
                formatValue_704643243(fmtRes_520095405, 0, value_520095391, []);
                F.line = 244;
                fmtRes_520095405[0].push.apply(fmtRes_520095405[0], [34,41]);;
              };
              attrStrs_520095034[chckIndx(i_520095052, 0, (attrStrs_520095034).length - 1)] = nimCopy(null, fmtRes_520095405[0], NTI33554449);
              if (!((len_520095029(colontmp__520097278) == L_520097280))) {
              F.line = 1724;
              F.filename = "tables.nim";
              failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/pure/collections/tables.nim(1724, 11) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 1308;
              h_520097281 = nxt_520097283;
            }
        };
        }
        
      };
    };
    result_520094977 = nimCopy(null, nsuJoinSep(attrStrs_520095034, [32]), NTI33554449);
  framePtr = F.prev;

  return result_520094977;

}
      
function opening_520095411(node_520095412) {
          var Temporary1;
          var Temporary2;

        var result_520095413 = [];

        var F = {procname: "asSxpr.opening", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
          F.line = 248;
          F.filename = "nodetree.nim";
          if ((len_520095029(attr_520093884(node_520095412)) == 0)) {
          if ((((node_520095412.childrenSeq).length == 0) && (runeLen_520094255(node_520095412) < 60))) {
          Label3: {
            F.line = 250;
            var fmtRes_520095469 = [mnewString(0)];
            F.line = 250;
            fmtRes_520095469[0].push.apply(fmtRes_520095469[0], [40]);;
            F.line = 250;
            formatValue_704643243(fmtRes_520095469, 0, node_520095412.nameRef[0][node_520095412.nameRef[1]], []);
            F.line = 250;
            fmtRes_520095469[0].push.apply(fmtRes_520095469[0], [32]);;
          };
          Temporary2 = fmtRes_520095469[0];
          }
          else {
            Label4: {
              F.line = 252;
              var fmtRes_520095474 = [mnewString(0)];
              F.line = 252;
              fmtRes_520095474[0].push.apply(fmtRes_520095474[0], [40]);;
              F.line = 252;
              formatValue_704643243(fmtRes_520095474, 0, node_520095412.nameRef[0][node_520095412.nameRef[1]], []);
              F.line = 649;
              F.filename = "strformat.nim";
              addChar(fmtRes_520095474[0], 10);;
            };
          Temporary2 = fmtRes_520095474[0];
          }
          
          Temporary1 = Temporary2;
          }
          else {
            Label5: {
              F.line = 254;
              F.filename = "nodetree.nim";
              var fmtRes_520095479 = [mnewString(0)];
              F.line = 254;
              fmtRes_520095479[0].push.apply(fmtRes_520095479[0], [40]);;
              F.line = 254;
              formatValue_704643243(fmtRes_520095479, 0, node_520095412.nameRef[0][node_520095412.nameRef[1]], []);
              F.line = 254;
              fmtRes_520095479[0].push.apply(fmtRes_520095479[0], [32]);;
              F.line = 254;
              formatValue_704643243(fmtRes_520095479, 0, renderAttrs_520094975(node_520095412), []);
              F.line = 649;
              F.filename = "strformat.nim";
              addChar(fmtRes_520095479[0], 10);;
            };
          Temporary1 = fmtRes_520095479[0];
          }
          
          result_520095413 = nimCopy(null, Temporary1, NTI33554449);
        framePtr = F.prev;

        return result_520095413;

      }
      
function closing_520095480(node_520095481) {
        var result_520095482 = [];

        var F = {procname: "asSxpr.closing", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
          F.line = 256;
          F.filename = "nodetree.nim";
          result_520095482 = nimCopy(null, [41], NTI33554449);
        framePtr = F.prev;

        return result_520095482;

      }
      
function leafdata_520095483(node_520095484) {
                var Temporary3;
                
function esc_520095486(s_520095487) {
                  var result_520095488 = [];

                  var F = {procname: "leafdata.esc", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
                  framePtr = F;
                    F.line = 260;
                    F.filename = "nodetree.nim";
                    result_520095488 = nimCopy(null, nsuReplaceStr(nsuReplaceStr(s_520095487, [92], [92,92]), [34], [92,34]), NTI33554449);
                  framePtr = F.prev;

                  return result_520095488;

                }

        var result_520095485 = [];

        var F = {procname: "asSxpr.leafdata", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
        BeforeRet: {
          if (!(((node_520095484.childrenSeq).length == 0))) {
          F.line = 262;
          F.filename = "nodetree.nim";
          failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim(262, 5) `node.isLeaf` "));
          }
          
          F.line = 263;
          var L_520095497 = runeLen_520094255(node_520095484);
          if ((60 <= L_520095497)) {
          F.line = 265;
          var s_520095498 = content_520093758(node_520095484);
          F.line = 267;
          var lines_520095503 = [];
          F.line = 268;
          var i_520095504 = 0;
          F.line = 269;
          var k_520095505 = 0;
          Label1: {
            F.line = 270;
              Label2: while (true) {
              if (!(0 < L_520095497)) break Label2;
                F.line = 271;
                if ((L_520095497 < 60)) {
                Temporary3 = L_520095497;
                }
                else {
                Temporary3 = 60;
                }
                
                k_520095505 = runeOffset_738204868(s_520095498, chckRange(addInt(((i_520095504) | 0), Temporary3), 0, 2147483647), chckRange(i_520095504, 0, 2147483647));
                F.line = 272;
                lines_520095503.push([34].concat(esc_520095486(HEX5BHEX5D_788530431(s_520095498, HEX2EHEX2E_754974768(i_520095504, subInt(k_520095505, 1)))) || [],[34]));;
                F.line = 273;
                i_520095504 = k_520095505;
                F.line = 274;
                L_520095497 = subInt(L_520095497, 60);
              }
          };
          F.line = 275;
          result_520095485 = nimCopy(null, lines_520095503, NTI520094860);
          break BeforeRet;
          }
          else {
            F.line = 277;
            result_520095485 = nimCopy(null, [[34].concat(esc_520095486(content_520093758(node_520095484)) || [],[34])], NTI520094903);
            break BeforeRet;
          }
          
        };
        framePtr = F.prev;

        return result_520095485;

      }

  var result_520094974 = [];

  var F = {procname: "nodetree.asSxpr", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((node_520094973 == null)) {
    F.line = 280;
    F.filename = "nodetree.nim";
    result_520094974 = nimCopy(null, [110,105,108], NTI33554449);
    break BeforeRet;
    }
    else {
      F.line = 282;
      result_520094974 = nimCopy(null, nsuJoinSep(serialize_520094583(node_520094973, opening_520095411, closing_520095480, leafdata_520095483, 0), [10]), NTI33554449);
      break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_520094974;

}

function HEX24_520095611(node_520095612) {
  var result_520095613 = [];

  var F = {procname: "nodetree.$", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 286;
    F.filename = "nodetree.nim";
    result_520095613 = nimCopy(null, asSxpr_520094972(node_520095612), NTI33554449);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095613;

}

function assignSourcePos_520094321(node_520094322, sourcePos_520094323) {
  var result_520094324 = 0;

  var F = {procname: "nodetree.assignSourcePos", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((0 <= node_520094322.sourcePos) && !((node_520094322.sourcePos == sourcePos_520094323)))) {
    F.line = 157;
    F.filename = "nodetree.nim";
    raiseException({message: [115,111,117,114,99,101,32,112,111,115,105,116,105,111,110,32,109,117,115,116,32,110,111,116,32,98,101,32,114,101,97,115,115,105,103,110,101,100,33], parent: null, m_type: NTI520093704, name: null, trace: [], up: null}, "SourcePosReAssigmentDefect");
    }
    
    F.line = 158;
    node_520094322.sourcePos = sourcePos_520094323;
    F.line = 159;
    var pos_520094326 = sourcePos_520094323;
    if (((node_520094322.childrenSeq).length == 0)) {
    F.line = 161;
    result_520094324 = addInt(pos_520094326, runeLen_520094255(node_520094322));
    break BeforeRet;
    }
    else {
      Label1: {
        F.line = 163;
        var child_520094333 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520097313 = 0;
        F.line = 242;
        var L_520097314 = (node_520094322.childrenSeq).length;
        Label2: {
          F.line = 243;
            Label3: while (true) {
            if (!(i_520097313 < L_520097314)) break Label3;
              F.line = 163;
              F.filename = "nodetree.nim";
              child_520094333 = node_520094322.childrenSeq[chckIndx(i_520097313, 0, (node_520094322.childrenSeq).length - 1)];
              if (!((child_520094333 == null))) {
              F.line = 165;
              pos_520094326 = addInt(pos_520094326, assignSourcePos_520094321(child_520094333, pos_520094326));
              }
              
              F.line = 245;
              F.filename = "iterators.nim";
              i_520097313 = addInt(i_520097313, 1);
              if (!(((node_520094322.childrenSeq).length == L_520097314))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/.choosenim/toolchains/nim-2.0.0/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
    F.line = 166;
    F.filename = "nodetree.nim";
    result_520094324 = pos_520094326;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094324;

}

function init_520097090(node_520097093, name_520097094, data_520097095, attributes_520097096) {
  var result_520097097 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 30;
    F.filename = "nodetree.nim";
    node_520097093.nameRef[0] = [[]]; node_520097093.nameRef[1] = 0;
    F.line = 31;
    node_520097093.nameRef[0][node_520097093.nameRef[1]] = nimCopy(null, name_520097094, NTI33554449);
    if (!((data_520097095 == null))) {
    F.line = 37;
    var nonNilData_520097107 = data_520097095;
    F.line = 38;
    node_520097093.childrenSeq = nimCopy(null, [nonNilData_520097107], NTI520095744);
    }
    
    F.line = 40;
    node_520097093.textSlice = nimCopy(node_520097093.textSlice, EmptyStringSlice_1107296311, NTI1107296259);
    F.line = 44;
    node_520097093.attributesRef = attributes_520097096;
    F.line = 45;
    node_520097093.sourcePos = (-1);
    F.line = 46;
    result_520097097 = node_520097093;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097097;

}
var F = {procname: "module nodetree", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
framePtr = F;
F.line = 291;
F.filename = "nodetree.nim";
var n_520097047 = [init_520097034(new_520094392(), [114,111,111,116], [init_520096966(new_520094392(), [108,101,102,116], [76,69,70,84], toOrderedTable_520095620([{Field0: [105,100], Field1: [48,48,55]}])), init_520096998(new_520094392(), [114,105,103,104,116], [82,73,71,72,84], null)], null)];
F.line = 293;
rawEcho(HEX24_520095611(n_520097047[0]));
F.line = 294;
var _ = assignSourcePos_520094321(n_520097047[0], 0);
F.line = 295;
rawEcho(HEX24_369098760(((n_520097047[0].childrenSeq[chckIndx(0, 0, (n_520097047[0].childrenSeq).length - 1)].sourcePos) | 0)));
F.line = 296;
rawEcho(HEX24_369098760(((n_520097047[0].childrenSeq[chckIndx(1, 0, (n_520097047[0].childrenSeq).length - 1)].sourcePos) | 0)));
F.line = 298;
rawEcho(asSxpr_520094972(init_520096998(new_520094392(), [90,79,77,66,73,69,95,95], [], null)));
F.line = 299;
n_520097047[0].sourcePos = 3;
F.line = 302;
var s_520097062 = [[]];
F.line = 303;
var m_520097073 = [init_520097034(new_520094392(), [], s_520097062[0], null)];
F.line = 304;
rawEcho(nimBoolToStr(((m_520097073[0].childrenSeq).length == 0)));
F.line = 306;
n_520097047[0] = init_520097090(new_520094392(), [114,111,111,116], init_520096998(new_520094392(), [101,108,101,109,101,110,116], [73,110,104,97,108,116], null), null);
F.line = 307;
rawEcho(HEX24_520095611(n_520097047[0]));
framePtr = F.prev;
var F = {procname: "module nodetree", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
framePtr = F;
framePtr = F.prev;
