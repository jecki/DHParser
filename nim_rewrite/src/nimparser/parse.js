/* Generated by the Nim Compiler v2.0.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI520096257 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520096241 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520098331 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520094459 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520096897 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI520096896 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520099792 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217763 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520094509 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520096546 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520097950 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520098434 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520098448 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520098445 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520098442 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520097782 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520097974 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520097788 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520096158 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520096147 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520096136 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520097631 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520097629 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520097644 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520097535 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520097464 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1174406328 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174406287 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405931 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405708 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405907 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405830 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405824 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405819 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI503316800 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093754 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093773 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094487 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094579 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094893 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520096857 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1174405128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520094652 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520094667 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520094662 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1140850958 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217753 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1224736786 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI134217750 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1140850751 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520093801 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093759 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093800 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093799 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093813 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI520093756 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI520093758 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093798 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093765 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520093751 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093774 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555179 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217746 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217747 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI704643141 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1040187471 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1040187477 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093730 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520093809 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093808 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405125 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093753 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093796 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093793 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093790 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093782 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI520093749 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093781 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093771 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554443 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI520093761 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI520093762 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI520093780 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093764 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520093750 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093767 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI520093766 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI520093772 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520093806 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI520093768 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093871 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1224736775 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1224736771 = {size: 0,kind: 42,base: null,node: null,finalizer: null};
var NTI1224736774 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1224736772 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1224736794 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520093769 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI520093770 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI855638019 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1174405141 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1174405138 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405135 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1174405146 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1174405124 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1174405145 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174405144 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1174405126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI184549387 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI1157627908 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1157627907 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1140850938 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1140850693 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1140850691 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217749 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555835 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555181 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555180 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555178 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555178.node = NNI33555178;
NTI33555180.base = NTI33555177;
NTI33555181.base = NTI33555177;
var NNI33555177 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555180, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555181, name: "up", sons: null}]};
NTI33555177.node = NNI33555177;
var NNI33555173 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555173.node = NNI33555173;
NTI33555177.base = NTI33555173;
NTI33555178.base = NTI33555177;
NTI134217741.base = NTI33555178;
NTI134217743.base = NTI134217741;
var NNI33555835 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554450, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554450, name: "Field2", sons: null}]};
NTI33555835.node = NNI33555835;
var NNI134217751 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555178;
var NNI134217749 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555178;
NTI1140850693.base = NTI33554449;
var NNI1140850691 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1140850693, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554438, name: "Field2", sons: null}]};
NTI1140850691.node = NNI1140850691;
var NNI1157627908 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "flags", len: 0, typ: NTI33554450, name: "flags", sons: null}, 
{kind: 1, offset: "dotAll", len: 0, typ: NTI33554466, name: "dotAll", sons: null}, 
{kind: 1, offset: "global", len: 0, typ: NTI33554466, name: "global", sons: null}, 
{kind: 1, offset: "ignoreCase", len: 0, typ: NTI33554466, name: "ignoreCase", sons: null}, 
{kind: 1, offset: "multiline", len: 0, typ: NTI33554466, name: "multiline", sons: null}, 
{kind: 1, offset: "source", len: 0, typ: NTI33554450, name: "source", sons: null}, 
{kind: 1, offset: "sticky", len: 0, typ: NTI33554466, name: "sticky", sons: null}, 
{kind: 1, offset: "unicode", len: 0, typ: NTI33554466, name: "unicode", sons: null}, 
{kind: 1, offset: "lastIndex", len: 0, typ: NTI184549387, name: "lastIndex", sons: null}, 
{kind: 1, offset: "input", len: 0, typ: NTI33554450, name: "input", sons: null}, 
{kind: 1, offset: "lastMatch", len: 0, typ: NTI33554450, name: "lastMatch", sons: null}, 
{kind: 1, offset: "lastParen", len: 0, typ: NTI33554450, name: "lastParen", sons: null}, 
{kind: 1, offset: "leftContext", len: 0, typ: NTI33554450, name: "leftContext", sons: null}, 
{kind: 1, offset: "rightContext", len: 0, typ: NTI33554450, name: "rightContext", sons: null}, 
{kind: 1, offset: "hasIndices", len: 0, typ: NTI33554466, name: "hasIndices", sons: null}]};
NTI1157627908.node = NNI1157627908;
var NNI33555183 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555183.node = NNI33555183;
NTI33555183.base = NTI33555173;
NTI1157627908.base = NTI33555183;
NTI1157627907.base = NTI1157627908;
var NNI1140850938 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1157627907, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1157627907, name: "Field1", sons: null}]};
NTI1140850938.node = NNI1140850938;
NTI1174405144.base = NTI33554449;
NTI1174405124.base = NTI1174405126;
NTI1174405145.base = NTI1174405124;
var NNI1174405141 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI855638019, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554449, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI33554449, name: "Field3", sons: null}]};
NTI1174405141.node = NNI1174405141;
NTI1174405138.base = NTI1174405141;
var NNI1174405135 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1174405138, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI33554435, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI33554435, name: "last", sons: null}]};
NTI1174405135.node = NNI1174405135;
NTI1174405146.base = NTI1174405135;
var NNI1174405126 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nameRef", len: 0, typ: NTI1174405144, name: "nameRef", sons: null}, 
{kind: 1, offset: "childrenSeq", len: 0, typ: NTI1174405145, name: "childrenSeq", sons: null}, 
{kind: 1, offset: "textSlice", len: 0, typ: NTI1140850691, name: "textSlice", sons: null}, 
{kind: 1, offset: "attributesRef", len: 0, typ: NTI1174405146, name: "attributesRef", sons: null}, 
{kind: 1, offset: "sourcePos", len: 0, typ: NTI33554438, name: "sourcePos", sons: null}]};
NTI1174405126.node = NNI1174405126;
NTI1174405126.base = NTI33555173;
var NNI520093769 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI520093769, name: "postfixNotation", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI520093769, name: "memoize", len: 0, sons: null}}};
NTI520093769.node = NNI520093769;
NTI520093770.base = NTI520093769;
NTI1224736775.base = NTI1224736772;
var NNI1224736774 = {kind: 2, len: 9, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "message", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI33554438, name: "pos", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI1224736771, name: "code", sons: null}, 
{kind: 1, offset: "line", len: 0, typ: NTI33554438, name: "line", sons: null}, 
{kind: 1, offset: "column", len: 0, typ: NTI33554438, name: "column", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI33554438, name: "length", sons: null}, 
{kind: 1, offset: "related", len: 0, typ: NTI1224736775, name: "related", sons: null}, 
{kind: 1, offset: "origPos", len: 0, typ: NTI33554438, name: "origPos", sons: null}, 
{kind: 1, offset: "origDoc", len: 0, typ: NTI33554449, name: "origDoc", sons: null}]};
NTI1224736774.node = NNI1224736774;
NTI1224736772.base = NTI1224736774;
NTI1224736794.base = NTI1224736772;
var NNI520093768 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI520093806, name: "Field1", sons: null}]};
NTI520093768.node = NNI520093768;
NTI520093871.base = NTI520093768;
NTI520093780.base = NTI33554449;
var NNI520093761 = {kind: 2, offset: 0, typ: null, name: null, len: 11, sons: {"0": {kind: 1, offset: 0, typ: NTI520093761, name: "isLeaf", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI520093761, name: "isNary", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI520093761, name: "isFlowParser", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI520093761, name: "isLookahead", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI520093761, name: "isContextSensitive", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI520093761, name: "isErrorCatching", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI520093761, name: "isForward", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI520093761, name: "isDisposable", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI520093761, name: "noMemoization", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI520093761, name: "dropContent", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI520093761, name: "traversalTracker", len: 0, sons: null}}};
NTI520093761.node = NNI520093761;
NTI520093762.base = NTI520093761;
NTI520093771.base = NTI520093772;
NTI520093749.base = NTI520093764;
NTI520093781.base = NTI520093749;
NTI1174405125.base = NTI1174405126;
var NNI520093753 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1174405125, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI520093753.node = NNI520093753;
var NNI520093796 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI855638019, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI520093753, name: "Field2", sons: null}]};
NTI520093796.node = NNI520093796;
NTI520093793.base = NTI520093796;
var NNI520093790 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI520093793, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}]};
NTI520093790.node = NNI520093790;
var NNI520093764 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ptype", len: 0, typ: NTI33554449, name: "ptype", sons: null}, 
{kind: 1, offset: "pname", len: 0, typ: NTI33554449, name: "pname", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI520093780, name: "nodeName", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI520093762, name: "flags", sons: null}, 
{kind: 1, offset: "uniqueID", len: 0, typ: NTI33554443, name: "uniqueID", sons: null}, 
{kind: 1, offset: "grammarVar", len: 0, typ: NTI520093771, name: "grammarVar", sons: null}, 
{kind: 1, offset: "symbol", len: 0, typ: NTI520093750, name: "symbol", sons: null}, 
{kind: 1, offset: "subParsers", len: 0, typ: NTI520093781, name: "subParsers", sons: null}, 
{kind: 1, offset: "call", len: 0, typ: NTI520093782, name: "call", sons: null}, 
{kind: 1, offset: "visited", len: 0, typ: NTI520093790, name: "visited", sons: null}]};
NTI520093764.node = NNI520093764;
NTI520093764.base = NTI33555173;
NTI520093750.base = NTI520093764;
NTI520093808.base = NTI1224736772;
NTI520093809.base = NTI520093768;
var NNI520093772 = {kind: 2, len: 12, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI33554449, name: "name", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI520093770, name: "flags", sons: null}, 
{kind: 1, offset: "returnItem", len: 0, typ: NTI520093766, name: "returnItem", sons: null}, 
{kind: 1, offset: "returnSequence", len: 0, typ: NTI520093767, name: "returnSequence", sons: null}, 
{kind: 1, offset: "document", len: 0, typ: NTI1140850691, name: "document", sons: null}, 
{kind: 1, offset: "root", len: 0, typ: NTI520093750, name: "root", sons: null}, 
{kind: 1, offset: "commentRe", len: 0, typ: NTI1140850938, name: "commentRe", sons: null}, 
{kind: 1, offset: "errors", len: 0, typ: NTI520093808, name: "errors", sons: null}, 
{kind: 1, offset: "rollbackStack", len: 0, typ: NTI520093809, name: "rollbackStack", sons: null}, 
{kind: 1, offset: "rollbackLocation", len: 0, typ: NTI33554438, name: "rollbackLocation", sons: null}, 
{kind: 1, offset: "farthestFail", len: 0, typ: NTI33554438, name: "farthestFail", sons: null}, 
{kind: 1, offset: "farthestParser", len: 0, typ: NTI520093750, name: "farthestParser", sons: null}]};
NTI520093772.node = NNI520093772;
NTI520093772.base = NTI33555173;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555178;
var NNI520093730 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554449, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1140850938, name: "Field1", sons: null}]};
NTI520093730.node = NNI520093730;
var NNI1040187477 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1040187471, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI1040187477.node = NNI1040187477;
var NNI704643141 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554435, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI704643141.node = NNI704643141;
var NNI134217747 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217747.node = NNI134217747;
var NNI134217746 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217746.node = NNI134217746;
var NNI33555179 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555179.node = NNI33555179;
NTI33555179.base = NTI33555177;
NTI134217746.base = NTI33555179;
NTI134217747.base = NTI134217746;
var NNI520093756 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI520093756, name: "mkRegex", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI520093756, name: "mkString", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI520093756, name: "mkProc", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI520093756, name: "mkParser", len: 0, sons: null}}};
NTI520093756.node = NNI520093756;
var NNI520093758 = {kind: 3, offset: "kind", len: 4, typ: NTI520093756, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "rxInfo", len: 0, typ: NTI520093730, name: "rxInfo", sons: null}], 
[setConstr(1), {kind: 1, offset: "cmpStr", len: 0, typ: NTI33554449, name: "cmpStr", sons: null}], 
[setConstr(2), {kind: 1, offset: "findProc", len: 0, typ: NTI520093813, name: "findProc", sons: null}], 
[setConstr(3), {kind: 1, offset: "consumeParser", len: 0, typ: NTI520093749, name: "consumeParser", sons: null}]]};
NTI520093758.node = NNI520093758;
NTI520093798.base = NTI520093758;
NTI520093799.base = NTI520093758;
var NNI520093759 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI520093758, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554449, name: "Field1", sons: null}]};
NTI520093759.node = NNI520093759;
NTI520093800.base = NTI520093759;
NTI520093801.base = NTI520093749;
var NNI520093765 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "mandatory", len: 0, typ: NTI33554443, name: "mandatory", sons: null}, 
{kind: 1, offset: "skipList", len: 0, typ: NTI520093798, name: "skipList", sons: null}, 
{kind: 1, offset: "resumeList", len: 0, typ: NTI520093799, name: "resumeList", sons: null}, 
{kind: 1, offset: "errorList", len: 0, typ: NTI520093800, name: "errorList", sons: null}, 
{kind: 1, offset: "referredParsers", len: 0, typ: NTI520093801, name: "referredParsers", sons: null}]};
NTI520093765.node = NNI520093765;
NTI520093765.base = NTI520093764;
NTI520093751.base = NTI520093765;
var NNI520093774 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "origin", len: 0, typ: NTI520093751, name: "origin", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI1174405124, name: "node", sons: null}, 
{kind: 1, offset: "node_orig_len", len: 0, typ: NTI33554438, name: "node_orig_len", sons: null}, 
{kind: 1, offset: "location", len: 0, typ: NTI33554438, name: "location", sons: null}, 
{kind: 1, offset: "error", len: 0, typ: NTI1224736772, name: "error", sons: null}, 
{kind: 1, offset: "first_throw", len: 0, typ: NTI33554466, name: "first_throw", sons: null}]};
NTI520093774.node = NNI520093774;
NTI520093774.base = NTI33555179;
var NNI134217742 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217742.node = NNI134217742;
NTI134217742.base = NTI134217741;
var NNI1140850751 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI1140850751.node = NNI1140850751;
var NNI134217750 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217750.node = NNI134217750;
NTI134217750.base = NTI33555178;
NTI1224736786.base = NTI1224736772;
var NNI134217753 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217753.node = NNI134217753;
NTI134217753.base = NTI33555178;
var NNI1140850958 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI1140850958.node = NNI1140850958;
var NNI520094662 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI520094662.node = NNI520094662;
var NNI520094667 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI520094667.node = NNI520094667;
var NNI520094652 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1174405125, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI520094652.node = NNI520094652;
var NNI1174405128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1174405128.node = NNI1174405128;
NTI1174405128.base = NTI33555178;
var NNI520096857 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI33554449, name: "text", sons: null}, 
{kind: 1, offset: "slice", len: 0, typ: NTI1140850691, name: "slice", sons: null}, 
{kind: 1, offset: "empty", len: 0, typ: NTI33554466, name: "empty", sons: null}]};
NTI520096857.node = NNI520096857;
NTI520096857.base = NTI520093764;
NTI520094893.base = NTI1174405124;
NTI520094579.base = NTI520093749;
NTI520094487.base = NTI520093749;
NTI520093773.base = NTI1224736772;
var NNI520093754 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1174405125, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI520093773, name: "Field1", sons: null}]};
NTI520093754.node = NNI520093754;
NTI503316800.base = NTI33554449;
NTI1174405819.base = NTI33554449;
NTI1174405824.base = NTI33554449;
NTI1174405830.base = NTI33554449;
NTI1174405708.base = NTI33554449;
NTI1174405907.base = NTI1174405708;
NTI1174405931.base = NTI33554449;
NTI1174406287.base = NTI33554449;
NTI1174406328.base = NTI33554449;
var NNI520097464 = {kind: 1, offset: "reInfo", len: 0, typ: NTI520093730, name: "reInfo", sons: null};
NTI520097464.node = NNI520097464;
NTI520097464.base = NTI520093764;
var NNI520097535 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "combined", len: 0, typ: NTI520093730, name: "combined", sons: null}, 
{kind: 1, offset: "whitespace", len: 0, typ: NTI520093730, name: "whitespace", sons: null}, 
{kind: 1, offset: "comment", len: 0, typ: NTI520093730, name: "comment", sons: null}]};
NTI520097535.node = NNI520097535;
NTI520097535.base = NTI520093764;
NTI520097644.base = NTI520093749;
var NNI520097629 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554443, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554443, name: "Field1", sons: null}]};
NTI520097629.node = NNI520097629;
var NNI520097631 = {kind: 1, offset: "repRange", len: 0, typ: NTI520097629, name: "repRange", sons: null};
NTI520097631.node = NNI520097631;
NTI520097631.base = NTI520093764;
NTI520096136.base = NTI520093758;
NTI520096147.base = NTI520093758;
NTI520096158.base = NTI520093759;
NTI520097788.base = NTI520093749;
var NNI520097974 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI520097974.node = NNI520097974;
NTI520097974.base = NTI520093765;
var NNI520097782 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI520097782.node = NNI520097782;
NTI520097782.base = NTI520093764;
var NNI520098448 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI855638019, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554438, name: "Field2", sons: null}]};
NTI520098448.node = NNI520098448;
NTI520098445.base = NTI520098448;
var NNI520098442 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI520098445, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}]};
NTI520098442.node = NNI520098442;
var NNI520098434 = {kind: 1, offset: "recursionCounter", len: 0, typ: NTI520098442, name: "recursionCounter", sons: null};
NTI520098434.node = NNI520098434;
NTI520098434.base = NTI520093764;
NTI520097950.base = NTI520093749;
NTI520096546.base = NTI520093759;
NTI520094509.base = NTI520093749;
var NNI134217763 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217763.node = NNI134217763;
NTI134217763.base = NTI33555178;
var NNI520099792 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI520099792.node = NNI520099792;
NTI520099792.base = NTI520093764;
var NNI520096896 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI33554449, name: "text", sons: null}, 
{kind: 1, offset: "compare", len: 0, typ: NTI520096897, name: "compare", sons: null}]};
NTI520096896.node = NNI520096896;
NTI520096896.base = NTI520093764;
NTI520094459.base = NTI33554449;
var NNI520098331 = {kind: 1, offset: "positive", len: 0, typ: NTI33554466, name: "positive", sons: null};
NTI520098331.node = NNI520098331;
NTI520098331.base = NTI520093764;
var NNI520096241 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1174405124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI520096241.node = NNI520096241;
var NNI520096257 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1224736772, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI520096257.node = NNI520096257;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}

function arrayConstr(len_33557314, value_33557315, typ_33557316) {
        var result = new Array(len_33557314);
    for (var i = 0; i < len_33557314; ++i) result[i] = nimCopy(null, value_33557315, typ_33557316);
    return result;
  

  
}

function mnewString(len_33557003) {
        var result = new Array(len_33557003);
    for (var i = 0; i < len_33557003; i++) {result[i] = 0;}
    return result;
  

  
}

function addInt(a_33557050, b_33557051) {
        var result = a_33557050 + b_33557051;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557324, a_33557325, b_33557326) {
  var result_33557327 = 0;

  BeforeRet: {
    if (((a_33557325 <= i_33557324) && (i_33557324 <= b_33557326))) {
    result_33557327 = i_33557324;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  };

  return result_33557327;

}

function chckIndx(i_33557319, a_33557320, b_33557321) {
  var result_33557322 = 0;

  BeforeRet: {
    if (((a_33557320 <= i_33557319) && (i_33557319 <= b_33557321))) {
    result_33557322 = i_33557319;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557319, a_33557320, b_33557321);
    }
    
  };

  return result_33557322;

}

function cstrToNimstr(c_33556898) {
      var ln = c_33556898.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556898.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556898.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function raiseException(e_33556653, ename_33556654) {
    e_33556653.name = ename_33556654;
    if ((excHandler == 0)) {
    unhandledException(e_33556653);
    }
    
    e_33556653.trace = nimCopy(null, rawWriteStackTrace_33556604(), NTI33554449);
    throw e_33556653;

  
}

function subInt(a_33557054, b_33557055) {
        var result = a_33557054 - b_33557055;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet2 = setConstr(1);

function eqStrings(a_33557041, b_33557042) {
        if (a_33557041 == b_33557042) return true;
    if (a_33557041 === null && b_33557042.length == 0) return true;
    if (b_33557042 === null && a_33557041.length == 0) return true;
    if ((!a_33557041) || (!b_33557042)) return false;
    var alen = a_33557041.length;
    if (alen != b_33557042.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33557041[i] != b_33557042[i]) return false;
    return true;
  

  
}

function makeNimstrLit(c_33556895) {
      var result = [];
  for (var i = 0; i < c_33556895.length; ++i) {
    result[i] = c_33556895.charCodeAt(i);
  }
  return result;
  

  
}
var ConstSet3 = setConstr(7);

function isObj(obj_33557398, subclass_33557399) {
  var result_33557400 = false;

  BeforeRet: {
    var x_33557401 = obj_33557398;
    if ((x_33557401 == subclass_33557399)) {
    result_33557400 = true;
    break BeforeRet;
    }
    
    Label1: {
        Label2: while (true) {
        if (!!((x_33557401 == subclass_33557399))) break Label2;
          if ((x_33557401 == null)) {
          result_33557400 = false;
          break BeforeRet;
          }
          
          x_33557401 = x_33557401.base;
        }
    };
    result_33557400 = true;
    break BeforeRet;
  };

  return result_33557400;

}
var ConstSet4 = setConstr(60, 62, 94);
var ConstSet5 = setConstr(60, 62, 94);
var ConstSet6 = setConstr(45, 43, 32);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([48, 57]);
var ConstSet9 = setConstr([48, 57]);

function divInt(a_33557062, b_33557063) {
        if (b_33557063 == 0) raiseDivByZero();
    if (b_33557063 == -1 && a_33557062 == 2147483647) raiseOverflow();
    return Math.trunc(a_33557062 / b_33557063);
  

  
}

function mulInt(a_33557058, b_33557059) {
        var result = a_33557058 * b_33557059;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet10 = setConstr([65, 90], [97, 122]);

function nimCharToStr(x_33556441) {
  var result_33556442 = [];

    result_33556442 = nimCopy(null, mnewString(1), NTI33554449);
    result_33556442[0] = x_33556441;

  return result_33556442;

}

function addChar(x_33557415, c_33557416) {
    x_33557415.push(c_33557416);

  
}

function nimBoolToStr(x_33556438) {
  var result_33556439 = [];

    if (x_33556438) {
    result_33556439 = nimCopy(null, [116,114,117,101], NTI33554449);
    }
    else {
      result_33556439 = nimCopy(null, [102,97,108,115,101], NTI33554449);
    }
    

  return result_33556439;

}

function nimMax(a_33557108, b_33557109) {
    var Temporary1;

  var result_33557110 = 0;

  BeforeRet: {
    if ((b_33557109 <= a_33557108)) {
    Temporary1 = a_33557108;
    }
    else {
    Temporary1 = b_33557109;
    }
    
    result_33557110 = Temporary1;
    break BeforeRet;
  };

  return result_33557110;

}

function nimMin(a_33557104, b_33557105) {
    var Temporary1;

  var result_33557106 = 0;

  BeforeRet: {
    if ((a_33557104 <= b_33557105)) {
    Temporary1 = a_33557104;
    }
    else {
    Temporary1 = b_33557105;
    }
    
    result_33557106 = Temporary1;
    break BeforeRet;
  };

  return result_33557106;

}
var ConstSet11 = setConstr(3);

function raiseFieldError2(f_33556854, discVal_33556855) {
    raiseException({message: (f_33556854 || []).concat(discVal_33556855 || [],[39] || []), parent: null, m_type: NTI134217750, name: null, trace: [], up: null}, "FieldDefect");

  
}

function reprDiscriminant(e_33557614, typ_33557615) {
    var Temporary1;

  var result_33557616 = [];

  var F = {procname: "system.reprDiscriminant", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/repr_impl.nim", line: 0};
  framePtr = F;
    F.line = 12;
    F.filename = "repr_impl.nim";
    F.line = 12;
    switch (typ_33557615.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557614, typ_33557615);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557614 == 0)));
      break;
    default: 
      Temporary1 = HEX24_369098760(e_33557614);
      break;
    }
    result_33557616 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_33557616;

}

function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: [110,111,32,101,120,99,101,112,116,105,111,110,32,116,111,32,114,101,114,97,105,115,101], parent: null, m_type: NTI134217753, name: null, trace: [], up: null}, "ReraiseDefect");
    }
    else {
      if ((excHandler == 0)) {
      if (isNimException_33556443()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}
var ConstSet12 = setConstr(0);
var ConstSet13 = setConstr(1);
var ConstSet14 = setConstr(1);
var ConstSet15 = setConstr(2);
var ConstSet16 = setConstr(1);

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet17 = setConstr(13, 10);
var ConstSet18 = setConstr(1);

function SetPlus(a_33557025, b_33557026) {
        var result = {};
    for (var elem in a_33557025) { result[elem] = true; }
    for (var elem in b_33557026) { result[elem] = true; }
    return result;
  

  
}
var ConstSet19 = setConstr(9, 7);
var ConstSet20 = setConstr(1);
      var ErrorCatcherListNames_520098301 = [[101,114,114,111,114,115], [115,107,105,112,45,109,97,116,99,104,101,114,115], [114,101,115,117,109,101,45,109,97,116,99,104,101,114,115]];
var ConstSet21 = setConstr(3);
      var NaryParsers_520093961 = [[58,65,108,116,101,114,110,97,116,105,118,101], [58,83,101,114,105,101,115], [58,73,110,116,101,114,108,101,97,118,101]];
var ConstSet22 = setConstr(3);
var ConstSet23 = setConstr(3);
var ConstSet24 = setConstr(3);
var ConstSet25 = setConstr(0);
var ConstSet26 = setConstr(1);
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(2);
var ConstSet29 = setConstr(3);
var ConstSet30 = setConstr([48, 57]);
var ConstSet31 = setConstr([48, 57]);

function divInt64(a_33557084, b_33557085) {
        if (b_33557085 == 0n) raiseDivByZero();
    if (b_33557085 == -1n && a_33557084 == 9223372036854775807n) raiseOverflow();
    return a_33557084 / b_33557085;
  

  
}
var F = {procname: "module macros", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module options", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/options.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module options", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/options.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
framePtr = F;
F.line = 218;
F.filename = "hashes.nim";
var objectID_855638193 = [0];
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet1[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function add_33556373(x_33556374, x_33556374_Idx, y_33556375) {
          if (x_33556374[x_33556374_Idx] === null) { x_33556374[x_33556374_Idx] = []; }
      var off = x_33556374[x_33556374_Idx].length;
      x_33556374[x_33556374_Idx].length += y_33556375.length;
      for (var i = 0; i < y_33556375.length; ++i) {
        x_33556374[x_33556374_Idx][off+i] = y_33556375.charCodeAt(i);
      }
    

  
}

function raiseRangeError() {
    raiseException({message: [118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101], parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");

  
}

function raiseIndexError(i_33556812, a_33556813, b_33556814) {
    var Temporary1;

    if ((b_33556814 < a_33556813)) {
    Temporary1 = [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,44,32,116,104,101,32,99,111,110,116,97,105,110,101,114,32,105,115,32,101,109,112,116,121];
    }
    else {
    Temporary1 = ([105,110,100,101,120,32] || []).concat(HEX24_369098760(i_33556812) || [],[32,110,111,116,32,105,110,32] || [],HEX24_369098760(a_33556813) || [],[32,46,46,32] || [],HEX24_369098760(b_33556814) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554449), parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addChars_301990090(result_301990092, result_301990092_Idx, x_301990093, start_301990094, n_301990095) {
    var Temporary1;

  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 43;
    F.filename = "digitsutils.nim";
    var old_301990096 = (result_301990092[result_301990092_Idx]).length;
    F.line = 44;
    if (result_301990092[result_301990092_Idx].length < (Temporary1 = chckRange(addInt(old_301990096, n_301990095), 0, 2147483647), Temporary1)) { for (var i = result_301990092[result_301990092_Idx].length; i < Temporary1; ++i) result_301990092[result_301990092_Idx].push(0); }
         else {result_301990092[result_301990092_Idx].length = Temporary1; };
    Label2: {
      F.line = 46;
      var iHEX60gensym4_301990110 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_1140851102 = 0;
      Label3: {
        F.line = 120;
          Label4: while (true) {
          if (!(i_1140851102 < n_301990095)) break Label4;
            F.line = 49;
            F.filename = "digitsutils.nim";
            iHEX60gensym4_301990110 = i_1140851102;
            F.line = 49;
            result_301990092[result_301990092_Idx][chckIndx(addInt(old_301990096, iHEX60gensym4_301990110), 0, (result_301990092[result_301990092_Idx]).length - 1)] = x_301990093.charCodeAt(chckIndx(addInt(start_301990094, iHEX60gensym4_301990110), 0, (x_301990093).length - 1));
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_1140851102 = addInt(i_1140851102, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function addChars_301990086(result_301990088, result_301990088_Idx, x_301990089) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 55;
    F.filename = "digitsutils.nim";
    addChars_301990090(result_301990088, result_301990088_Idx, x_301990089, 0, ((x_301990089) == null ? 0 : (x_301990089).length));
  framePtr = F.prev;

  
}

function addInt_301990111(result_301990112, result_301990112_Idx, x_301990113) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 111;
    F.filename = "digitsutils.nim";
    addChars_301990086(result_301990112, result_301990112_Idx, ((x_301990113) + ""));
  framePtr = F.prev;

  
}

function addInt_301990129(result_301990130, result_301990130_Idx, x_301990131) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 115;
    F.filename = "digitsutils.nim";
    addInt_301990111(result_301990130, result_301990130_Idx, BigInt(x_301990131));
  framePtr = F.prev;

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 18;
    F.filename = "dollars.nim";
    addInt_301990129(result_369098762, 0, x_369098761);
  framePtr = F.prev;

  return result_369098762[0];

}

function auxWriteStackTrace_33556508(f_33556509) {
  var result_33556510 = [[]];

    var it_33556518 = f_33556509;
    var i_33556519 = 0;
    var total_33556520 = 0;
    var tempFrames_33556521 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555835);
    Label1: {
        Label2: while (true) {
        if (!(!((it_33556518 == null)) && (i_33556519 <= 63))) break Label2;
          tempFrames_33556521[i_33556519].Field0 = it_33556518.procname;
          tempFrames_33556521[i_33556519].Field1 = it_33556518.line;
          tempFrames_33556521[i_33556519].Field2 = it_33556518.filename;
          i_33556519 += 1;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    Label3: {
        Label4: while (true) {
        if (!!((it_33556518 == null))) break Label4;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    result_33556510[0] = nimCopy(null, [], NTI33554449);
    if (!((total_33556520 == i_33556519))) {
    result_33556510[0].push.apply(result_33556510[0], [40]);;
    result_33556510[0].push.apply(result_33556510[0], HEX24_369098760((total_33556520 - i_33556519)));;
    result_33556510[0].push.apply(result_33556510[0], [32,99,97,108,108,115,32,111,109,105,116,116,101,100,41,32,46,46,46,10]);;
    }
    
    Label5: {
      var j_33556554 = 0;
      var colontmp__1140851094 = 0;
      colontmp__1140851094 = (i_33556519 - 1);
      var res_1140851096 = colontmp__1140851094;
      Label6: {
          Label7: while (true) {
          if (!(0 <= res_1140851096)) break Label7;
            j_33556554 = res_1140851096;
            result_33556510[0].push.apply(result_33556510[0], cstrToNimstr(tempFrames_33556521[j_33556554].Field2));;
            if ((0 < tempFrames_33556521[j_33556554].Field1)) {
            result_33556510[0].push.apply(result_33556510[0], [40]);;
            addInt_301990129(result_33556510, 0, tempFrames_33556521[j_33556554].Field1);
            if (false) {
            result_33556510[0].push.apply(result_33556510[0], [44,32]);;
            addInt_301990129(result_33556510, 0, 0);
            }
            
            result_33556510[0].push.apply(result_33556510[0], [41]);;
            }
            
            result_33556510[0].push.apply(result_33556510[0], [32,97,116,32]);;
            add_33556373(result_33556510, 0, tempFrames_33556521[j_33556554].Field0);
            result_33556510[0].push.apply(result_33556510[0], [10]);;
            res_1140851096 -= 1;
          }
      };
    };

  return result_33556510[0];

}

function rawWriteStackTrace_33556604() {
  var result_33556605 = [];

    if (!((framePtr == null))) {
    result_33556605 = nimCopy(null, ([84,114,97,99,101,98,97,99,107,32,40,109,111,115,116,32,114,101,99,101,110,116,32,99,97,108,108,32,108,97,115,116,41,10] || []).concat(auxWriteStackTrace_33556508(framePtr) || []), NTI33554449);
    }
    else {
      result_33556605 = nimCopy(null, [78,111,32,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,32,97,118,97,105,108,97,98,108,101,10], NTI33554449);
    }
    

  return result_33556605;

}

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 631;
    F.filename = "system.nim";
    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }  framePtr = F.prev;

  return result_33556922;

}

function unhandledException(e_33556649) {
    var buf_33556650 = [[]];
    if (!(((e_33556649.message).length == 0))) {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556650[0].push.apply(buf_33556650[0], e_33556649.message);;
    }
    else {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556650[0].push.apply(buf_33556650[0], [32,91]);;
    add_33556373(buf_33556650, 0, e_33556649.name);
    buf_33556650[0].push.apply(buf_33556650[0], [93,10]);;
    buf_33556650[0].push.apply(buf_33556650[0], rawWriteStackTrace_33556604());;
    var cbuf_33556651 = toJSStr(buf_33556650[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556651);
  }
  else {
    throw cbuf_33556651;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33557048) {
        if (a_33557048 > 2147483647 || a_33557048 < -2147483648) raiseOverflow();
  

  
}

function makeStringSlice_1140850704(str_1140850706) {
  var result_1140850707 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "makeStringSlice.makeStringSlice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 49;
    F.filename = "strslice.nim";
    F.line = 53;
    var strRef_1140850708 = null;
    var strRef_1140850708_Idx = 0;
    F.line = 57;
    strRef_1140850708 = [[]]; strRef_1140850708_Idx = 0;
    F.line = 58;
    strRef_1140850708[strRef_1140850708_Idx] = nimCopy(null, str_1140850706, NTI33554449);
    result_1140850707 = nimCopy(result_1140850707, {Field0: [strRef_1140850708, strRef_1140850708_Idx], Field1: 0, Field2: subInt((((strRef_1140850708[strRef_1140850708_Idx]).length) | 0), 1)}, NTI1140850691);
  framePtr = F.prev;

  return result_1140850707;

}
var F = {procname: "module strslice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
framePtr = F;
F.line = 62;
F.filename = "strslice.nim";
var EmptyStringSlice_1140850747 = makeStringSlice_1140850704([]);
F.line = 216;
var PCREFlag_1140851009 = new RegExp("\\(\\*\\w+\\)", "g");
F.line = 217;
var comment_1140851010 = new RegExp("#[^\\n]*", "g");
F.line = 218;
var whitespace_1140851011 = new RegExp("(?: *\\n *)|(?:^ *)|(?: *$)", "g");
F.line = 219;
var slashU_1140851012 = new RegExp("\\\\U([0-9a-fA-F]+)", "g");
framePtr = F.prev;
var F = {procname: "module strslice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodetree", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodetree", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module error", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module error", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function ure_520093736(pattern_520093738) {
  var result_520093739 = {Field0: null, Field1: null};

  var F = {procname: "ure.ure", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 222;
    F.filename = "strslice.nim";
    var cleanPattern_520093740 = toJSStr(pattern_520093738).replace(PCREFlag_1140851009, "").replace(slashU_1140851012, "\\u{$1}");
    F.line = 223;
    var colontmp__520103915 = new RegExp(cleanPattern_520093740, "uy");
    F.line = 224;
    var colontmp__520103916 = new RegExp(cleanPattern_520093740, "ug");
    F.line = 223;
    result_520093739 = nimCopy(result_520093739, {Field0: colontmp__520103915, Field1: colontmp__520103916}, NTI1140850938);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520093739;

}

function toStringSlice_520093982(str_520093984) {
  var result_520093985 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "toStringSlice.toStringSlice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 66;
    F.filename = "strslice.nim";
    result_520093985 = nimCopy(result_520093985, makeStringSlice_1140850704(str_520093984), NTI1140850691);
  framePtr = F.prev;

  return result_520093985;

}

function init_520093968(node_520093971, name_520093972, data_520093973, attributes_520093974) {
  var result_520093975 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 30;
    F.filename = "nodetree.nim";
    node_520093971.nameRef[0] = [[]]; node_520093971.nameRef[1] = 0;
    F.line = 31;
    node_520093971.nameRef[0][node_520093971.nameRef[1]] = nimCopy(null, name_520093972, NTI33554449);
    F.line = 43;
    node_520093971.textSlice = nimCopy(node_520093971.textSlice, toStringSlice_520093982(data_520093973), NTI1140850691);
    F.line = 44;
    node_520093971.attributesRef = attributes_520093974;
    F.line = 45;
    node_520093971.sourcePos = (-1);
    F.line = 46;
    result_520093975 = node_520093971;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520093975;

}

function new_1174405827() {
  var result_1174405830 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_1174405832 = null;
    F.line = 839;
    r_1174405832 = ({m_type: NTI1174405126, nameRef: [null, 0], childrenSeq: [], textSlice: {Field0: [null, 0], Field1: 0, Field2: 0}, attributesRef: null, sourcePos: 0});
    F.line = 840;
    result_1174405830 = r_1174405832;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1174405830;

}

function cleanUp_520094003(grammar_520094004) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 171;
    F.filename = "parse.nim";
    delete grammar_520094004.flags[1];
    F.line = 172;
    grammar_520094004.errors = nimCopy(null, [], NTI1224736794);
    F.line = 173;
    grammar_520094004.rollbackStack = nimCopy(null, [], NTI520093871);
    F.line = 174;
    grammar_520094004.rollbackLocation = (-2);
    F.line = 175;
    grammar_520094004.farthestFail = (-1);
    F.line = 176;
    grammar_520094004.farthestParser = null;
    F.line = 177;
    grammar_520094004.root = null;
  framePtr = F.prev;

  
}

function init_520094065(grammar_520094066, name_520094067, flags_520094068, document_520094069, returnItem_520094070, returnSequence_520094071) {
  var result_520094072 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 184;
    F.filename = "parse.nim";
    grammar_520094066.name = nimCopy(null, name_520094067, NTI33554449);
    F.line = 185;
    grammar_520094066.flags = nimCopy(grammar_520094066.flags, flags_520094068, NTI520093770);
    F.line = 186;
    grammar_520094066.returnItem = returnItem_520094070;
    F.line = 187;
    grammar_520094066.returnSequence = returnSequence_520094071;
    F.line = 188;
    grammar_520094066.document = nimCopy(grammar_520094066.document, document_520094069, NTI1140850691);
    F.line = 189;
    grammar_520094066.commentRe = nimCopy(grammar_520094066.commentRe, NeverMatchRegex_520093760, NTI1140850938);
    F.line = 190;
    cleanUp_520094003(grammar_520094066);
    F.line = 191;
    result_520094072 = grammar_520094066;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094072;

}

function new_520094139() {
  var result_520094142 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520094144 = null;
    F.line = 839;
    r_520094144 = ({m_type: NTI520093772, name: [], flags: {}, returnItem: null, returnSequence: null, document: {Field0: [null, 0], Field1: 0, Field2: 0}, root: null, commentRe: {Field0: null, Field1: null}, errors: [], rollbackStack: [], rollbackLocation: 0, farthestFail: 0, farthestParser: null});
    F.line = 840;
    result_520094142 = r_520094144;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094142;

}

function returnItemPlaceholder_520093997(parser_520093998, node_520093999) {
  var result_520097833 = null;

  var F = {procname: "parse.returnItemPlaceholder", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 709;
    F.filename = "parse.nim";
    result_520097833 = EmptyNode_520093990;
    F.line = 710;
    raiseException({message: [114,101,116,117,114,110,73,116,101,109,32,99,97,108,108,101,100,32,111,110,32,71,114,97,109,109,97,80,108,97,99,104,111,108,100,101,114], parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  return result_520097833;

}

function returnSeqPlaceholder_520094000(parser_520094001, nodes_520094002) {
  var result_520097838 = null;

  var F = {procname: "parse.returnSeqPlaceholder", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 713;
    F.filename = "parse.nim";
    result_520097838 = EmptyNode_520093990;
    F.line = 714;
    raiseException({message: [114,101,116,117,114,110,73,116,101,109,32,99,97,108,108,101,100,32,111,110,32,71,114,97,109,109,97,80,108,97,99,104,111,108,100,101,114], parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  return result_520097838;

}

function type_520094761(parser_520094762) {
    var Temporary1;

  var result_520094763 = [];

  var F = {procname: "parse.type", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 232;
    F.filename = "parse.nim";
    if ((eqStrings(parser_520094762.ptype, [58,70,111,114,119,97,114,100]) && (0 < (parser_520094762.subParsers).length))) {
    Temporary1 = parser_520094762.subParsers[chckIndx(0, 0, (parser_520094762.subParsers).length - 1)].ptype;
    }
    else {
    Temporary1 = parser_520094762.ptype;
    }
    
    result_520094763 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_520094763;

}

function sysFatal_268435501(message_268435504) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_268435504, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}

function raiseAssert_268435499(msg_268435500) {
  var F = {procname: "assertions.raiseAssert", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 36;
    F.filename = "assertions.nim";
    sysFatal_268435501(msg_268435500);
  framePtr = F.prev;

  
}

function failedAssertImpl_268435541(msg_268435542) {
  var F = {procname: "assertions.failedAssertImpl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 41;
    F.filename = "assertions.nim";
    raiseAssert_268435499(msg_268435542);
  framePtr = F.prev;

  
}

function HEX5BHEX5D_1006634267(s_1006634270, x_1006634271) {
  var result_1006634272 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_1006634274 = x_1006634271.a;
    F.line = 84;
    var L_1006634276 = addInt(subInt(subInt((s_1006634270).length, x_1006634271.b), a_1006634274), 1);
    F.line = 85;
    result_1006634272 = nimCopy(null, mnewString(chckRange(L_1006634276, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_1006634281 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520103918 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520103918 < L_1006634276)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_1006634281 = i_520103918;
            F.line = 86;
            result_1006634272[chckIndx(i_1006634281, 0, (result_1006634272).length - 1)] = s_1006634270[chckIndx(addInt(i_1006634281, a_1006634274), 0, (s_1006634270).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520103918 = addInt(i_520103918, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1006634272;

}

function HEX2EHEX2E_1040187496(a_1040187499, b_1040187500) {
  var result_1040187503 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_1040187503 = nimCopy(result_1040187503, {a: a_1040187499, b: b_1040187500}, NTI1040187477);
  framePtr = F.prev;

  return result_1040187503;

}

function HEX5BHEX5D_1006634239(s_1006634242, x_1006634243) {
  var result_1006634244 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_1006634246 = x_1006634243.a;
    F.line = 84;
    var L_1006634248 = addInt(subInt(x_1006634243.b, a_1006634246), 1);
    F.line = 85;
    result_1006634244 = nimCopy(null, mnewString(chckRange(L_1006634248, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_1006634253 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520103921 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520103921 < L_1006634248)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_1006634253 = i_520103921;
            F.line = 86;
            result_1006634244[chckIndx(i_1006634253, 0, (result_1006634244).length - 1)] = s_1006634242[chckIndx(addInt(i_1006634253, a_1006634246), 0, (s_1006634242).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520103921 = addInt(i_520103921, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1006634244;

}

function HEX2EHEX2E_973078576(a_973078579, b_973078580) {
  var result_973078581 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_973078581 = nimCopy(result_973078581, {a: a_973078579, b: b_973078580}, NTI704643141);
  framePtr = F.prev;

  return result_973078581;

}

function assignSymbol_520094779(parser_520094780, symbol_520094781) {
  var F = {procname: "parse.assignSymbol", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 244;
    F.filename = "parse.nim";
    parser_520094780.symbol = symbol_520094781;
    Label1: {
      F.line = 245;
      var p_520094803 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520103925 = 0;
      F.line = 242;
      var L_520103926 = (parser_520094780.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520103925 < L_520103926)) break Label3;
            F.line = 245;
            F.filename = "parse.nim";
            p_520094803 = parser_520094780.subParsers[chckIndx(i_520103925, 0, (parser_520094780.subParsers).length - 1)];
            if ((p_520094803.symbol == null)) {
            F.line = 246;
            assignSymbol_520094779(p_520094803, symbol_520094781);
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_520103925 = addInt(i_520103925, 1);
            if (!(((parser_520094780.subParsers).length == L_520103926))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  
}

function assignName_520094839(name_520094840, parser_520094841) {
  var result_520094842 = null;

  var F = {procname: "parse.assignName", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (eqStrings(type_520094761(parser_520094841), [58,84,114,97,99,101])) {
    F.line = 250;
    F.filename = "parse.nim";
    var _ = assignName_520094839(name_520094840, parser_520094841.subParsers[chckIndx(0, 0, (parser_520094841.subParsers).length - 1)]);
    F.line = 251;
    result_520094842 = parser_520094841;
    break BeforeRet;
    }
    
    if (!(eqStrings(parser_520094841.pname, []))) {
    F.line = 252;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(252, 3) `parser.pname == \"\"` "));
    }
    
    if (!(!(eqStrings(name_520094840, [])))) {
    F.line = 253;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(253, 3) `name != \"\"` "));
    }
    
    F.line = 254;
    parser_520094841.nodeName[0][parser_520094841.nodeName[1]] = nimCopy(null, name_520094840, NTI33554449);
    if ((name_520094840[chckIndx(0, 0, (name_520094840).length - 1)] == 58)) {
    F.line = 256;
    parser_520094841.pname = nimCopy(null, HEX5BHEX5D_1006634267(name_520094840, HEX2EHEX2E_1040187496(1, 1)), NTI33554449);
    }
    else {
    if (((5 <= (name_520094840).length) && (name_520094840[chckIndx(4, 0, (name_520094840).length - 1)] == 58))) {
    if (eqStrings(HEX5BHEX5D_1006634239(name_520094840, HEX2EHEX2E_973078576(0, 3)), [68,82,79,80])) {
    F.line = 259;
    parser_520094841.flags[9] = true;
    }
    else {
      if (!(eqStrings(HEX5BHEX5D_1006634239(name_520094840, HEX2EHEX2E_973078576(0, 3)), [72,73,68,69]))) {
      F.line = 261;
      failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(261, 7) `name[0 .. 3] == \"HIDE\"` "));
      }
      
    }
    
    F.line = 262;
    parser_520094841.pname = nimCopy(null, HEX5BHEX5D_1006634267(name_520094840, HEX2EHEX2E_1040187496(5, 1)), NTI33554449);
    }
    else {
      if (!(eqStrings(parser_520094841.ptype, [58,87,104,105,116,101,115,112,97,99,101]))) {
      F.line = 268;
      delete parser_520094841.flags[7];
      }
      
      F.line = 269;
      parser_520094841.pname = nimCopy(null, name_520094840, NTI33554449);
    }
    }
    F.line = 270;
    assignSymbol_520094779(parser_520094841, parser_520094841);
    F.line = 271;
    result_520094842 = parser_520094841;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094842;

}

function grammar_520095212(parser_520095213) {
  var result_520095214 = null;

  var F = {procname: "parse.grammar", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 405;
    F.filename = "parse.nim";
    if (!(!((parser_520095213.grammarVar == GrammarPlaceholder_520094178)))) {
    F.line = 405;
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(405, 3) `parser.grammarVar != GrammarPlaceholder` ") || []).concat(HEX24_520095036(parser_520095213) || []));
    }
    
    result_520095214 = parser_520095213.grammarVar;
  framePtr = F.prev;

  return result_520095214;

}

function HEX5BHEX5D_520095822(s_520095824, i_520095825) {
  var result_520095826 = null;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_520095826 = s_520095824[chckIndx(subInt((s_520095824).length, i_520095825), 0, (s_520095824).length - 1)];
  framePtr = F.prev;

  return result_520095826;

}

function pop_520095847(s_520095849, s_520095849_Idx) {
  var result_520095850 = {Field0: 0, Field1: null};

  var F = {procname: "pop.pop", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1696;
    F.filename = "system.nim";
    var L_520095854 = subInt((s_520095849[s_520095849_Idx]).length, 1);
    F.line = 1701;
    result_520095850 = nimCopy(result_520095850, s_520095849[s_520095849_Idx][chckIndx(L_520095854, 0, (s_520095849[s_520095849_Idx]).length - 1)], NTI520093768);
    F.line = 1702;
    if (s_520095849[s_520095849_Idx].length < chckRange(L_520095854, 0, 2147483647)) { for (var i = s_520095849[s_520095849_Idx].length ; i < chckRange(L_520095854, 0, 2147483647) ; ++i) s_520095849[s_520095849_Idx].push({Field0: 0, Field1: null}); }
               else { s_520095849[s_520095849_Idx].length = chckRange(L_520095854, 0, 2147483647); };
  framePtr = F.prev;

  return result_520095850;

}

function rollback_520095814(grammar_520095815, location_520095816) {
  var F = {procname: "parse.rollback", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 586;
    F.filename = "parse.nim";
    var rb_520095817 = {Field0: 0, Field1: null};
    if (((0 < (grammar_520095815.rollbackStack).length) && (location_520095816 <= HEX5BHEX5D_520095822(grammar_520095815.rollbackStack, 1).Field0))) {
    F.line = 588;
    rb_520095817 = nimCopy(rb_520095817, pop_520095847(grammar_520095815, "rollbackStack"), NTI520093768);
    F.line = 589;
    rb_520095817.Field1();
    if ((0 < (grammar_520095815.rollbackStack).length)) {
    F.line = 591;
    grammar_520095815.rollbackLocation = HEX5BHEX5D_520095822(grammar_520095815.rollbackStack, 1).Field0;
    }
    else {
      F.line = 593;
      grammar_520095815.rollbackLocation = (-2);
    }
    
    }
    
  framePtr = F.prev;

  
}

function hasJsBigInt_771751979() {
  var result_771751980 = false;

    result_771751980 = typeof BigInt != 'undefined'

  return result_771751980;

}

function hiXorLoJs_855638101(a_855638102, b_855638103) {
  var result_855638104 = 0n;

  var F = {procname: "hashes.hiXorLoJs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 140;
    F.filename = "hashes.nim";
    var prod_855638105 = (a_855638102 * b_855638103);
    F.line = 141;
    var mask_855638106 = BigInt("0xffffffffffffffff");
    F.line = 142;
    result_855638104 = ((prod_855638105 >> BigInt("64")) ^ (prod_855638105 & mask_855638106));
  framePtr = F.prev;

  return result_855638104;

}

function hashWangYi1_855638209(x_855638211) {
  var result_855638212 = 0;

  var F = {procname: "hashWangYi1.hashWangYi1", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    if (hasJsBigInt_771751979()) {
    F.line = 182;
    F.filename = "hashes.nim";
    F.line = 146;
    var P0HEX60gensym6_855638231 = BigInt("0xa0761d6478bd642f");
    F.line = 147;
    var P1HEX60gensym6_855638232 = BigInt("0xe7037ed1a0b428db");
    F.line = 148;
    var P58HEX60gensym6_855638233 = BigInt("0xeb44accab455d16d");
    F.line = 149;
    var resHEX60gensym6_855638234 = hiXorLoJs_855638101(hiXorLoJs_855638101(P0HEX60gensym6_855638231, (BigInt(x_855638211) ^ P1HEX60gensym6_855638232)), P58HEX60gensym6_855638233);
    result_855638212 = Number((() => { const i = resHEX60gensym6_855638234, b = 32; return BigInt.asIntN(b, i) })());
    }
    else {
      F.line = 184;
      result_855638212 = (Number(BigInt.asIntN(32, x_855638211)) & Number(BigInt.asIntN(32, 4294967295n)));
    }
    
  framePtr = F.prev;

  return result_855638212;

}

function hash_855638201(x_855638203) {
  var result_855638204 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 214;
    F.filename = "hashes.nim";
    result_855638204 = hashWangYi1_855638209(BigInt.asUintN(64, BigInt(x_855638203)));
  framePtr = F.prev;

  return result_855638204;

}

function isFilled_1107296287(hcode_1107296288) {
  var result_1107296289 = false;

  var F = {procname: "tables.isFilled", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 27;
    F.filename = "hashcommon.nim";
    result_1107296289 = !((hcode_1107296288 == 0));
  framePtr = F.prev;

  return result_1107296289;

}

function nextTry_1107296290(h_1107296291, maxHash_1107296292) {
  var result_1107296293 = 0;

  var F = {procname: "tables.nextTry", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "hashcommon.nim";
    result_1107296293 = (addInt(h_1107296291, 1) & maxHash_1107296292);
  framePtr = F.prev;

  return result_1107296293;

}

function rawGet_520095954(t_520095957, key_520095958, hc_520095959, hc_520095959_Idx) {
  var result_520095960 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 59;
    F.filename = "hashcommon.nim";
    hc_520095959[hc_520095959_Idx] = hash_855638201(key_520095958);
    if ((hc_520095959[hc_520095959_Idx] == 0)) {
    F.line = 61;
    hc_520095959[hc_520095959_Idx] = 314159265;
    }
    
    if (((t_520095957.data).length == 0)) {
    F.line = 43;
    result_520095960 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_520096025 = (hc_520095959[hc_520095959_Idx] & (t_520095957.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1107296287(t_520095957.data[chckIndx(h_520096025, 0, (t_520095957.data).length - 1)].Field0)) break Label2;
          if (((t_520095957.data[chckIndx(h_520096025, 0, (t_520095957.data).length - 1)].Field0 == hc_520095959[hc_520095959_Idx]) && (t_520095957.data[chckIndx(h_520096025, 0, (t_520095957.data).length - 1)].Field1 == key_520095958))) {
          F.line = 51;
          result_520095960 = h_520096025;
          break BeforeRet;
          }
          
          F.line = 52;
          h_520096025 = nextTry_1107296290(h_520096025, (t_520095957.data).length - 1);
        }
    };
    F.line = 53;
    result_520095960 = subInt((-1), h_520096025);
  };
  framePtr = F.prev;

  return result_520095960;

}

function hasKey_520095947(t_520095950, key_520095951) {
  var result_520095952 = false;

  var F = {procname: "hasKey.hasKey", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 372;
    F.filename = "tables.nim";
    var hc_520095953 = [0];
    F.line = 373;
    result_520095952 = (0 <= rawGet_520095954(t_520095950, key_520095951, hc_520095953, 0));
  framePtr = F.prev;

  return result_520095952;

}

function contains_520095941(t_520095944, key_520095945) {
  var result_520095946 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 383;
    F.filename = "tables.nim";
    result_520095946 = hasKey_520095947(t_520095944, key_520095945);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095946;

}

function raiseKeyError_520096343(key_520096345) {
  var F = {procname: "raiseKeyError.raiseKeyError", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 235;
    F.filename = "tables.nim";
    raiseException({message: ([107,101,121,32,110,111,116,32,102,111,117,110,100,58,32] || []).concat(HEX24_369098760(key_520096345) || []), parent: null, m_type: NTI134217747, name: null, trace: [], up: null}, "KeyError");
  framePtr = F.prev;

  
}

function HEX5BHEX5D_520096272(t_520096275, key_520096276) {
  var result_520096277 = null;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 243;
    F.filename = "tables.nim";
    var hcHEX60gensym22_520096278 = [0];
    F.line = 244;
    var indexHEX60gensym22_520096285 = rawGet_520095954(t_520096275, key_520096276, hcHEX60gensym22_520096278, 0);
    if ((0 <= indexHEX60gensym22_520096285)) {
    F.line = 245;
    result_520096277 = t_520096275.data[chckIndx(indexHEX60gensym22_520096285, 0, (t_520096275.data).length - 1)].Field2;
    }
    else {
      F.line = 247;
    raiseKeyError_520096343(key_520096276);
    }
    
  framePtr = F.prev;

  return result_520096277;

}

function isNimException_33556443() {
    return lastJSError && lastJSError.m_type;

  
}

function getCurrentException() {
  var result_33556446 = null;

    if (isNimException_33556443()) {
    result_33556446 = lastJSError;
    }
    

  return result_33556446;

}

function raiseDivByZero() {
    raiseException({message: [100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111], parent: null, m_type: NTI134217742, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function parseSaturatedNatural_939524502(s_939524503, b_939524504, b_939524504_Idx) {
      var Temporary1;
          var Temporary4;

  var result_939524505 = 0;

  var F = {procname: "parseutils.parseSaturatedNatural", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 500;
    F.filename = "parseutils.nim";
    var i_939524506 = 0;
    if (((i_939524506 < (s_939524503).length) && (s_939524503[chckIndx(i_939524506, 0, (s_939524503).length - 1)] == 43))) {
    F.line = 501;
    i_939524506 = addInt(i_939524506, 1);
    }
    
      if (!(i_939524506 < (s_939524503).length)) Temporary1 = false; else {        Temporary1 = (ConstSet8[s_939524503[chckIndx(i_939524506, 0, (s_939524503).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 503;
    b_939524504[b_939524504_Idx] = 0;
    Label2: {
      F.line = 504;
        Label3: while (true) {
          if (!(i_939524506 < (s_939524503).length)) Temporary4 = false; else {            Temporary4 = (ConstSet9[s_939524503[chckIndx(i_939524506, 0, (s_939524503).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          F.line = 505;
          var c_939524535 = subInt(s_939524503[chckIndx(i_939524506, 0, (s_939524503).length - 1)], 48);
          if ((b_939524504[b_939524504_Idx] <= divInt(subInt(2147483647, c_939524535), 10))) {
          F.line = 507;
          b_939524504[b_939524504_Idx] = addInt(mulInt(b_939524504[b_939524504_Idx], 10), c_939524535);
          }
          else {
            F.line = 509;
            b_939524504[b_939524504_Idx] = 2147483647;
          }
          
          F.line = 510;
          i_939524506 = addInt(i_939524506, 1);
          Label5: {
            F.line = 511;
              Label6: while (true) {
              if (!((i_939524506 < (s_939524503).length) && (s_939524503[chckIndx(i_939524506, 0, (s_939524503).length - 1)] == 95))) break Label6;
                F.line = 511;
                i_939524506 = addInt(i_939524506, 1);
              }
          };
        }
    };
    F.line = 512;
    result_939524505 = i_939524506;
    }
    
  framePtr = F.prev;

  return result_939524505;

}

function parseSaturatedNatural_939525008(s_939525009, b_939525010, b_939525010_Idx, start_939525011) {
  var result_939525012 = 0;

  var F = {procname: "parseutils.parseSaturatedNatural", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 1013;
    F.filename = "parseutils.nim";
    result_939525012 = parseSaturatedNatural_939524502((s_939525009.slice(start_939525011, (s_939525009).length - 1 + 1)), b_939525010, b_939525010_Idx);
  framePtr = F.prev;

  return result_939525012;

}

function parseStandardFormatSpecifier_922746938(s_922746939, start_922746940, ignoreUnknownSuffix_922746941) {
      var Temporary1;
      var Temporary2;

  var result_922746942 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

  var F = {procname: "strformat.parseStandardFormatSpecifier", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 434;
    F.filename = "strformat.nim";
    result_922746942.fill = 32;
    F.line = 435;
    result_922746942.align = 0;
    F.line = 436;
    result_922746942.sign = 45;
    F.line = 437;
    var i_922746944 = start_922746940;
    if (((addInt(i_922746944, 1) < (s_922746939).length) && (ConstSet4[s_922746939[chckIndx(addInt(i_922746944, 1), 0, (s_922746939).length - 1)]] != undefined))) {
    F.line = 439;
    result_922746942.fill = s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)];
    F.line = 440;
    result_922746942.align = s_922746939[chckIndx(addInt(i_922746944, 1), 0, (s_922746939).length - 1)];
    F.line = 441;
    i_922746944 = addInt(i_922746944, 2);
    }
    else {
    if (((i_922746944 < (s_922746939).length) && (ConstSet5[s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)]] != undefined))) {
    F.line = 443;
    result_922746942.align = s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)];
    F.line = 444;
    i_922746944 = addInt(i_922746944, 1);
    }
    }
    if (((i_922746944 < (s_922746939).length) && (ConstSet6[s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)]] != undefined))) {
    F.line = 447;
    result_922746942.sign = s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)];
    F.line = 448;
    i_922746944 = addInt(i_922746944, 1);
    }
    
    if (((i_922746944 < (s_922746939).length) && (s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)] == 35))) {
    F.line = 451;
    result_922746942.alternateForm = true;
    F.line = 452;
    i_922746944 = addInt(i_922746944, 1);
    }
    
      if (!((addInt(i_922746944, 1) < (s_922746939).length) && (s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet7[s_922746939[chckIndx(addInt(i_922746944, 1), 0, (s_922746939).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 455;
    result_922746942.padWithZero = true;
    F.line = 456;
    i_922746944 = addInt(i_922746944, 1);
    }
    
    F.line = 458;
    var parsedLength_922746986 = parseSaturatedNatural_939525008(s_922746939, result_922746942, "minimumWidth", i_922746944);
    F.line = 459;
    i_922746944 = addInt(i_922746944, parsedLength_922746986);
    if (((i_922746944 < (s_922746939).length) && (s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)] == 46))) {
    F.line = 461;
    i_922746944 = addInt(i_922746944, 1);
    F.line = 462;
    var parsedLengthB_922746997 = parseSaturatedNatural_939525008(s_922746939, result_922746942, "precision", i_922746944);
    F.line = 463;
    i_922746944 = addInt(i_922746944, parsedLengthB_922746997);
    }
    else {
      F.line = 465;
      result_922746942.precision = (-1);
    }
    
      if (!(i_922746944 < (s_922746939).length)) Temporary2 = false; else {        Temporary2 = (ConstSet10[s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)]] != undefined);      }    if (Temporary2) {
    F.line = 468;
    result_922746942.typ = s_922746939[chckIndx(i_922746944, 0, (s_922746939).length - 1)];
    F.line = 469;
    i_922746944 = addInt(i_922746944, 1);
    }
    
    F.line = 470;
    result_922746942.endPosition = i_922746944;
    if ((!((i_922746944 == (s_922746939).length)) && !(ignoreUnknownSuffix_922746941))) {
    F.line = 472;
    raiseException({message: ([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,44,32,99,97,110,110,111,116,32,112,97,114,115,101,58,32] || []).concat(HEX5BHEX5D_1006634267(s_922746939, HEX2EHEX2E_1040187496(i_922746944, 1)) || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_922746942;

}

function mkDigit_922746885(v_922746886, typ_922746887) {
      var Temporary1;

  var result_922746888 = [];

  var F = {procname: "strformat.mkDigit", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    if (!((v_922746886 < 26))) {
    F.line = 324;
    F.filename = "strformat.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim(324, 9) `v < 26` "));
    }
    
    if ((v_922746886 < 10)) {
    F.line = 326;
    result_922746888 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_922746886), 0, 255)), NTI33554449);
    }
    else {
      F.line = 328;
      if ((typ_922746887 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_922746888 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Temporary1, v_922746886), 10), 0, 255)), NTI33554449);
    }
    
  framePtr = F.prev;

  return result_922746888;

}

function nsuRepeatChar(c_1006634081, count_1006634082) {
  var result_1006634083 = [];

  var F = {procname: "strutils.repeat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1328;
    F.filename = "strutils.nim";
    result_1006634083 = nimCopy(null, mnewString(count_1006634082), NTI33554449);
    Label1: {
      F.line = 1329;
      var i_1006634088 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520103950 = 0;
      F.line = 1329;
      F.filename = "strutils.nim";
      colontmp__520103950 = subInt(count_1006634082, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520103951 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_520103951 <= colontmp__520103950)) break Label3;
            F.line = 1329;
            F.filename = "strutils.nim";
            i_1006634088 = res_520103951;
            F.line = 1329;
            result_1006634083[chckIndx(i_1006634088, 0, (result_1006634083).length - 1)] = c_1006634081;
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520103951 = addInt(res_520103951, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1006634083;

}

function formatInt_1224736864(n_1224736866, radix_1224736867, spec_1224736868) {
    var Temporary1;

  var result_1224736869 = [];

  var F = {procname: "formatInt.formatInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 370;
    F.filename = "strformat.nim";
    var n_1224736872 = BigInt(n_1224736866);
    F.line = 371;
    var negative_1224736873 = (n_1224736872 < 0n);
    F.line = 372;
    if (negative_1224736873) {
    Temporary1 = BigInt.asUintN(64, (BigInt.asUintN(64, ~(n_1224736872)) + 1n));
    }
    else {
    Temporary1 = BigInt.asUintN(64, n_1224736872);
    }
    
    var v_1224736874 = Temporary1;
    F.line = 379;
    var xx_1224736875 = [];
    if (spec_1224736868.alternateForm) {
    F.line = 381;
    switch (spec_1224736868.typ) {
    case 88:
      F.line = 382;
      xx_1224736875 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 120:
      F.line = 383;
      xx_1224736875 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 98:
      F.line = 384;
      xx_1224736875 = nimCopy(null, [48,98], NTI33554449);
      break;
    case 111:
      F.line = 385;
      xx_1224736875 = nimCopy(null, [48,111], NTI33554449);
      break;
    default: 
      break;
    }
    }
    
    if ((v_1224736874 == 0n)) {
    F.line = 389;
    result_1224736869 = nimCopy(null, [48], NTI33554449);
    }
    else {
      F.line = 391;
      result_1224736869 = nimCopy(null, [], NTI33554449);
      Label2: {
        F.line = 392;
          Label3: while (true) {
          if (!(0n < v_1224736874)) break Label3;
            F.line = 393;
            var d_1224736876 = (v_1224736874 % BigInt.asUintN(64, BigInt(radix_1224736867)));
            F.line = 394;
            v_1224736874 = BigInt.asUintN(64, (v_1224736874 / BigInt.asUintN(64, BigInt(radix_1224736867))));
            F.line = 395;
            result_1224736869.push.apply(result_1224736869, mkDigit_922746885(chckRange(Number(d_1224736876), (-2147483648), 2147483647), spec_1224736868.typ));;
          }
      };
      Label4: {
        F.line = 396;
        var idx_1224736881 = 0;
        F.line = 117;
        F.filename = "iterators_1.nim";
        var colontmp__520103942 = 0;
        F.line = 396;
        F.filename = "strformat.nim";
        colontmp__520103942 = divInt((result_1224736869).length, 2);
        F.line = 119;
        F.filename = "iterators_1.nim";
        var i_520103943 = 0;
        Label5: {
          F.line = 120;
            Label6: while (true) {
            if (!(i_520103943 < colontmp__520103942)) break Label6;
              F.line = 396;
              F.filename = "strformat.nim";
              idx_1224736881 = i_520103943;
              F.line = 396;
              var Temporary7 = result_1224736869[chckIndx(idx_1224736881, 0, (result_1224736869).length - 1)]; result_1224736869[chckIndx(idx_1224736881, 0, (result_1224736869).length - 1)] = result_1224736869[chckIndx(subInt(subInt((result_1224736869).length, idx_1224736881), 1), 0, (result_1224736869).length - 1)]; result_1224736869[chckIndx(subInt(subInt((result_1224736869).length, idx_1224736881), 1), 0, (result_1224736869).length - 1)] = Temporary7;              F.line = 122;
              F.filename = "iterators_1.nim";
              i_520103943 = addInt(i_520103943, 1);
            }
        };
      };
    }
    
    if (spec_1224736868.padWithZero) {
    F.line = 399;
    F.filename = "strformat.nim";
    var sign_1224736886 = (negative_1224736873 || !((spec_1224736868.sign == 45)));
    F.line = 400;
    var toFill_1224736890 = subInt(subInt(subInt(spec_1224736868.minimumWidth, (result_1224736869).length), (xx_1224736875).length), (sign_1224736886 ? 1 : 0));
    if ((0 < toFill_1224736890)) {
    F.line = 402;
    result_1224736869 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_1224736890, 0, 2147483647)) || []).concat(result_1224736869 || []), NTI33554449);
    }
    
    }
    
    if (negative_1224736873) {
    F.line = 405;
    result_1224736869 = nimCopy(null, ([45] || []).concat(xx_1224736875 || [],result_1224736869 || []), NTI33554449);
    }
    else {
    if (!((spec_1224736868.sign == 45))) {
    F.line = 407;
    result_1224736869 = nimCopy(null, [spec_1224736868.sign].concat(xx_1224736875 || [],result_1224736869 || []), NTI33554449);
    }
    else {
      F.line = 409;
      result_1224736869 = nimCopy(null, (xx_1224736875 || []).concat(result_1224736869 || []), NTI33554449);
    }
    }
    if ((spec_1224736868.align == 60)) {
    Label8: {
      F.line = 412;
      var i_1224736895 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__520103946 = 0;
      F.line = 412;
      F.filename = "strformat.nim";
      colontmp__520103946 = (result_1224736869).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520103947 = colontmp__520103946;
      Label9: {
        F.line = 120;
          Label10: while (true) {
          if (!(i_520103947 < spec_1224736868.minimumWidth)) break Label10;
            F.line = 412;
            F.filename = "strformat.nim";
            i_1224736895 = i_520103947;
            F.line = 412;
            addChar(result_1224736869, spec_1224736868.fill);;
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520103947 = addInt(i_520103947, 1);
          }
      };
    };
    }
    else {
      F.line = 415;
      F.filename = "strformat.nim";
      var toFill_1224736896 = subInt(spec_1224736868.minimumWidth, (result_1224736869).length);
      if ((spec_1224736868.align == 94)) {
      F.line = 417;
      var half_1224736897 = divInt(toFill_1224736896, 2);
      F.line = 418;
      result_1224736869 = nimCopy(null, (nsuRepeatChar(spec_1224736868.fill, chckRange(half_1224736897, 0, 2147483647)) || []).concat(result_1224736869 || [],nsuRepeatChar(spec_1224736868.fill, chckRange(subInt(toFill_1224736896, half_1224736897), 0, 2147483647)) || []), NTI33554449);
      }
      else {
        if ((0 < toFill_1224736896)) {
        F.line = 421;
        result_1224736869 = nimCopy(null, (nsuRepeatChar(spec_1224736868.fill, chckRange(toFill_1224736896, 0, 2147483647)) || []).concat(result_1224736869 || []), NTI33554449);
        }
        
      }
      
    }
    
  framePtr = F.prev;

  return result_1224736869;

}

function formatValue_1224736856(result_1224736858, result_1224736858_Idx, value_1224736859, specifier_1224736860) {
  var F = {procname: "formatValue.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((specifier_1224736860).length == 0)) {
    F.line = 481;
    F.filename = "strformat.nim";
    result_1224736858[result_1224736858_Idx].push.apply(result_1224736858[result_1224736858_Idx], HEX24_369098760(((value_1224736859) | 0)));;
    F.line = 482;
    break BeforeRet;
    }
    
    F.line = 483;
    var spec_1224736861 = parseStandardFormatSpecifier_922746938(specifier_1224736860, 0, false);
    F.line = 484;
    var radix_1224736862 = 10;
    F.line = 485;
    switch (spec_1224736861.typ) {
    case 120:
    case 88:
      F.line = 486;
      radix_1224736862 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      F.line = 488;
      radix_1224736862 = 2;
      break;
    case 111:
      F.line = 489;
      radix_1224736862 = 8;
      break;
    default: 
      F.line = 491;
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_1224736861.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    F.line = 494;
    result_1224736858[result_1224736858_Idx].push.apply(result_1224736858[result_1224736858_Idx], formatInt_1224736864(value_1224736859, radix_1224736862, spec_1224736861));;
  };
  framePtr = F.prev;

  
}

function nucruneLen(s_956301340) {
  var result_956301341 = 0;

  var F = {procname: "unicode.runeLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 52;
    F.filename = "unicode.nim";
    result_956301341 = 0;
    F.line = 53;
    var i_956301342 = 0;
    Label1: {
      F.line = 54;
        Label2: while (true) {
        if (!(i_956301342 < (s_956301340).length)) break Label2;
          if ((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] <= 127)) {
          F.line = 55;
          i_956301342 = addInt(i_956301342, 1);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 5) == 6)) {
          F.line = 56;
          i_956301342 = addInt(i_956301342, 2);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 4) == 14)) {
          F.line = 57;
          i_956301342 = addInt(i_956301342, 3);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 3) == 30)) {
          F.line = 58;
          i_956301342 = addInt(i_956301342, 4);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 2) == 62)) {
          F.line = 59;
          i_956301342 = addInt(i_956301342, 5);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 1) == 126)) {
          F.line = 60;
          i_956301342 = addInt(i_956301342, 6);
          }
          else {
            F.line = 61;
          i_956301342 = addInt(i_956301342, 1);
          }
          }}}}}
          F.line = 62;
          result_956301341 = addInt(result_956301341, 1);
        }
    };
  framePtr = F.prev;

  return result_956301341;

}

function runeLen_956308501(s_956308502) {
  var result_956308503 = 0;

  var F = {procname: "unicode.runeLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1153;
    F.filename = "unicode.nim";
    result_956308503 = nucruneLen((s_956308502.slice(0, (s_956308502).length - 1 + 1)));
  framePtr = F.prev;

  return result_956308503;

}

function runeLenAt_956301406(s_956301407, i_956301408) {
  var result_956301409 = 0;

  var F = {procname: "unicode.runeLenAt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    if ((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] <= 127)) {
    F.line = 74;
    F.filename = "unicode.nim";
    result_956301409 = 1;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 5) == 6)) {
    F.line = 75;
    result_956301409 = 2;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 4) == 14)) {
    F.line = 76;
    result_956301409 = 3;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 3) == 30)) {
    F.line = 77;
    result_956301409 = 4;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 2) == 62)) {
    F.line = 78;
    result_956301409 = 5;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 1) == 126)) {
    F.line = 79;
    result_956301409 = 6;
    }
    else {
      F.line = 80;
      result_956301409 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_956301409;

}

function runeOffset_956302030(s_956302031, pos_956302032, start_956302033) {
  var result_956302034 = 0;

  var F = {procname: "unicode.runeOffset", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 331;
    F.filename = "unicode.nim";
    var i_956302035 = 0;
    F.line = 332;
    var o_956302036 = start_956302033;
    Label1: {
      F.line = 333;
        Label2: while (true) {
        if (!(i_956302035 < pos_956302032)) break Label2;
          F.line = 334;
          o_956302036 = addInt(o_956302036, chckRange(runeLenAt_956301406(s_956302031, o_956302036), 0, 2147483647));
          if (((s_956302031).length <= o_956302036)) {
          F.line = 336;
          result_956302034 = (-1);
          break BeforeRet;
          }
          
          F.line = 337;
          i_956302035 = addInt(i_956302035, 1);
        }
    };
    F.line = 338;
    result_956302034 = o_956302036;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_956302034;

}

function runeOffset_956308676(s_956308677, pos_956308678, start_956308679) {
  var result_956308680 = 0;

  var F = {procname: "unicode.runeOffset", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1196;
    F.filename = "unicode.nim";
    result_956308680 = runeOffset_956302030((s_956308677.slice(0, (s_956308677).length - 1 + 1)), pos_956308678, start_956308679);
  framePtr = F.prev;

  return result_956308680;

}

function validateUtf8_956301648(s_956301649) {
  var result_956301650 = 0;

  var F = {procname: "unicode.validateUtf8", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 184;
    F.filename = "unicode.nim";
    var i_956301651 = 0;
    F.line = 185;
    var L_956301655 = (s_956301649).length;
    Label1: {
      F.line = 186;
        Label2: while (true) {
        if (!(i_956301651 < L_956301655)) break Label2;
          if ((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] <= 127)) {
          F.line = 188;
          i_956301651 = addInt(i_956301651, 1);
          }
          else {
          if (((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] >>> 5) == 6)) {
          if ((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] < 194)) {
          F.line = 190;
          result_956301650 = i_956301651;
          break BeforeRet;
          }
          
          if (((addInt(i_956301651, 1) < L_956301655) && ((s_956301649[chckIndx(addInt(i_956301651, 1), 0, (s_956301649).length - 1)] >>> 6) == 2))) {
          F.line = 191;
          i_956301651 = addInt(i_956301651, 2);
          }
          else {
            F.line = 192;
            result_956301650 = i_956301651;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] >>> 4) == 14)) {
          if ((((addInt(i_956301651, 2) < L_956301655) && ((s_956301649[chckIndx(addInt(i_956301651, 1), 0, (s_956301649).length - 1)] >>> 6) == 2)) && ((s_956301649[chckIndx(addInt(i_956301651, 2), 0, (s_956301649).length - 1)] >>> 6) == 2))) {
          F.line = 195;
          i_956301651 = addInt(i_956301651, 3);
          }
          else {
            F.line = 196;
            result_956301650 = i_956301651;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] >>> 3) == 30)) {
          if (((((addInt(i_956301651, 3) < L_956301655) && ((s_956301649[chckIndx(addInt(i_956301651, 1), 0, (s_956301649).length - 1)] >>> 6) == 2)) && ((s_956301649[chckIndx(addInt(i_956301651, 2), 0, (s_956301649).length - 1)] >>> 6) == 2)) && ((s_956301649[chckIndx(addInt(i_956301651, 3), 0, (s_956301649).length - 1)] >>> 6) == 2))) {
          F.line = 201;
          i_956301651 = addInt(i_956301651, 4);
          }
          else {
            F.line = 202;
            result_956301650 = i_956301651;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 204;
            result_956301650 = i_956301651;
            break BeforeRet;
          }
          }}}
        }
    };
    F.line = 205;
    result_956301650 = (-1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_956301650;

}

function validateUtf8_956308673(s_956308674) {
  var result_956308675 = 0;

  var F = {procname: "unicode.validateUtf8", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1186;
    F.filename = "unicode.nim";
    result_956308675 = validateUtf8_956301648((s_956308674.slice(0, (s_956308674).length - 1 + 1)));
  framePtr = F.prev;

  return result_956308675;

}

function alignString_922746900(s_922746901, minimumWidth_922746902, align_922746903, fill_922746904) {
      var Temporary1;

  var result_922746905 = [];

  var F = {procname: "strformat.alignString", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    if ((minimumWidth_922746902 == 0)) {
    F.line = 335;
    F.filename = "strformat.nim";
    result_922746905 = nimCopy(null, s_922746901, NTI33554449);
    }
    else {
      F.line = 337;
      if ((validateUtf8_956308673(s_922746901) == (-1))) {
      Temporary1 = runeLen_956308501(s_922746901);
      }
      else {
      Temporary1 = (s_922746901).length;
      }
      
      var sRuneLen_922746906 = Temporary1;
      F.line = 338;
      var toFill_922746907 = subInt(minimumWidth_922746902, sRuneLen_922746906);
      if ((toFill_922746907 <= 0)) {
      F.line = 340;
      result_922746905 = nimCopy(null, s_922746901, NTI33554449);
      }
      else {
      if (((align_922746903 == 60) || (align_922746903 == 0))) {
      F.line = 342;
      result_922746905 = nimCopy(null, (s_922746901 || []).concat(nsuRepeatChar(fill_922746904, chckRange(toFill_922746907, 0, 2147483647)) || []), NTI33554449);
      }
      else {
      if ((align_922746903 == 94)) {
      F.line = 344;
      var half_922746908 = divInt(toFill_922746907, 2);
      F.line = 345;
      result_922746905 = nimCopy(null, (nsuRepeatChar(fill_922746904, chckRange(half_922746908, 0, 2147483647)) || []).concat(s_922746901 || [],nsuRepeatChar(fill_922746904, chckRange(subInt(toFill_922746907, half_922746908), 0, 2147483647)) || []), NTI33554449);
      }
      else {
        F.line = 347;
        result_922746905 = nimCopy(null, (nsuRepeatChar(fill_922746904, chckRange(toFill_922746907, 0, 2147483647)) || []).concat(s_922746901 || []), NTI33554449);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_922746905;

}

function formatValue_922747051(result_922747052, result_922747052_Idx, value_922747053, specifier_922747054) {
    var Temporary1;

  var F = {procname: "strformat.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 557;
    F.filename = "strformat.nim";
    var spec_922747055 = parseStandardFormatSpecifier_922746938(specifier_922747054, 0, false);
    F.line = 558;
    var value_922747056 = nimCopy(null, value_922747053, NTI33554449);
    F.line = 559;
    switch (spec_922747055.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 562;
      raiseException({message: ([105,110,118,97,108,105,100,32,116,121,112,101,32,105,110,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,102,111,114,32,115,116,114,105,110,103,44,32,101,120,112,101,99,116,101,100,32,39,115,39,44,32,98,117,116,32,103,111,116,32] || []).concat([spec_922747055.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_922747055.precision == (-1)))) {
    if ((spec_922747055.precision < runeLen_956308501(value_922747056))) {
    F.line = 567;
    if (value_922747056.length < (Temporary1 = chckRange(runeOffset_956308676(value_922747056, chckRange(spec_922747055.precision, 0, 2147483647), 0), 0, 2147483647), Temporary1)) { for (var i = value_922747056.length; i < Temporary1; ++i) value_922747056.push(0); }
         else {value_922747056.length = Temporary1; };
    }
    
    }
    
    F.line = 568;
    result_922747052[result_922747052_Idx].push.apply(result_922747052[result_922747052_Idx], alignString_922746900(value_922747056, spec_922747055.minimumWidth, spec_922747055.align, spec_922747055.fill));;
  framePtr = F.prev;

  
}

function addInt_301990080(result_301990081, result_301990081_Idx, x_301990082) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 89;
    F.filename = "digitsutils.nim";
    addChars_301990086(result_301990081, result_301990081_Idx, ((x_301990082) + ""));
  framePtr = F.prev;

  
}

function HEX24_369098766(x_369098767) {
  var result_369098768 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 26;
    F.filename = "dollars.nim";
    addInt_301990080(result_369098768, 0, x_369098767);
  framePtr = F.prev;

  return result_369098768[0];

}

function formatInt_1224736927(n_1224736929, radix_1224736930, spec_1224736931) {
  var result_1224736932 = [];

  var F = {procname: "formatInt.formatInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 367;
    F.filename = "strformat.nim";
    var v_1224736935 = BigInt(n_1224736929);
    F.line = 368;
    var negative_1224736936 = false;
    F.line = 379;
    var xx_1224736937 = [];
    if (spec_1224736931.alternateForm) {
    F.line = 381;
    switch (spec_1224736931.typ) {
    case 88:
      F.line = 382;
      xx_1224736937 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 120:
      F.line = 383;
      xx_1224736937 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 98:
      F.line = 384;
      xx_1224736937 = nimCopy(null, [48,98], NTI33554449);
      break;
    case 111:
      F.line = 385;
      xx_1224736937 = nimCopy(null, [48,111], NTI33554449);
      break;
    default: 
      break;
    }
    }
    
    if ((v_1224736935 == 0n)) {
    F.line = 389;
    result_1224736932 = nimCopy(null, [48], NTI33554449);
    }
    else {
      F.line = 391;
      result_1224736932 = nimCopy(null, [], NTI33554449);
      Label1: {
        F.line = 392;
          Label2: while (true) {
          if (!(0n < v_1224736935)) break Label2;
            F.line = 393;
            var d_1224736938 = (v_1224736935 % BigInt.asUintN(64, BigInt(radix_1224736930)));
            F.line = 394;
            v_1224736935 = BigInt.asUintN(64, (v_1224736935 / BigInt.asUintN(64, BigInt(radix_1224736930))));
            F.line = 395;
            result_1224736932.push.apply(result_1224736932, mkDigit_922746885(chckRange(Number(d_1224736938), (-2147483648), 2147483647), spec_1224736931.typ));;
          }
      };
      Label3: {
        F.line = 396;
        var idx_1224736943 = 0;
        F.line = 117;
        F.filename = "iterators_1.nim";
        var colontmp__520103961 = 0;
        F.line = 396;
        F.filename = "strformat.nim";
        colontmp__520103961 = divInt((result_1224736932).length, 2);
        F.line = 119;
        F.filename = "iterators_1.nim";
        var i_520103962 = 0;
        Label4: {
          F.line = 120;
            Label5: while (true) {
            if (!(i_520103962 < colontmp__520103961)) break Label5;
              F.line = 396;
              F.filename = "strformat.nim";
              idx_1224736943 = i_520103962;
              F.line = 396;
              var Temporary6 = result_1224736932[chckIndx(idx_1224736943, 0, (result_1224736932).length - 1)]; result_1224736932[chckIndx(idx_1224736943, 0, (result_1224736932).length - 1)] = result_1224736932[chckIndx(subInt(subInt((result_1224736932).length, idx_1224736943), 1), 0, (result_1224736932).length - 1)]; result_1224736932[chckIndx(subInt(subInt((result_1224736932).length, idx_1224736943), 1), 0, (result_1224736932).length - 1)] = Temporary6;              F.line = 122;
              F.filename = "iterators_1.nim";
              i_520103962 = addInt(i_520103962, 1);
            }
        };
      };
    }
    
    if (spec_1224736931.padWithZero) {
    F.line = 399;
    F.filename = "strformat.nim";
    var sign_1224736948 = (negative_1224736936 || !((spec_1224736931.sign == 45)));
    F.line = 400;
    var toFill_1224736952 = subInt(subInt(subInt(spec_1224736931.minimumWidth, (result_1224736932).length), (xx_1224736937).length), (sign_1224736948 ? 1 : 0));
    if ((0 < toFill_1224736952)) {
    F.line = 402;
    result_1224736932 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_1224736952, 0, 2147483647)) || []).concat(result_1224736932 || []), NTI33554449);
    }
    
    }
    
    if (negative_1224736936) {
    F.line = 405;
    result_1224736932 = nimCopy(null, ([45] || []).concat(xx_1224736937 || [],result_1224736932 || []), NTI33554449);
    }
    else {
    if (!((spec_1224736931.sign == 45))) {
    F.line = 407;
    result_1224736932 = nimCopy(null, [spec_1224736931.sign].concat(xx_1224736937 || [],result_1224736932 || []), NTI33554449);
    }
    else {
      F.line = 409;
      result_1224736932 = nimCopy(null, (xx_1224736937 || []).concat(result_1224736932 || []), NTI33554449);
    }
    }
    if ((spec_1224736931.align == 60)) {
    Label7: {
      F.line = 412;
      var i_1224736957 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__520103965 = 0;
      F.line = 412;
      F.filename = "strformat.nim";
      colontmp__520103965 = (result_1224736932).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520103966 = colontmp__520103965;
      Label8: {
        F.line = 120;
          Label9: while (true) {
          if (!(i_520103966 < spec_1224736931.minimumWidth)) break Label9;
            F.line = 412;
            F.filename = "strformat.nim";
            i_1224736957 = i_520103966;
            F.line = 412;
            addChar(result_1224736932, spec_1224736931.fill);;
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520103966 = addInt(i_520103966, 1);
          }
      };
    };
    }
    else {
      F.line = 415;
      F.filename = "strformat.nim";
      var toFill_1224736958 = subInt(spec_1224736931.minimumWidth, (result_1224736932).length);
      if ((spec_1224736931.align == 94)) {
      F.line = 417;
      var half_1224736959 = divInt(toFill_1224736958, 2);
      F.line = 418;
      result_1224736932 = nimCopy(null, (nsuRepeatChar(spec_1224736931.fill, chckRange(half_1224736959, 0, 2147483647)) || []).concat(result_1224736932 || [],nsuRepeatChar(spec_1224736931.fill, chckRange(subInt(toFill_1224736958, half_1224736959), 0, 2147483647)) || []), NTI33554449);
      }
      else {
        if ((0 < toFill_1224736958)) {
        F.line = 421;
        result_1224736932 = nimCopy(null, (nsuRepeatChar(spec_1224736931.fill, chckRange(toFill_1224736958, 0, 2147483647)) || []).concat(result_1224736932 || []), NTI33554449);
        }
        
      }
      
    }
    
  framePtr = F.prev;

  return result_1224736932;

}

function formatValue_1224736919(result_1224736921, result_1224736921_Idx, value_1224736922, specifier_1224736923) {
  var F = {procname: "formatValue.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((specifier_1224736923).length == 0)) {
    F.line = 481;
    F.filename = "strformat.nim";
    result_1224736921[result_1224736921_Idx].push.apply(result_1224736921[result_1224736921_Idx], HEX24_369098766(BigInt(value_1224736922)));;
    F.line = 482;
    break BeforeRet;
    }
    
    F.line = 483;
    var spec_1224736924 = parseStandardFormatSpecifier_922746938(specifier_1224736923, 0, false);
    F.line = 484;
    var radix_1224736925 = 10;
    F.line = 485;
    switch (spec_1224736924.typ) {
    case 120:
    case 88:
      F.line = 486;
      radix_1224736925 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      F.line = 488;
      radix_1224736925 = 2;
      break;
    case 111:
      F.line = 489;
      radix_1224736925 = 8;
      break;
    default: 
      F.line = 491;
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_1224736924.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    F.line = 494;
    result_1224736921[result_1224736921_Idx].push.apply(result_1224736921[result_1224736921_Idx], formatInt_1224736927(value_1224736922, radix_1224736925, spec_1224736924));;
  };
  framePtr = F.prev;

  
}

function HEX24_1224736847(error_1224736848) {
    var Temporary1;

  var result_1224736849 = [];

  var F = {procname: "error.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim", line: 0};
  framePtr = F;
    F.line = 61;
    F.filename = "error.nim";
    F.line = 61;
    var code_1224736850 = error_1224736848.code;
    if ((0 <= error_1224736848.line)) {
    Label2: {
      F.line = 63;
      var fmtRes_1224736855 = [mnewString(0)];
      F.line = 63;
      formatValue_1224736856(fmtRes_1224736855, 0, error_1224736848.line, []);
      F.line = 63;
      fmtRes_1224736855[0].push.apply(fmtRes_1224736855[0], [58]);;
      F.line = 63;
      formatValue_1224736856(fmtRes_1224736855, 0, error_1224736848.column, []);
      F.line = 63;
      fmtRes_1224736855[0].push.apply(fmtRes_1224736855[0], [58]);;
      F.line = 63;
      formatValue_1224736919(fmtRes_1224736855, 0, code_1224736850, []);
      F.line = 63;
      fmtRes_1224736855[0].push.apply(fmtRes_1224736855[0], [58]);;
      F.line = 63;
      formatValue_922747051(fmtRes_1224736855, 0, error_1224736848.message, []);
    };
    Temporary1 = fmtRes_1224736855[0];
    }
    else {
    if ((0 <= error_1224736848.origPos)) {
    Label3: {
      F.line = 65;
      var fmtRes_1224736980 = [mnewString(0)];
      F.line = 65;
      formatValue_1224736856(fmtRes_1224736980, 0, error_1224736848.origPos, []);
      F.line = 65;
      fmtRes_1224736980[0].push.apply(fmtRes_1224736980[0], [58]);;
      F.line = 65;
      formatValue_1224736919(fmtRes_1224736980, 0, code_1224736850, []);
      F.line = 65;
      fmtRes_1224736980[0].push.apply(fmtRes_1224736980[0], [58]);;
      F.line = 65;
      formatValue_922747051(fmtRes_1224736980, 0, error_1224736848.message, []);
    };
    Temporary1 = fmtRes_1224736980[0];
    }
    else {
      Label4: {
        F.line = 67;
        var fmtRes_1224736995 = [mnewString(0)];
        F.line = 67;
        fmtRes_1224736995[0].push.apply(fmtRes_1224736995[0], [63,58]);;
        F.line = 67;
        formatValue_1224736856(fmtRes_1224736995, 0, error_1224736848.pos, []);
        F.line = 67;
        fmtRes_1224736995[0].push.apply(fmtRes_1224736995[0], [58]);;
        F.line = 67;
        formatValue_1224736919(fmtRes_1224736995, 0, code_1224736850, []);
        F.line = 67;
        fmtRes_1224736995[0].push.apply(fmtRes_1224736995[0], [58]);;
        F.line = 67;
        formatValue_922747051(fmtRes_1224736995, 0, error_1224736848.message, []);
      };
    Temporary1 = fmtRes_1224736995[0];
    }
    }
    result_1224736849 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_1224736849;

}

function formatValue_520094988(result_520094990, result_520094990_Idx, value_520094991, specifier_520094992) {
  var F = {procname: "formatValue.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 572;
    F.filename = "strformat.nim";
    formatValue_922747051(result_520094990, result_520094990_Idx, HEX24_1224736847(value_520094991), specifier_520094992);
  framePtr = F.prev;

  
}

function formatValue_520094993(result_520094995, result_520094995_Idx, value_520094996, specifier_520094997) {
  var F = {procname: "formatValue.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 572;
    F.filename = "strformat.nim";
    formatValue_922747051(result_520094995, result_520094995_Idx, nimBoolToStr(value_520094996), specifier_520094997);
  framePtr = F.prev;

  
}

function HEX24_520094970(pe_520094971) {
  var result_520094972 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 290;
    F.filename = "parse.nim";
    Label1: {
      F.line = 291;
      var fmtRes_520094977 = [mnewString(0)];
      F.line = 291;
      fmtRes_520094977[0].push.apply(fmtRes_520094977[0], [80,97,114,115,105,110,103,69,120,99,101,112,116,105,111,110,40,111,114,105,103,105,110,58,32]);;
      F.line = 649;
      F.filename = "strformat.nim";
      add_33556373(fmtRes_520094977, 0, pe_520094971.name);
      F.line = 291;
      F.filename = "parse.nim";
      fmtRes_520094977[0].push.apply(fmtRes_520094977[0], [44,32,110,111,100,101,95,111,114,105,103,110,95,108,101,110,58,32]);;
      F.line = 291;
      formatValue_1224736856(fmtRes_520094977, 0, pe_520094971.node_orig_len, []);
      F.line = 291;
      fmtRes_520094977[0].push.apply(fmtRes_520094977[0], [32,108,111,99,97,116,105,111,110,58,32]);;
      F.line = 291;
      formatValue_1224736856(fmtRes_520094977, 0, pe_520094971.location, []);
      F.line = 291;
      fmtRes_520094977[0].push.apply(fmtRes_520094977[0], [44,32,101,114,114,111,114,58,32,34]);;
      F.line = 291;
      formatValue_520094988(fmtRes_520094977, 0, pe_520094971.error, []);
      F.line = 291;
      fmtRes_520094977[0].push.apply(fmtRes_520094977[0], [34,44,32,102,105,114,115,116,95,116,104,114,111,119,58,32]);;
      F.line = 291;
      formatValue_520094993(fmtRes_520094977, 0, pe_520094971.first_throw, []);
    };
    result_520094972 = nimCopy(null, fmtRes_520094977[0], NTI33554449);
  framePtr = F.prev;

  return result_520094972;

}

function cut_1140850844(str_1140850845, start_1140850846, stop_1140850847) {
    var Temporary1;

  var result_1140850848 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "strslice.cut", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 94;
    F.filename = "strslice.nim";
    if ((((stop_1140850847 < start_1140850846) || (stop_1140850847 < 0)) || (str_1140850845.Field2 < start_1140850846))) {
    Temporary1 = {Field0: [EmptyStringSlice_1140850747.Field0[0], EmptyStringSlice_1140850747.Field0[1]], Field1: 0, Field2: (-1)};
    }
    else {
    Temporary1 = {Field0: [str_1140850845.Field0[0], str_1140850845.Field0[1]], Field1: nimMax(start_1140850846, 0), Field2: nimMin(stop_1140850847, str_1140850845.Field2)};
    }
    
    result_1140850848 = nimCopy(result_1140850848, Temporary1, NTI1140850691);
  framePtr = F.prev;

  return result_1140850848;

}

function index_1140850840(str_1140850841, i_1140850842) {
  var result_1140850843 = 0;

  var F = {procname: "strslice.index", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 91;
    F.filename = "strslice.nim";
    result_1140850843 = addInt(str_1140850841.Field1, i_1140850842);
  framePtr = F.prev;

  return result_1140850843;

}

function cut_1140850849(str_1140850850, slc_1140850853) {
  var result_1140850854 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "strslice.cut", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 100;
    F.filename = "strslice.nim";
    result_1140850854 = nimCopy(result_1140850854, cut_1140850844(str_1140850850, index_1140850840(str_1140850850, slc_1140850853.a), index_1140850840(str_1140850850, slc_1140850853.b)), NTI1140850691);
  framePtr = F.prev;

  return result_1140850854;

}

function HEX2EHEX2E_1140850755(a_1140850758, b_1140850759) {
  var result_1140850762 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_1140850762 = nimCopy(result_1140850762, {a: a_1140850758, b: b_1140850759}, NTI1140850751);
  framePtr = F.prev;

  return result_1140850762;

}

function high_1140850830(str_1140850831) {
  var result_1140850832 = 0;

  var F = {procname: "strslice.high", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 82;
    F.filename = "strslice.nim";
    result_1140850832 = subInt(str_1140850831.Field2, str_1140850831.Field1);
  framePtr = F.prev;

  return result_1140850832;

}

function len_1140850833(str_1140850834) {
  var result_1140850835 = 0;

  var F = {procname: "strslice.len", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 86;
    F.filename = "strslice.nim";
    result_1140850835 = addInt(high_1140850830(str_1140850834), 1);
  framePtr = F.prev;

  return result_1140850835;

}

function HEX3DHEX3D_520095286(x_520095288, y_520095289) {
  var result_520095290 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((x_520095288["Field0"] == y_520095289["Field0"]))) {
    F.line = 1708;
    F.filename = "system.nim";
    result_520095290 = false;
    break BeforeRet;
    }
    
    if (!((x_520095288["Field1"] == y_520095289["Field1"]))) {
    F.line = 1708;
    result_520095290 = false;
    break BeforeRet;
    }
    
    F.line = 1709;
    result_520095290 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095290;

}

function reprEnum(e_33557576, typ_33557577) {
  var result_33557578 = [];

  var F = {procname: "system.reprEnum", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "reprjs.nim";
    var tmp_33557579 = false;
    F.line = 31;
    var item_33557580 = typ_33557577.node.sons[e_33557576];
    F.line = 32;
    tmp_33557579 = item_33557580 !== undefined
    if (tmp_33557579) {
    F.line = 34;
    result_33557578 = nimCopy(null, makeNimstrLit(item_33557580.name), NTI33554449);
    }
    else {
      F.line = 36;
      result_33557578 = nimCopy(null, (HEX24_369098760(e_33557576) || []).concat([32,40,105,110,118,97,108,105,100,32,100,97,116,97,33,41] || []), NTI33554449);
    }
    
  framePtr = F.prev;

  return result_33557578;

}

function init_1224736792(error_1224736793, message_1224736794, pos_1224736795, code_1224736796, line_1224736797, column_1224736798, length_1224736799, related_1224736804, origPos_1224736805, origDoc_1224736806) {
  var result_1224736807 = null;

  var F = {procname: "error.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((0 <= pos_1224736795))) {
    F.line = 43;
    F.filename = "error.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim(43, 5) `pos >= 0` "));
    }
    
    F.line = 44;
    error_1224736793.message = nimCopy(null, message_1224736794, NTI33554449);
    F.line = 45;
    error_1224736793.pos = pos_1224736795;
    F.line = 46;
    error_1224736793.code = code_1224736796;
    F.line = 47;
    error_1224736793.line = line_1224736797;
    F.line = 48;
    error_1224736793.column = column_1224736798;
    F.line = 49;
    error_1224736793.length = length_1224736799;
    F.line = 50;
    error_1224736793.related = nimCopy(null, related_1224736804, NTI1224736786);
    F.line = 51;
    error_1224736793.origPos = origPos_1224736805;
    F.line = 52;
    error_1224736793.origDoc = nimCopy(null, origDoc_1224736806, NTI33554449);
    F.line = 53;
    result_1224736807 = error_1224736793;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1224736807;

}

function new_520095367() {
  var result_520095370 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520095372 = null;
    F.line = 839;
    r_520095372 = ({message: [], pos: 0, code: 0, line: 0, column: 0, length: 0, related: [], origPos: 0, origDoc: []});
    F.line = 840;
    result_520095370 = r_520095372;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095370;

}

function str_1140850821(str_1140850822) {
  var result_1140850823 = null;
  var result_1140850823_Idx = 0;

  var F = {procname: "strslice.str", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 75;
    F.filename = "strslice.nim";
    result_1140850823 = str_1140850822.Field0[0]; result_1140850823_Idx = str_1140850822.Field0[1];
  framePtr = F.prev;

  return [result_1140850823, result_1140850823_Idx];

}

function find_1140851026(slice_1140851027, pattern_1140851028, start_1140851029, size_1140851030) {
    var Temporary1;

  var result_1140851033 = {Field0: 0, Field1: 0};

  var F = {procname: "strslice.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(((0 <= start_1140851029) && (start_1140851029 <= addInt(subInt(slice_1140851027.Field2, slice_1140851027.Field1), 1))))) {
    F.line = 238;
    F.filename = "strslice.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(238, 5) `start >= 0 and start <= slice.stop - slice.start + 1` "));
    }
    
    F.line = 239;
    pattern_1140851028.Field1.lastIndex = addInt(start_1140851029, slice_1140851027.Field1);
    F.line = 240;
    var s_1140851039 = toJSStr((Temporary1 = str_1140850821(slice_1140851027), Temporary1)[0][Temporary1[1]]);
    F.line = 241;
    var m_1140851040 = (pattern_1140851028.Field1.exec(s_1140851039) || []);
    if ((0 < (m_1140851040).length)) {
    F.line = 243;
    var l_1140851045 = (((cstrToNimstr(m_1140851040[chckIndx(0, 0, (m_1140851040).length - 1)])).length) | 0);
    F.line = 244;
    var a_1140851046 = subInt(subInt(pattern_1140851028.Field1.lastIndex, slice_1140851027.Field1), ((((m_1140851040[chckIndx(0, 0, (m_1140851040).length - 1)]) == null ? 0 : (m_1140851040[chckIndx(0, 0, (m_1140851040).length - 1)]).length)) | 0));
    if (((size_1140851030 < 0) || (a_1140851046 <= addInt(start_1140851029, size_1140851030)))) {
    F.line = 246;
    var colontmp__520103982 = a_1140851046;
    F.line = 246;
    var colontmp__520103983 = subInt(addInt(a_1140851046, l_1140851045), 1);
    F.line = 246;
    result_1140851033 = nimCopy(result_1140851033, {Field0: colontmp__520103982, Field1: colontmp__520103983}, NTI1140850958);
    break BeforeRet;
    }
    
    }
    
    F.line = 247;
    var colontmp__520103984 = (-1);
    F.line = 247;
    var colontmp__520103985 = (-2);
    F.line = 247;
    result_1140851033 = nimCopy(result_1140851033, {Field0: colontmp__520103984, Field1: colontmp__520103985}, NTI1140850958);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1140851033;

}

function nsuFindChar(s_1006634644, sub_1006634645, start_1006634646, last_1006634647) {
    var Temporary1;

  var result_1006634648 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1945;
    F.filename = "strutils.nim";
    result_1006634648 = (-1);
    F.line = 1946;
    if ((last_1006634647 < 0)) {
    Temporary1 = (s_1006634644).length - 1;
    }
    else {
    Temporary1 = last_1006634647;
    }
    
    var last_1006634649 = Temporary1;
    Label2: {
      F.line = 1949;
      var iHEX60gensym176_1006634663 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520103991 = 0;
      F.line = 1949;
      F.filename = "strutils.nim";
      colontmp__520103991 = start_1006634646;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520103992 = colontmp__520103991;
      Label3: {
        F.line = 91;
          Label4: while (true) {
          if (!(res_520103992 <= last_1006634649)) break Label4;
            F.line = 1963;
            F.filename = "strutils.nim";
            iHEX60gensym176_1006634663 = res_520103992;
            if ((s_1006634644[chckIndx(iHEX60gensym176_1006634663, 0, (s_1006634644).length - 1)] == sub_1006634645)) {
            F.line = 1951;
            result_1006634648 = iHEX60gensym176_1006634663;
            break BeforeRet;
            }
            
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520103992 = addInt(res_520103992, 1);
          }
      };
    };
  };
  framePtr = F.prev;

  return result_1006634648;

}

function nsuFindStrA(a_1006634622, s_1006634623, sub_1006634624, start_1006634625, last_1006634626) {
    var Temporary1;

  var result_1006634627 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1905;
    F.filename = "strutils.nim";
    if ((last_1006634626 < 0)) {
    Temporary1 = (s_1006634623).length - 1;
    }
    else {
    Temporary1 = last_1006634626;
    }
    
    var last_1006634628 = Temporary1;
    F.line = 1906;
    var subLast_1006634629 = subInt((sub_1006634624).length, 1);
    if ((subLast_1006634629 == (-1))) {
    F.line = 1911;
    result_1006634627 = start_1006634625;
    break BeforeRet;
    }
    
    F.line = 1915;
    result_1006634627 = (-1);
    F.line = 1916;
    var skip_1006634630 = start_1006634625;
    Label2: {
      F.line = 1918;
        Label3: while (true) {
        if (!(subLast_1006634629 <= subInt(last_1006634628, skip_1006634630))) break Label3;
          F.line = 1919;
          var i_1006634631 = subLast_1006634629;
          Label4: {
            F.line = 1920;
              Label5: while (true) {
              if (!(s_1006634623[chckIndx(addInt(skip_1006634630, i_1006634631), 0, (s_1006634623).length - 1)] == sub_1006634624[chckIndx(i_1006634631, 0, (sub_1006634624).length - 1)])) break Label5;
                if ((i_1006634631 == 0)) {
                F.line = 1922;
                result_1006634627 = skip_1006634630;
                break BeforeRet;
                }
                
                F.line = 1923;
                i_1006634631 = subInt(i_1006634631, 1);
              }
          };
          F.line = 1924;
          skip_1006634630 = addInt(skip_1006634630, a_1006634622[chckIndx(s_1006634623[chckIndx(addInt(skip_1006634630, subLast_1006634629), 0, (s_1006634623).length - 1)], 0, (a_1006634622).length - 1)]);
        }
    };
  };
  framePtr = F.prev;

  return result_1006634627;

}

function fill_1006634582(a_1006634584, value_1006634585) {
  var F = {procname: "fill.fill", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 72;
    F.filename = "algorithm.nim";
    var xHEX60gensym172_1006634591 = 0;
    Label1: {
      F.line = 98;
        Label2: while (true) {
        if (!(xHEX60gensym172_1006634591 <= (a_1006634584).length - 1)) break Label2;
          F.line = 98;
          a_1006634584[chckIndx(xHEX60gensym172_1006634591, 0, (a_1006634584).length - 1)] = value_1006634585;
          F.line = 75;
          xHEX60gensym172_1006634591 = addInt(xHEX60gensym172_1006634591, 1);
        }
    };
  framePtr = F.prev;

  
}

function nsuInitSkipTable(a_1006634579, sub_1006634580) {
  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1878;
    F.filename = "strutils.nim";
    var m_1006634581 = (sub_1006634580).length;
    F.line = 1879;
    fill_1006634582(a_1006634579, m_1006634581);
    Label1: {
      F.line = 1881;
      var i_1006634601 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__520103997 = 0;
      F.line = 1881;
      F.filename = "strutils.nim";
      colontmp__520103997 = subInt(m_1006634581, 1);
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520103998 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520103998 < colontmp__520103997)) break Label3;
            F.line = 1881;
            F.filename = "strutils.nim";
            i_1006634601 = i_520103998;
            F.line = 1881;
            a_1006634579[chckIndx(sub_1006634580[chckIndx(i_1006634601, 0, (sub_1006634580).length - 1)], 0, (a_1006634579).length - 1)] = subInt(subInt(m_1006634581, 1), i_1006634601);
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520103998 = addInt(i_520103998, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function nsuInitNewSkipTable(sub_1006634619) {
  var result_1006634620 = [new Int32Array(256)];

  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1891;
    F.filename = "strutils.nim";
    nsuInitSkipTable(result_1006634620[0], sub_1006634619);
  framePtr = F.prev;

  return result_1006634620[0];

}

function nsuFindStr(s_1006634681, sub_1006634682, start_1006634683, last_1006634684) {
  var result_1006634685 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((subInt((s_1006634681).length, start_1006634683) < (sub_1006634682).length)) {
    F.line = 2003;
    F.filename = "strutils.nim";
    result_1006634685 = (-1);
    break BeforeRet;
    }
    
    if (((sub_1006634682).length == 1)) {
    F.line = 2004;
    result_1006634685 = nsuFindChar(s_1006634681, sub_1006634682[chckIndx(0, 0, (sub_1006634682).length - 1)], start_1006634683, last_1006634684);
    break BeforeRet;
    }
    
    F.line = 2007;
    result_1006634685 = nsuFindStrA(nsuInitNewSkipTable(sub_1006634682), s_1006634681, sub_1006634682, start_1006634683, last_1006634684);
  };
  framePtr = F.prev;

  return result_1006634685;

}

function toStringSlice_1174405885(str_1174405887) {
  var result_1174405888 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "toStringSlice.toStringSlice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 66;
    F.filename = "strslice.nim";
    result_1174405888 = nimCopy(result_1174405888, str_1174405887, NTI1140850691);
  framePtr = F.prev;

  return result_1174405888;

}

function init_520095427(node_520095430, name_520095431, data_520095432, attributes_520095433) {
  var result_520095434 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 30;
    F.filename = "nodetree.nim";
    node_520095430.nameRef[0] = [[]]; node_520095430.nameRef[1] = 0;
    F.line = 31;
    node_520095430.nameRef[0][node_520095430.nameRef[1]] = nimCopy(null, name_520095431, NTI33554449);
    F.line = 43;
    node_520095430.textSlice = nimCopy(node_520095430.textSlice, toStringSlice_1174405885(data_520095432), NTI1140850691);
    F.line = 44;
    node_520095430.attributesRef = attributes_520095433;
    F.line = 45;
    node_520095430.sourcePos = (-1);
    F.line = 46;
    result_520095434 = node_520095430;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095434;

}

function reentry_point_520095272(document_520095273, location_520095274, rules_520095275, commentRe_520095276, searchWindowSize_520095277) {
    var Temporary1;
    var Temporary2;
              var Temporary6;
              document_520095273 = nimCopy(null, document_520095273, NTI1140850691);
              commentRe_520095276 = nimCopy(null, commentRe_520095276, NTI1140850938);

function nextComment_520095305() {
  var result_520095308 = {Field0: 0, Field1: 0};

  var F = {procname: "reentry_point.nextComment", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((commentPointer_520095304 < upperLimit_520095281)) {
    F.line = 456;
    F.filename = "parse.nim";
    var tmpTuple_520095309 = find_1140851026(document_520095273, commentRe_520095276, commentPointer_520095304, (-1));
    F.line = 456;
    var a_520095310 = tmpTuple_520095309["Field0"];
    F.line = 456;
    var b_520095311 = tmpTuple_520095309["Field1"];
    if ((0 <= a_520095310)) {
    F.line = 458;
    commentPointer_520095304 = addInt(b_520095311, 1);
    F.line = 459;
    var colontmp__520103969 = a_520095310;
    F.line = 459;
    var colontmp__520103970 = addInt(b_520095311, 1);
    F.line = 459;
    result_520095308 = nimCopy(result_520095308, {Field0: colontmp__520103969, Field1: colontmp__520103970}, NTI520094662);
    break BeforeRet;
    }
    else {
      F.line = 461;
      commentPointer_520095304 = upperLimit_520095281;
    }
    
    }
    
    F.line = 462;
    var colontmp__520103971 = (-1);
    F.line = 462;
    var colontmp__520103972 = (-2);
    F.line = 462;
    result_520095308 = nimCopy(result_520095308, {Field0: colontmp__520103971, Field1: colontmp__520103972}, NTI520094662);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095308;

}
              
function entry_point_520095312(m_520095313) {
                  m_520095313 = nimCopy(null, m_520095313, NTI520093758);
                  
function searchFunc_520095315(start_520095316) {
                      var Temporary1;
                        var Temporary2;
                        var Temporary3;
                        var Temporary4;
                        var Temporary5;
                        var Temporary6;

                    var result_520095319 = {Field0: 0, Field1: 0};

                    var F = {procname: "entry_point.searchFunc", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
                    framePtr = F;
                      F.line = 466;
                      F.filename = "parse.nim";
                      F.line = 466;
                      switch (m_520095313.kind) {
                      case 0:
                        F.line = 468;
                        var Temporary2 = m_520095313;
                        if (ConstSet12[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'rxInfo\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI520093756)); }
                        var tmpTuple_520095320 = find_1140851026(document_520095273, Temporary2.rxInfo.Field1, start_520095316, searchWindow_520095284);
                        F.line = 468;
                        var a_520095321 = tmpTuple_520095320["Field0"];
                        F.line = 468;
                        var b_520095322 = tmpTuple_520095320["Field1"];
                        Temporary1 = {Field0: a_520095321, Field1: addInt(subInt(b_520095322, a_520095321), 1)};
                        break;
                      case 1:
                        var Temporary4 = m_520095313;
                        if (ConstSet13[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'cmpStr\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI520093756)); }
                        var Temporary5 = m_520095313;
                        if (ConstSet14[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'cmpStr\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI520093756)); }
                        Temporary1 = {Field0: ((nsuFindStr((Temporary3 = str_1140850821(document_520095273), Temporary3)[0][Temporary3[1]], Temporary4.cmpStr, chckRange(start_520095316, 0, 2147483647), ((addInt(start_520095316, searchWindow_520095284)) | 0))) | 0), Field1: (((Temporary5.cmpStr).length) | 0)};
                        break;
                      case 2:
                        var Temporary6 = m_520095313;
                        if (ConstSet15[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'findProc\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI520093756)); }
                        Temporary1 = Temporary6.findProc(document_520095273, start_520095316, addInt(start_520095316, searchWindow_520095284));
                        break;
                      default: 
                        Temporary1 = {Field0: (-1), Field1: 0};
                        break;
                      }
                      result_520095319 = nimCopy(result_520095319, Temporary1, NTI520094667);
                    framePtr = F.prev;

                    return result_520095319;

                  }
                  var Temporary7;

                var result_520095314 = 0;

                var F = {procname: "reentry_point.entry_point", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
                framePtr = F;
                BeforeRet: {
                  F.line = 479;
                  F.filename = "parse.nim";
                  var tmpTuple_520095331 = nextComment_520095305();
                  F.line = 479;
                  var a_520095332 = tmpTuple_520095331["Field0"];
                  F.line = 479;
                  var b_520095333 = tmpTuple_520095331["Field1"];
                  F.line = 480;
                  var tmpTuple_520095334 = searchFunc_520095315(location_520095274);
                  F.line = 480;
                  var k_520095335 = tmpTuple_520095334["Field0"];
                  F.line = 480;
                  var length_520095336 = tmpTuple_520095334["Field1"];
                  Label1: {
                    F.line = 482;
                      Label2: while (true) {
                      if (!((a_520095332 < b_520095333) && (b_520095333 <= addInt(k_520095335, length_520095336)))) break Label2;
                        F.line = 483;
                        var __520095337 = nimCopy(null, nextComment_520095305(), NTI520094662);
                        F.line = 483;
                        a_520095332 = __520095337["Field0"];
                        F.line = 483;
                        b_520095333 = __520095337["Field1"];
                      }
                  };
                  Label3: {
                    F.line = 484;
                      Label4: while (true) {
                      if (!(((a_520095332 < k_520095335) && (k_520095335 < b_520095333)) || ((a_520095332 < addInt(k_520095335, length_520095336)) && (addInt(k_520095335, length_520095336) < b_520095333)))) break Label4;
                        F.line = 485;
                        var __520095338 = nimCopy(null, searchFunc_520095315(b_520095333), NTI520094667);
                        F.line = 485;
                        k_520095335 = __520095338["Field0"];
                        F.line = 485;
                        length_520095336 = __520095338["Field1"];
                        Label5: {
                          F.line = 486;
                            Label6: while (true) {
                            if (!((a_520095332 < b_520095333) && (b_520095333 <= addInt(k_520095335, length_520095336)))) break Label6;
                              F.line = 487;
                              var __520095339 = nimCopy(null, nextComment_520095305(), NTI520094662);
                              F.line = 487;
                              a_520095332 = __520095339["Field0"];
                              F.line = 487;
                              b_520095333 = __520095339["Field1"];
                            }
                        };
                      }
                  };
                  F.line = 488;
                  if ((0 <= k_520095335)) {
                  Temporary7 = addInt(k_520095335, length_520095336);
                  }
                  else {
                  Temporary7 = upperLimit_520095281;
                  }
                  
                  result_520095314 = Temporary7;
                  break BeforeRet;
                };
                framePtr = F.prev;

                return result_520095314;

              }

  var result_520095280 = {Field0: null, Field1: 0};

  var F = {procname: "parse.reentry_point", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 444;
    F.filename = "parse.nim";
    var upperLimit_520095281 = addInt(len_1140850833(document_520095273), 1);
    F.line = 446;
    var pos_520095282 = location_520095274;
    F.line = 447;
    var closestMatch_520095283 = upperLimit_520095281;
    F.line = 448;
    if ((searchWindowSize_520095277 < 0)) {
    Temporary1 = subInt(len_1140850833(document_520095273), location_520095274);
    }
    else {
    Temporary1 = searchWindowSize_520095277;
    }
    
    var searchWindow_520095284 = Temporary1;
    F.line = 450;
    var skipNode_520095285 = null;
    F.line = 451;
    if (!(HEX3DHEX3D_520095286(commentRe_520095276, NeverMatchRegex_520093760))) {
    Temporary2 = location_520095274;
    }
    else {
    Temporary2 = upperLimit_520095281;
    }
    
    var commentPointer_520095304 = Temporary2;
    Label3: {
      F.line = 490;
      var rule_520095362 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520103977 = 0;
      F.line = 242;
      var L_520103978 = (rules_520095275).length;
      Label4: {
        F.line = 243;
          Label5: while (true) {
          if (!(i_520103977 < L_520103978)) break Label5;
            F.line = 490;
            F.filename = "parse.nim";
            rule_520095362 = rules_520095275[chckIndx(i_520103977, 0, (rules_520095275).length - 1)];
            F.line = 490;
            switch (rule_520095362.kind) {
            case 3:
              F.line = 493;
              var Temporary6 = rule_520095362;
              if (ConstSet11[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI520093756)); }
              var parser_520095363 = Temporary6.consumeParser;
              F.line = 494;
              skipNode_520095285 = null;
              F.line = 495;
++excHandler;
              try {
              F.line = 496;
              var __520095364 = nimCopy(null, parser_520095363.call(parser_520095363, location_520095274), NTI520093753);
              F.line = 496;
              skipNode_520095285 = __520095364["Field0"];
              F.line = 496;
              pos_520095282 = __520095364["Field1"];
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
              framePtr = F;
              if (lastJSError && (isObj(lastJSError.m_type, NTI520093774))) {
              F.line = 498;
              var pe_520095365 = getCurrentException();
              F.line = 498;
              var msg_520095366 = ([69,114,114,111,114,32,119,104,105,108,101,32,115,101,97,114,99,104,105,110,103,32,114,101,45,101,110,116,114,121,32,112,111,105,110,116,32,119,105,116,104,32,112,97,114,115,101,114] || []).concat(HEX24_520095036(parser_520095363) || [],[58,32] || [],pe_520095365.message || []);
              F.line = 499;
              var error_520095400 = init_1224736792(new_520095367(), msg_520095366, location_520095274, 1301, (-1), (-1), (-1), [], (-1), []);
              F.line = 500;
              grammar_520095212(parser_520095363).errors.push(error_520095400);;
              F.line = 502;
              pos_520095282 = upperLimit_520095281;
              }
              else {
              	reraiseException();
              }
              lastJSError = prevJSError;
              } finally {
              framePtr = F;
              }
              if (!((skipNode_520095285 == null))) {
              if ((pos_520095282 < closestMatch_520095283)) {
              F.line = 505;
              closestMatch_520095283 = pos_520095282;
              }
              
              }
              
              break;
            default: 
              F.line = 507;
              pos_520095282 = entry_point_520095312(rule_520095362);
              if ((pos_520095282 < closestMatch_520095283)) {
              F.line = 509;
              skipNode_520095285 = null;
              F.line = 510;
              closestMatch_520095283 = pos_520095282;
              }
              
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_520103977 = addInt(i_520103977, 1);
            if (!(((rules_520095275).length == L_520103978))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if ((upperLimit_520095281 <= closestMatch_520095283)) {
    F.line = 512;
    F.filename = "parse.nim";
    closestMatch_520095283 = (-1);
    }
    
    if ((skipNode_520095285 == null)) {
    F.line = 514;
    var skipSlice_520095423 = cut_1140850849(document_520095273, HEX2EHEX2E_1140850755(location_520095274, subInt(nimMax(closestMatch_520095283, location_520095274), 1)));
    F.line = 516;
    skipNode_520095285 = init_520095427(new_1174405827(), [95,95,90,79,77,66,73,69], skipSlice_520095423, null);
    }
    
    F.line = 517;
    var colontmp__520103980 = skipNode_520095285;
    F.line = 517;
    var colontmp__520103981 = subInt(closestMatch_520095283, location_520095274);
    F.line = 517;
    result_520095280 = nimCopy(result_520095280, {Field0: colontmp__520103980, Field1: colontmp__520103981}, NTI520094652);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095280;

}

function HEX3DHEX3D_520095572(str_520095574, cmp_520095575) {
  var result_520095576 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((len_1140850833(str_520095574) == len_1140850833(cmp_520095575)))) {
    F.line = 147;
    F.filename = "strslice.nim";
    result_520095576 = false;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 149;
      var i_520095577 = 0;
      F.line = 107;
      F.filename = "iterators_1.nim";
      var res_520104003 = cmp_520095575.Field1;
      Label2: {
        F.line = 108;
          Label3: while (true) {
          if (!(res_520104003 <= cmp_520095575.Field2)) break Label3;
            F.line = 149;
            F.filename = "strslice.nim";
            i_520095577 = res_520104003;
            if (!((str_520095574.Field0[0][str_520095574.Field0[1]][chckIndx(subInt(addInt(i_520095577, str_520095574.Field1), cmp_520095575.Field1), 0, (str_520095574.Field0[0][str_520095574.Field0[1]]).length - 1)] == cmp_520095575.Field0[0][cmp_520095575.Field0[1]][chckIndx(i_520095577, 0, (cmp_520095575.Field0[0][cmp_520095575.Field0[1]]).length - 1)]))) {
            F.line = 150;
            result_520095576 = false;
            break BeforeRet;
            }
            
            F.line = 110;
            F.filename = "iterators_1.nim";
            res_520104003 = addInt(res_520104003, 1);
          }
      };
    };
    F.line = 151;
    F.filename = "strslice.nim";
    result_520095576 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095576;

}

function textHEX3D_520095561(node_520095563, text_520095564) {
  var F = {procname: "text=.text=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    if ((0 < (node_520095563.childrenSeq).length)) {
    F.line = 88;
    F.filename = "nodetree.nim";
    node_520095563.childrenSeq = nimCopy(null, [], NTI1174405145);
    }
    
    if (HEX3DHEX3D_520095572(node_520095563.textSlice, EmptyStringSlice_1140850747)) {
    F.line = 90;
    node_520095563.textSlice = nimCopy(node_520095563.textSlice, toStringSlice_1174405885(text_520095564), NTI1140850691);
    }
    else {
      F.line = 93;
      node_520095563.textSlice = nimCopy(node_520095563.textSlice, text_520095564, NTI1140850691);
    }
    
  framePtr = F.prev;

  
}

function last_1140850827(str_1140850828) {
  var result_1140850829 = 0;

  var F = {procname: "strslice.last", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 79;
    F.filename = "strslice.nim";
    result_1140850829 = str_1140850828.Field2;
  framePtr = F.prev;

  return result_1140850829;

}

function first_1140850824(str_1140850825) {
  var result_1140850826 = 0;

  var F = {procname: "strslice.first", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 77;
    F.filename = "strslice.nim";
    result_1140850826 = str_1140850825.Field1;
  framePtr = F.prev;

  return result_1140850826;

}

function runeLenAt_956308504(s_956308505, i_956308506) {
  var result_956308507 = 0;

  var F = {procname: "unicode.runeLenAt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1161;
    F.filename = "unicode.nim";
    result_956308507 = runeLenAt_956301406((s_956308505.slice(0, (s_956308505).length - 1 + 1)), i_956308506);
  framePtr = F.prev;

  return result_956308507;

}

function runeLen_1174405679(node_1174405680) {
          var Temporary3;

  var result_1174405681 = 0;

  var F = {procname: "nodetree.runeLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 138;
    F.filename = "nodetree.nim";
    result_1174405681 = 0;
    if ((((node_1174405680.childrenSeq).length == 0) && (0 < len_1140850833(node_1174405680.textSlice)))) {
    F.line = 140;
    var last_1174405685 = last_1140850827(node_1174405680.textSlice);
    F.line = 141;
    var i_1174405686 = first_1140850824(node_1174405680.textSlice);
    Label1: {
      F.line = 142;
        Label2: while (true) {
        if (!(i_1174405686 <= last_1174405685)) break Label2;
          F.line = 143;
          i_1174405686 = addInt(i_1174405686, runeLenAt_956308504((Temporary3 = str_1140850821(node_1174405680.textSlice), Temporary3)[0][Temporary3[1]], chckRange(i_1174405686, 0, 2147483647)));
          F.line = 144;
          result_1174405681 = addInt(result_1174405681, 1);
        }
    };
    }
    else {
      Label4: {
        F.line = 146;
        var child_1174405700 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520104011 = 0;
        F.line = 242;
        var L_520104012 = (node_1174405680.childrenSeq).length;
        Label5: {
          F.line = 243;
            Label6: while (true) {
            if (!(i_520104011 < L_520104012)) break Label6;
              F.line = 146;
              F.filename = "nodetree.nim";
              child_1174405700 = node_1174405680.childrenSeq[chckIndx(i_520104011, 0, (node_1174405680.childrenSeq).length - 1)];
              F.line = 146;
              result_1174405681 = addInt(result_1174405681, runeLen_1174405679(child_1174405700));
              F.line = 245;
              F.filename = "iterators.nim";
              i_520104011 = addInt(i_520104011, 1);
              if (!(((node_1174405680.childrenSeq).length == L_520104012))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
  framePtr = F.prev;

  return result_1174405681;

}

function assignSourcePos_1174405747(node_1174405748, sourcePos_1174405749) {
  var result_1174405750 = 0;

  var F = {procname: "nodetree.assignSourcePos", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((0 <= sourcePos_1174405749))) {
    F.line = 157;
    F.filename = "nodetree.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim(157, 3) `sourcePos >= 0` "));
    }
    
    if (((0 <= node_1174405748.sourcePos) && !((node_1174405748.sourcePos == sourcePos_1174405749)))) {
    F.line = 159;
    raiseException({message: [115,111,117,114,99,101,32,112,111,115,105,116,105,111,110,32,109,117,115,116,32,110,111,116,32,98,101,32,114,101,97,115,115,105,103,110,101,100,33], parent: null, m_type: NTI1174405128, name: null, trace: [], up: null}, "SourcePosReAssigmentDefect");
    }
    
    F.line = 160;
    node_1174405748.sourcePos = sourcePos_1174405749;
    F.line = 161;
    var pos_1174405757 = sourcePos_1174405749;
    if (((node_1174405748.childrenSeq).length == 0)) {
    F.line = 163;
    result_1174405750 = addInt(pos_1174405757, runeLen_1174405679(node_1174405748));
    break BeforeRet;
    }
    else {
      Label1: {
        F.line = 165;
        var child_1174405764 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520104006 = 0;
        F.line = 242;
        var L_520104007 = (node_1174405748.childrenSeq).length;
        Label2: {
          F.line = 243;
            Label3: while (true) {
            if (!(i_520104006 < L_520104007)) break Label3;
              F.line = 165;
              F.filename = "nodetree.nim";
              child_1174405764 = node_1174405748.childrenSeq[chckIndx(i_520104006, 0, (node_1174405748.childrenSeq).length - 1)];
              if (!((child_1174405764 == null))) {
              if ((child_1174405764.sourcePos < 0)) {
              F.line = 168;
              pos_1174405757 = addInt(pos_1174405757, assignSourcePos_1174405747(child_1174405764, pos_1174405757));
              }
              else {
                F.line = 170;
              pos_1174405757 = addInt(pos_1174405757, runeLen_1174405679(child_1174405764));
              }
              
              }
              
              F.line = 245;
              F.filename = "iterators.nim";
              i_520104006 = addInt(i_520104006, 1);
              if (!(((node_1174405748.childrenSeq).length == L_520104007))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
    F.line = 171;
    F.filename = "nodetree.nim";
    result_1174405750 = pos_1174405757;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1174405750;

}

function init_1174405938(node_1174405941, name_1174405942, name_1174405942_Idx, data_1174405943, attributes_1174405944) {
  var result_1174405945 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 28;
    F.filename = "nodetree.nim";
    node_1174405941.nameRef[0] = name_1174405942; node_1174405941.nameRef[1] = name_1174405942_Idx;
    F.line = 33;
    node_1174405941.childrenSeq = nimCopy(null, data_1174405943, NTI1174405145);
    F.line = 34;
    node_1174405941.textSlice = nimCopy(node_1174405941.textSlice, EmptyStringSlice_1140850747, NTI1140850691);
    F.line = 44;
    node_1174405941.attributesRef = attributes_1174405944;
    F.line = 45;
    node_1174405941.sourcePos = (-1);
    F.line = 46;
    result_1174405945 = node_1174405941;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1174405945;

}

function HEX5BHEX5D_520095625(s_520095627, i_520095628) {
  var result_520095629 = null;
  var result_520095629_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_520095629 = s_520095627; result_520095629_Idx = chckIndx(subInt((s_520095627).length, i_520095628), 0, (s_520095627).length - 1);
  framePtr = F.prev;

  return [result_520095629, result_520095629_Idx];

}

function handle_error_520095498(parser_520095499, pe_520095500, location_520095501) {
      var Temporary4;

  var result_520095502 = {Field0: null, Field1: 0};

  var F = {procname: "parse.handle_error", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((0 <= pe_520095500.node_orig_len))) {
    F.line = 521;
    F.filename = "parse.nim";
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(521, 3) `pe.node_orig_len >= 0` ") || []).concat(HEX24_520094970(pe_520095500) || []));
    }
    
    if (!((0 <= pe_520095500.location))) {
    F.line = 522;
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(522, 3) `pe.location >= 0` ") || []).concat(HEX24_520094970(pe_520095500) || []));
    }
    
    F.line = 525;
    var grammar_520095513 = grammar_520095212(pe_520095500.origin);
    F.line = 526;
    var gap_520095514 = subInt(pe_520095500.location, location_520095501);
    F.line = 527;
    var cut_520095526 = cut_1140850849(grammar_520095513.document, HEX2EHEX2E_1140850755(location_520095501, subInt(addInt(location_520095501, gap_520095514), 1)));
    F.line = 528;
    var rules_520095527 = nimCopy(null, pe_520095500.origin.resumeList, NTI520093799);
    F.line = 530;
    var node_520095528 = EmptyNode_520093990;
    F.line = 531;
    var tail_520095529 = false;
    F.line = 532;
    var nextLoc_520095530 = addInt(pe_520095500.location, pe_520095500.node_orig_len);
    F.line = 533;
    var tmpTuple_520095531 = reentry_point_520095272(grammar_520095513.document, nextLoc_520095530, rules_520095527, grammar_520095513.commentRe, 10000);
    F.line = 533;
    var skipNode_520095532 = tmpTuple_520095531["Field0"];
    F.line = 533;
    var i_520095533 = tmpTuple_520095531["Field1"];
    if (((0 <= i_520095533) || (parser_520095499 == grammar_520095513.root))) {
    F.line = 536;
    var zombie_520095538 = null;
    if ((i_520095533 < 0)) {
    F.line = 537;
    i_520095533 = 0;
    }
    
    Label1: {
      F.line = 538;
      var child_520095542 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520103932 = 0;
      F.line = 242;
      var L_520103933 = (pe_520095500.node.childrenSeq).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520103932 < L_520103933)) break Label3;
            F.line = 538;
            F.filename = "parse.nim";
            child_520095542 = pe_520095500.node.childrenSeq[chckIndx(i_520103932, 0, (pe_520095500.node.childrenSeq).length - 1)];
            if (eqStrings(child_520095542.nameRef[0][child_520095542.nameRef[1]], [95,95,90,79,77,66,73,69])) {
            F.line = 540;
            zombie_520095538 = child_520095542;
            F.line = 541;
            break Label1;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_520103932 = addInt(i_520103932, 1);
            if (!(((pe_520095500.node.childrenSeq).length == L_520103933))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if ((!((zombie_520095538 == null)) && (((zombie_520095538.childrenSeq).length == 0) && (len_1140850833(zombie_520095538.textSlice) == 0)))) {
    F.line = 543;
    F.filename = "parse.nim";
    textHEX3D_520095561(zombie_520095538, cut_1140850849(grammar_520095513.document, HEX2EHEX2E_1140850755(location_520095501, subInt(addInt(location_520095501, i_520095533), 1))));
    F.line = 544;
    tail_520095529 = false;
    }
    
    F.line = 545;
    nextLoc_520095530 = addInt(nextLoc_520095530, i_520095533);
    if (pe_520095500.first_throw) {
    F.line = 547;
    node_520095528 = pe_520095500.node;
    if ((tail_520095529 && !((skipNode_520095532 == null)))) {
    F.line = 548;
    node_520095528.childrenSeq.push(skipNode_520095532);;
    }
    
    }
    else {
      if (!((skipNode_520095532 == null))) {
      F.line = 553;
      F.line = 177;
      F.filename = "nodetree.nim";
      var _ = assignSourcePos_1174405747(init_1174405938(new_1174405827(), parser_520095499.nodeName[0], parser_520095499.nodeName[1], [init_520095427(new_1174405827(), [95,95,90,79,77,66,73,69], cut_520095526, null), pe_520095500.node, skipNode_520095532], null), location_520095501);
      node_520095528 = init_1174405938(new_1174405827(), parser_520095499.nodeName[0], parser_520095499.nodeName[1], [init_520095427(new_1174405827(), [95,95,90,79,77,66,73,69], cut_520095526, null), pe_520095500.node, skipNode_520095532], null);
      }
      else {
        if (true) {
        F.line = 555;
        F.filename = "parse.nim";
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(555, 9) `false` Unrechable, theoretically..."));
        }
        
      }
      
    }
    
    }
    else {
    if (pe_520095500.first_throw) {
    F.line = 557;
    pe_520095500.first_throw = false;
    F.line = 558;
    raiseException(pe_520095500, "ParsingException:ObjectType");
    }
    else {
    if (((Temporary4 = HEX5BHEX5D_520095625(grammar_520095513.errors, 1), Temporary4)[0][Temporary4[1]].code == 1015)) {
    F.line = 560;
    F.line = 177;
    F.filename = "nodetree.nim";
    var _ = assignSourcePos_1174405747(init_1174405938(new_1174405827(), parser_520095499.nodeName[0], parser_520095499.nodeName[1], [pe_520095500.node], null), location_520095501);
    node_520095528 = init_1174405938(new_1174405827(), parser_520095499.nodeName[0], parser_520095499.nodeName[1], [pe_520095500.node], null);
    }
    else {
      if ((gap_520095514 == 0)) {
      F.line = 563;
      F.filename = "parse.nim";
      F.line = 177;
      F.filename = "nodetree.nim";
      var _ = assignSourcePos_1174405747(init_1174405938(new_1174405827(), parser_520095499.nodeName[0], parser_520095499.nodeName[1], [pe_520095500.node], null), location_520095501);
      node_520095528 = init_1174405938(new_1174405827(), parser_520095499.nodeName[0], parser_520095499.nodeName[1], [pe_520095500.node], null);
      }
      else {
        F.line = 565;
        F.filename = "parse.nim";
        F.line = 177;
        F.filename = "nodetree.nim";
        var _ = assignSourcePos_1174405747(init_1174405938(new_1174405827(), parser_520095499.nodeName[0], parser_520095499.nodeName[1], [init_520095427(new_1174405827(), [95,95,90,79,77,66,73,69], cut_520095526, null), pe_520095500.node], null), location_520095501);
        node_520095528 = init_1174405938(new_1174405827(), parser_520095499.nodeName[0], parser_520095499.nodeName[1], [init_520095427(new_1174405827(), [95,95,90,79,77,66,73,69], cut_520095526, null), pe_520095500.node], null);
      }
      
      F.line = 566;
      F.filename = "parse.nim";
      pe_520095500.node = node_520095528;
      F.line = 567;
      pe_520095500.node_orig_len = addInt(pe_520095500.node_orig_len, gap_520095514);
      F.line = 568;
      pe_520095500.location = location_520095501;
      F.line = 569;
      pe_520095500.first_throw = false;
      F.line = 570;
      raiseException(pe_520095500, "ParsingException:ObjectType");
    }
    }}
    F.line = 571;
    var colontmp__520103935 = node_520095528;
    F.line = 571;
    var colontmp__520103936 = nextLoc_520095530;
    F.line = 571;
    result_520095502 = nimCopy(result_520095502, {Field0: colontmp__520103935, Field1: colontmp__520103936}, NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095502;

}

function nextPowerOfTwo_687866103(x_687866104) {
  var result_687866105 = 0;

    result_687866105 = (x_687866104 - 1);
    result_687866105 = (result_687866105 | (result_687866105 >> 16));
    result_687866105 = (result_687866105 | (result_687866105 >> 8));
    result_687866105 = (result_687866105 | (result_687866105 >> 4));
    result_687866105 = (result_687866105 | (result_687866105 >> 2));
    result_687866105 = (result_687866105 | (result_687866105 >> 1));
    result_687866105 += (1 + ((x_687866104 <= 0) ? 1 : 0));

  return result_687866105;

}

function slotsNeeded_1107296298(count_1107296299) {
  var result_1107296300 = 0;

  var F = {procname: "tables.slotsNeeded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 39;
    F.filename = "hashcommon.nim";
    result_1107296300 = nextPowerOfTwo_687866103(addInt(divInt(mulInt(count_1107296299, 3), 2), 4));
  framePtr = F.prev;

  return result_1107296300;

}

function mustRehash_520096661(t_520096663) {
  var result_520096664 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_520096663.counter < (t_520096663.data).length))) {
    F.line = 34;
    F.filename = "hashcommon.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 35;
    result_520096664 = ((mulInt((t_520096663.data).length, 2) < mulInt(t_520096663.counter, 3)) || (subInt((t_520096663.data).length, t_520096663.counter) < 4));
  framePtr = F.prev;

  return result_520096664;

}

function rawInsert_520097170(t_520097174, data_520097175, data_520097175_Idx, key_520097176, val_520097177, hc_520097178, h_520097179) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 25;
    F.filename = "tableimpl.nim";
    data_520097175[data_520097175_Idx][chckIndx(h_520097179, 0, (data_520097175[data_520097175_Idx]).length - 1)].Field1 = key_520097176;
    F.line = 26;
    data_520097175[data_520097175_Idx][chckIndx(h_520097179, 0, (data_520097175[data_520097175_Idx]).length - 1)].Field2 = nimCopy(data_520097175[data_520097175_Idx][chckIndx(h_520097179, 0, (data_520097175[data_520097175_Idx]).length - 1)].Field2, val_520097177, NTI520093753);
    F.line = 27;
    data_520097175[data_520097175_Idx][chckIndx(h_520097179, 0, (data_520097175[data_520097175_Idx]).length - 1)].Field0 = hc_520097178;
  framePtr = F.prev;

  
}

function enlarge_520096849(t_520096852) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 250;
    F.filename = "tables.nim";
    var n_520096855 = [];
    F.line = 251;
    n_520096855 = new Array(chckRange(mulInt((t_520096852.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_520096852.data).length, 2), 0, 2147483647) ; ++i) { n_520096855[i] = {Field0: 0, Field1: 0, Field2: {Field0: null, Field1: 0}}; }    F.line = 252;
    var Temporary1 = t_520096852.data; t_520096852.data = n_520096855; n_520096855 = Temporary1;    Label2: {
      F.line = 253;
      var i_520096930 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__520104016 = 0;
      F.line = 253;
      F.filename = "tables.nim";
      colontmp__520104016 = (n_520096855).length - 1;
      F.line = 65;
      F.filename = "iterators_1.nim";
      var res_520104018 = 0;
      Label3: {
        F.line = 66;
          Label4: while (true) {
          if (!(res_520104018 <= colontmp__520104016)) break Label4;
            F.line = 253;
            F.filename = "tables.nim";
            i_520096930 = res_520104018;
            F.line = 254;
            var eh_520096988 = n_520096855[chckIndx(i_520096930, 0, (n_520096855).length - 1)].Field0;
            if (isFilled_1107296287(eh_520096988)) {
            F.line = 256;
            var j_520096992 = (eh_520096988 & (t_520096852.data).length - 1);
            Label5: {
              F.line = 257;
                Label6: while (true) {
                if (!isFilled_1107296287(t_520096852.data[chckIndx(j_520096992, 0, (t_520096852.data).length - 1)].Field0)) break Label6;
                  F.line = 258;
                  j_520096992 = nextTry_1107296290(j_520096992, (t_520096852.data).length - 1);
                }
            };
            F.line = 260;
            rawInsert_520097170(t_520096852, t_520096852, "data", n_520096855[chckIndx(i_520096930, 0, (n_520096855).length - 1)].Field1, n_520096855[chckIndx(i_520096930, 0, (n_520096855).length - 1)].Field2, eh_520096988, j_520096992);
            }
            
            F.line = 68;
            F.filename = "iterators_1.nim";
            res_520104018 = addInt(res_520104018, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function rawGetKnownHC_520097351(t_520097354, key_520097355, hc_520097356) {
  var result_520097357 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((t_520097354.data).length == 0)) {
    F.line = 43;
    F.filename = "hashcommon.nim";
    result_520097357 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_520097419 = (hc_520097356 & (t_520097354.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1107296287(t_520097354.data[chckIndx(h_520097419, 0, (t_520097354.data).length - 1)].Field0)) break Label2;
          if (((t_520097354.data[chckIndx(h_520097419, 0, (t_520097354.data).length - 1)].Field0 == hc_520097356) && (t_520097354.data[chckIndx(h_520097419, 0, (t_520097354.data).length - 1)].Field1 == key_520097355))) {
          F.line = 51;
          result_520097357 = h_520097419;
          break BeforeRet;
          }
          
          F.line = 52;
          h_520097419 = nextTry_1107296290(h_520097419, (t_520097354.data).length - 1);
        }
    };
    F.line = 53;
    result_520097357 = subInt((-1), h_520097419);
  };
  framePtr = F.prev;

  return result_520097357;

}

function HEX5BHEX5DHEX3D_520096462(t_520096465, key_520096466, val_520096467) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_520096465.data).length == 0)) {
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym97_520096527 = slotsNeeded_1107296298(32);
    F.line = 169;
    t_520096465.counter = 0;
    F.line = 170;
    t_520096465.data = new Array(chckRange(correctSizeHEX60gensym97_520096527, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym97_520096527, 0, 2147483647) ; ++i) { t_520096465.data[i] = {Field0: 0, Field1: 0, Field2: {Field0: null, Field1: 0}}; }    }
    
    F.line = 59;
    var hc_520096532 = [0];
    F.line = 60;
    var index_520096539 = rawGet_520095954(t_520096465, key_520096466, hc_520096532, 0);
    if ((0 <= index_520096539)) {
    F.line = 61;
    t_520096465.data[chckIndx(index_520096539, 0, (t_520096465.data).length - 1)].Field2 = nimCopy(t_520096465.data[chckIndx(index_520096539, 0, (t_520096465.data).length - 1)].Field2, val_520096467, NTI520093753);
    }
    else {
      if (((t_520096465.data).length == 0)) {
      F.line = 165;
      var correctSizeHEX60gensym100_520096656 = slotsNeeded_1107296298(32);
      F.line = 169;
      t_520096465.counter = 0;
      F.line = 170;
      t_520096465.data = new Array(chckRange(correctSizeHEX60gensym100_520096656, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym100_520096656, 0, 2147483647) ; ++i) { t_520096465.data[i] = {Field0: 0, Field1: 0, Field2: {Field0: null, Field1: 0}}; }      }
      
      if (mustRehash_520096661(t_520096465)) {
      F.line = 51;
      enlarge_520096849(t_520096465);
      F.line = 52;
      index_520096539 = rawGetKnownHC_520097351(t_520096465, key_520096466, hc_520096532[0]);
      }
      
      F.line = 53;
      index_520096539 = subInt((-1), index_520096539);
      F.line = 54;
      rawInsert_520097170(t_520096465, t_520096465, "data", key_520096466, val_520096467, hc_520096532[0], index_520096539);
      F.line = 62;
      t_520096465.counter = addInt(t_520096465.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function memoizationWrapper_520094179(parser_520094180, location_520094181) {
  var result_520095886 = {Field0: null, Field1: 0};

  var F = {procname: "parse.memoizationWrapper", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 596;
    F.filename = "parse.nim";
    var grammar_520095887 = grammar_520095212(parser_520094180);
    if ((location_520094181 < grammar_520095887.rollbackLocation)) {
    F.line = 597;
    rollback_520095814(grammar_520095887, location_520094181);
    }
    
    if (contains_520095941(parser_520094180.visited, ((location_520094181) | 0))) {
    F.line = 598;
    result_520095886 = nimCopy(result_520095886, HEX5BHEX5D_520096272(parser_520094180.visited, ((location_520094181) | 0)), NTI520093753);
    break BeforeRet;
    }
    
    F.line = 600;
    var memoization_520096404 = (grammar_520095887.flags[1] != undefined);
    F.line = 601;
    grammar_520095887.flags[1] = true;
    F.line = 603;
++excHandler;
    try {
    F.line = 604;
    result_520095886 = nimCopy(result_520095886, parse_520095785(parser_520094180, location_520094181), NTI520093753);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = F;
    if (lastJSError && (isObj(lastJSError.m_type, NTI520093774))) {
    F.line = 606;
    var pe_520096409 = getCurrentException();
    F.line = 606;
    result_520095886 = nimCopy(result_520095886, handle_error_520095498(parser_520094180, pe_520096409, location_520094181), NTI520093753);
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = F;
    }
    F.line = 608;
    var node_520096410 = result_520095886.Field0;
    if ((node_520096410 == null)) {
    F.line = 610;
    grammar_520095887.farthestFail = location_520094181;
    F.line = 611;
    grammar_520095887.farthestParser = parser_520094180;
    }
    else {
    if (!((node_520096410 == EmptyNode_520093990))) {
    F.line = 613;
    node_520096410.sourcePos = location_520094181;
    }
    }
    if ((grammar_520095887.flags[1] != undefined)) {
    F.line = 616;
    HEX5BHEX5DHEX3D_520096462(parser_520094180.visited, ((location_520094181) | 0), result_520095886);
    if (!(memoization_520096404)) {
    F.line = 617;
    delete grammar_520095887.flags[1];
    }
    
    }
    
  };
  framePtr = F.prev;

  return result_520095886;

}

function initTable_520094685(initialSize_520094688) {
  var result_520094689 = ({data: [], counter: 0});

  var F = {procname: "initTable.initTable", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym6_520094691 = slotsNeeded_1107296298(chckRange(initialSize_520094688, 0, 2147483647));
    F.line = 169;
    result_520094689.counter = 0;
    F.line = 170;
    result_520094689.data = new Array(chckRange(correctSizeHEX60gensym6_520094691, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym6_520094691, 0, 2147483647) ; ++i) { result_520094689.data[i] = {Field0: 0, Field1: 0, Field2: {Field0: null, Field1: 0}}; }  framePtr = F.prev;

  return result_520094689;

}

function init_520094673(parser_520094674, ptype_520094675) {
  var result_520094676 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((!(eqStrings(ptype_520094675, [])) && (ptype_520094675[chckIndx(0, 0, (ptype_520094675).length - 1)] == 58)))) {
    F.line = 211;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(211, 3) `ptype != \"\" and ptype[0] == \':\'` "));
    }
    
    F.line = 212;
    parser_520094674.pname = nimCopy(null, [], NTI33554449);
    F.line = 213;
    parser_520094674.nodeName[0] = [[]]; parser_520094674.nodeName[1] = 0;
    F.line = 214;
    parser_520094674.nodeName[0][parser_520094674.nodeName[1]] = nimCopy(null, ptype_520094675, NTI33554449);
    F.line = 215;
    parser_520094674.ptype = nimCopy(null, ptype_520094675, NTI33554449);
    F.line = 216;
    parser_520094674.flags = nimCopy(parser_520094674.flags, ConstSet3, NTI520093762);
    F.line = 217;
    parser_520094674.uniqueID = 0;
    F.line = 219;
    parser_520094674.grammarVar = GrammarPlaceholder_520094178;
    F.line = 220;
    parser_520094674.symbol = null;
    F.line = 223;
    parser_520094674.call = memoizationWrapper_520094179;
    F.line = 224;
    parser_520094674.visited = nimCopy(parser_520094674.visited, initTable_520094685(32), NTI520093790);
    F.line = 225;
    cleanUp_520094672(parser_520094674);
    F.line = 226;
    result_520094676 = parser_520094674;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094676;

}

function init_520098784(textParser_520098785, text_520098786) {
  var result_520098787 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(((text_520098786).length <= 2147483647))) {
    F.line = 1000;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1000, 3) `text.len <= MaxTextLen` "));
    }
    
    F.line = 1001;
    var _ = init_520094673(textParser_520098785, [58,84,101,120,116]);
    F.line = 1003;
    textParser_520098785.flags[0] = true;
    F.line = 1004;
    textParser_520098785.text = nimCopy(null, text_520098786, NTI33554449);
    F.line = 1005;
    textParser_520098785.slice = nimCopy(textParser_520098785.slice, toStringSlice_520093982(text_520098786), NTI1140850691);
    F.line = 1006;
    textParser_520098785.empty = eqStrings(text_520098786, []);
    F.line = 1007;
    result_520098787 = textParser_520098785;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520098787;

}

function new_520103270() {
  var result_520103273 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520103275 = null;
    F.line = 839;
    r_520103275 = ({m_type: NTI520096857, text: [], slice: {Field0: [null, 0], Field1: 0, Field2: 0}, empty: false, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_520103273 = r_520103275;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520103273;

}

function init_1174405874(node_1174405877, name_1174405878, name_1174405878_Idx, data_1174405879, attributes_1174405880) {
  var result_1174405881 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 28;
    F.filename = "nodetree.nim";
    node_1174405877.nameRef[0] = name_1174405878; node_1174405877.nameRef[1] = name_1174405878_Idx;
    F.line = 43;
    node_1174405877.textSlice = nimCopy(node_1174405877.textSlice, toStringSlice_1174405885(data_1174405879), NTI1140850691);
    F.line = 44;
    node_1174405877.attributesRef = attributes_1174405880;
    F.line = 45;
    node_1174405877.sourcePos = (-1);
    F.line = 46;
    result_1174405881 = node_1174405877;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1174405881;

}

function clone_1174405990(node_1174405991, newName_1174405992, newName_1174405992_Idx) {
    var Temporary1;

  var result_1174405993 = null;

  var F = {procname: "nodetree.clone", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 194;
    F.filename = "nodetree.nim";
    if (((node_1174405991.childrenSeq).length == 0)) {
    Temporary1 = init_1174405874(new_1174405827(), newName_1174405992, newName_1174405992_Idx, node_1174405991.textSlice, null);
    }
    else {
    Temporary1 = init_1174405938(new_1174405827(), newName_1174405992, newName_1174405992_Idx, node_1174405991.childrenSeq, null);
    }
    
    result_1174405993 = Temporary1;
  framePtr = F.prev;

  return result_1174405993;

}

function init_520097724(node_520097727, name_520097728, name_520097728_Idx, data_520097729, attributes_520097730) {
  var result_520097731 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 28;
    F.filename = "nodetree.nim";
    node_520097727.nameRef[0] = name_520097728; node_520097727.nameRef[1] = name_520097728_Idx;
    if (!((data_520097729 == null))) {
    F.line = 37;
    var nonNilData_520097738 = data_520097729;
    F.line = 38;
    node_520097727.childrenSeq = nimCopy(null, [nonNilData_520097738], NTI520094893);
    }
    
    F.line = 40;
    node_520097727.textSlice = nimCopy(node_520097727.textSlice, EmptyStringSlice_1140850747, NTI1140850691);
    F.line = 44;
    node_520097727.attributesRef = attributes_520097730;
    F.line = 45;
    node_520097727.sourcePos = (-1);
    F.line = 46;
    result_520097731 = node_520097727;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097731;

}

function init_520097660(node_520097663, name_520097664, name_520097664_Idx, data_520097665, attributes_520097666) {
  var result_520097667 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 28;
    F.filename = "nodetree.nim";
    node_520097663.nameRef[0] = name_520097664; node_520097663.nameRef[1] = name_520097664_Idx;
    F.line = 43;
    node_520097663.textSlice = nimCopy(node_520097663.textSlice, toStringSlice_520093982(data_520097665), NTI1140850691);
    F.line = 44;
    node_520097663.attributesRef = attributes_520097666;
    F.line = 45;
    node_520097663.sourcePos = (-1);
    F.line = 46;
    result_520097667 = node_520097663;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097667;

}

function returnItemFlatten_520093991(parser_520093992, node_520093993) {
  var result_520097709 = null;

  var F = {procname: "parse.returnItemFlatten", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((node_520093993 == null))) {
    if ((parser_520093992.flags[7] != undefined)) {
    if ((parser_520093992.flags[9] != undefined)) {
    F.line = 676;
    F.filename = "parse.nim";
    result_520097709 = EmptyNode_520093990;
    break BeforeRet;
    }
    
    F.line = 677;
    result_520097709 = node_520093993;
    break BeforeRet;
    }
    
    if ((((node_520093993.nameRef[0][node_520093993.nameRef[1]]).length == 0) || (node_520093993.nameRef[0][node_520093993.nameRef[1]][chckIndx(0, 0, (node_520093993.nameRef[0][node_520093993.nameRef[1]]).length - 1)] == 58))) {
    F.line = 679;
    result_520097709 = clone_1174405990(node_520093993, parser_520093992.nodeName[0], parser_520093992.nodeName[1]);
    break BeforeRet;
    }
    
    F.line = 680;
    result_520097709 = init_520097724(new_1174405827(), parser_520093992.nodeName[0], parser_520093992.nodeName[1], node_520093993, null);
    break BeforeRet;
    }
    else {
    if ((parser_520093992.flags[7] != undefined)) {
    F.line = 682;
    result_520097709 = EmptyNode_520093990;
    break BeforeRet;
    }
    }
    F.line = 683;
    result_520097709 = init_520097660(new_1174405827(), parser_520093992.nodeName[0], parser_520093992.nodeName[1], [], null);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097709;

}

function returnSeqFlatten_520093994(parser_520093995, nodes_520093996) {
  var result_520097760 = null;

  var F = {procname: "parse.returnSeqFlatten", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((parser_520093995.flags[9] != undefined)) {
    F.line = 687;
    F.filename = "parse.nim";
    result_520097760 = EmptyNode_520093990;
    break BeforeRet;
    }
    
    F.line = 688;
    var N_520097768 = (nodes_520093996).length;
    if ((1 < N_520097768)) {
    F.line = 690;
    var res_520097773 = [];
    Label1: {
      F.line = 691;
      var child_520097777 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104034 = 0;
      F.line = 242;
      var L_520104035 = (nodes_520093996).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104034 < L_520104035)) break Label3;
            F.line = 691;
            F.filename = "parse.nim";
            child_520097777 = nodes_520093996[chckIndx(i_520104034, 0, (nodes_520093996).length - 1)];
            F.line = 692;
            var anonymous_520097778 = (((child_520097777.nameRef[0][child_520097777.nameRef[1]]).length == 0) || (child_520097777.nameRef[0][child_520097777.nameRef[1]][chckIndx(0, 0, (child_520097777.nameRef[0][child_520097777.nameRef[1]]).length - 1)] == 58));
            if ((!(((child_520097777.childrenSeq).length == 0)) && anonymous_520097778)) {
            Label4: {
              F.line = 694;
              var item_520097785 = null;
              F.line = 241;
              F.filename = "iterators.nim";
              var i_520104031 = 0;
              F.line = 242;
              var L_520104032 = (child_520097777.childrenSeq).length;
              Label5: {
                F.line = 243;
                  Label6: while (true) {
                  if (!(i_520104031 < L_520104032)) break Label6;
                    F.line = 694;
                    F.filename = "parse.nim";
                    item_520097785 = child_520097777.childrenSeq[chckIndx(i_520104031, 0, (child_520097777.childrenSeq).length - 1)];
                    F.line = 694;
                    res_520097773.push(item_520097785);;
                    F.line = 245;
                    F.filename = "iterators.nim";
                    i_520104031 = addInt(i_520104031, 1);
                    if (!(((child_520097777.childrenSeq).length == L_520104032))) {
                    F.line = 246;
                    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              };
            };
            }
            else {
            if ((!((((child_520097777.childrenSeq).length == 0) && (len_1140850833(child_520097777.textSlice) == 0))) || !(anonymous_520097778))) {
            F.line = 697;
            F.filename = "parse.nim";
            res_520097773.push(child_520097777);;
            }
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104034 = addInt(i_520104034, 1);
            if (!(((nodes_520093996).length == L_520104035))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (((0 < (res_520097773).length) || !((parser_520093995.flags[7] != undefined)))) {
    F.line = 699;
    F.filename = "parse.nim";
    result_520097760 = init_1174405938(new_1174405827(), parser_520093995.nodeName[0], parser_520093995.nodeName[1], res_520097773, null);
    break BeforeRet;
    }
    else {
      F.line = 701;
      result_520097760 = EmptyNode_520093990;
      break BeforeRet;
    }
    
    }
    else {
    if ((N_520097768 == 1)) {
    F.line = 703;
    result_520097760 = parser_520093995.grammarVar.returnItem(parser_520093995, nodes_520093996[chckIndx(0, 0, (nodes_520093996).length - 1)]);
    break BeforeRet;
    }
    }
    if ((parser_520093995.flags[7] != undefined)) {
    F.line = 705;
    result_520097760 = EmptyNode_520093990;
    break BeforeRet;
    }
    
    F.line = 706;
    result_520097760 = init_520097660(new_1174405827(), parser_520093995.nodeName[0], parser_520093995.nodeName[1], [], null);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097760;

}

function collect_descendants_520095120(parser_520095121, selector_520095122, descs_520095123, descs_520095123_Idx) {
  var F = {procname: "parse.collect_descendants", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!((!((parser_520095121.flags[6] != undefined)) || (0 < (parser_520095121.subParsers).length)))) {
    F.line = 331;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(331, 5) `isForward notin parser.flags or parser.subParsers.len > 0` "));
    }
    
    if (!((parser_520095121.flags[10] != undefined))) {
    F.line = 333;
    parser_520095121.flags[10] = true;
    F.line = 334;
    descs_520095123[descs_520095123_Idx].push(parser_520095121);;
    F.line = 335;
    var subIter_520095148 = selector_520095122;
    Label1: {
      F.line = 336;
      var p_520095152 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__520104038 = [];
      F.line = 336;
      F.filename = "parse.nim";
      colontmp__520104038 = subIter_520095148(parser_520095121);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104039 = 0;
      F.line = 242;
      var L_520104040 = (colontmp__520104038).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104039 < L_520104040)) break Label3;
            F.line = 336;
            F.filename = "parse.nim";
            p_520095152 = colontmp__520104038[chckIndx(i_520104039, 0, (colontmp__520104038).length - 1)];
            F.line = 336;
            collect_descendants_520095120(p_520095152, selector_520095122, descs_520095123, descs_520095123_Idx);
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104039 = addInt(i_520104039, 1);
            if (!(((colontmp__520104038).length == L_520104040))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  framePtr = F.prev;

  
}

function descendants_520095168(parser_520095169, selector_520095170) {
  var result_520095171 = [];

  var F = {procname: "parse.descendants", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 340;
    F.filename = "parse.nim";
    var descs_520095176 = [[]];
    F.line = 341;
    collect_descendants_520095120(parser_520095169, selector_520095170, descs_520095176, 0);
    F.line = 342;
    result_520095171 = nimCopy(null, descs_520095176[0], NTI520094579);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095171;

}

function refdSubs_520095087(parser_520095088) {
  var result_520095089 = [];

  var F = {procname: "parse.refdSubs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 321;
    F.filename = "parse.nim";
    result_520095089 = nimCopy(null, refdParsers_520095059(parser_520095088), NTI520094487);
  framePtr = F.prev;

  return result_520095089;

}

function resetTraversalTracker_520095193(parser_520095194) {
  var F = {procname: "parse.resetTraversalTracker", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if ((parser_520095194.flags[10] != undefined)) {
    F.line = 369;
    F.filename = "parse.nim";
    delete parser_520095194.flags[10];
    Label1: {
      F.line = 370;
      var p_520095206 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__520104043 = [];
      F.line = 370;
      F.filename = "parse.nim";
      colontmp__520104043 = refdParsers_520095059(parser_520095194);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104044 = 0;
      F.line = 242;
      var L_520104045 = (colontmp__520104043).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104044 < L_520104045)) break Label3;
            F.line = 370;
            F.filename = "parse.nim";
            p_520095206 = colontmp__520104043[chckIndx(i_520104044, 0, (colontmp__520104043).length - 1)];
            F.line = 370;
            resetTraversalTracker_520095193(p_520095206);
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104044 = addInt(i_520104044, 1);
            if (!(((colontmp__520104043).length == L_520104045))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  framePtr = F.prev;

  
}

function HEX5BHEX5D_1140850806(s_1140850809, x_1140850810) {
  var result_1140850811 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_1140850813 = ((x_1140850810.a) | 0);
    F.line = 84;
    var L_1140850815 = addInt(subInt(((x_1140850810.b) | 0), a_1140850813), 1);
    F.line = 85;
    result_1140850811 = nimCopy(null, mnewString(chckRange(L_1140850815, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_1140850820 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520104048 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520104048 < L_1140850815)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_1140850820 = i_520104048;
            F.line = 86;
            result_1140850811[chckIndx(i_1140850820, 0, (result_1140850811).length - 1)] = s_1140850809[chckIndx(addInt(i_1140850820, a_1140850813), 0, (s_1140850809).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520104048 = addInt(i_520104048, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1140850811;

}

function HEX24_1140850752(str_1140850753) {
  var result_1140850754 = [];

  var F = {procname: "strslice.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((str_1140850753.Field2 < 0)) {
    F.line = 72;
    F.filename = "strslice.nim";
    result_1140850754 = nimCopy(null, [], NTI33554449);
    break BeforeRet;
    }
    
    F.line = 73;
    result_1140850754 = nimCopy(null, HEX5BHEX5D_1140850806(str_1140850753.Field0[0][str_1140850753.Field0[1]], HEX2EHEX2E_1140850755(str_1140850753.Field1, str_1140850753.Field2)), NTI33554449);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1140850754;

}

function replace_1140851086(slice_1140851087, pattern_1140851088, replacement_1140851089) {
  var result_1140851090 = null;

  var F = {procname: "strslice.replace", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 259;
    F.filename = "strslice.nim";
    result_1140851090 = toJSStr(HEX24_1140850752(slice_1140851087)).replace(pattern_1140851088.Field1, toJSStr(replacement_1140851089));
  framePtr = F.prev;

  return result_1140851090;

}

function name_520094768(parser_520094769) {
    var Temporary1;

  var result_520094770 = [];

  var F = {procname: "parse.name", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 238;
    F.filename = "parse.nim";
    if (((parser_520094769.flags[6] != undefined) && (0 < (parser_520094769.subParsers).length))) {
    Temporary1 = parser_520094769.subParsers[chckIndx(0, 0, (parser_520094769.subParsers).length - 1)].pname;
    }
    else {
    Temporary1 = parser_520094769.pname;
    }
    
    result_520094770 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_520094770;

}

function HEX28HEX29_520103311(parser_520103313, document_520103314, location_520103315) {
  var result_520103316 = {Field0: null, Field1: []};

  var F = {procname: "().()", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((parser_520103313.grammarVar == GrammarPlaceholder_520094178)) {
    F.line = 642;
    F.filename = "parse.nim";
    grammarHEX3D_520095261(parser_520103313, init_520094065(new_520094139(), [97,100,104,111,99], ConstSet16, toStringSlice_520093982(document_520103314), returnItemFlatten_520093991, returnSeqFlatten_520093994));
    }
    else {
      F.line = 644;
      grammar_520095212(parser_520103313).document = nimCopy(grammar_520095212(parser_520103313).document, toStringSlice_520093982(document_520103314), NTI1140850691);
      F.line = 645;
      cleanUp_520094003(grammar_520095212(parser_520103313));
    }
    
    F.line = 646;
    grammar_520095212(parser_520103313).root = parser_520103313;
    Label1: {
      F.line = 647;
      var p_520103333 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__520104022 = [];
      F.line = 376;
      F.filename = "parse.nim";
      colontmp__520104022 = descendants_520095168(parser_520103313, refdSubs_520095087);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104023 = 0;
      F.line = 242;
      var L_520104024 = (colontmp__520104022).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104023 < L_520104024)) break Label3;
            F.line = 376;
            F.filename = "parse.nim";
            p_520103333 = colontmp__520104022[chckIndx(i_520104023, 0, (colontmp__520104022).length - 1)];
            F.line = 376;
            cleanUp_520094672(p_520103333);
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104023 = addInt(i_520104023, 1);
            if (!(((colontmp__520104022).length == L_520104024))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 378;
    F.filename = "parse.nim";
    resetTraversalTracker_520095193(parser_520103313);
    F.line = 649;
    var tmpTuple_520103334 = parser_520103313.call(parser_520103313, location_520103315);
    F.line = 649;
    var root_520103335 = tmpTuple_520103334["Field0"];
    F.line = 649;
    var loc_520103336 = tmpTuple_520103334["Field1"];
    if (((root_520103335 == null) || (loc_520103336 < (((document_520103314).length) | 0)))) {
    F.line = 651;
    var snippet_520103348 = cstrToNimstr(replace_1140851086(cut_1140850849(grammar_520095212(parser_520103313).document, HEX2EHEX2E_1140850755(loc_520103336, addInt(loc_520103336, 9))), ure_520093736([92,110]), [92,110]));
    F.line = 652;
    Label4: {
      F.line = 652;
      var fmtRes_520103353 = [mnewString(0)];
      F.line = 652;
      fmtRes_520103353[0].push.apply(fmtRes_520103353[0], [80,97,114,115,101,114,32]);;
      F.line = 652;
      formatValue_922747051(fmtRes_520103353, 0, name_520094768(parser_520103313), []);
      F.line = 652;
      fmtRes_520103353[0].push.apply(fmtRes_520103353[0], [32,115,116,111,112,112,101,100,32,98,101,102,111,114,101,32,101,110,100,32,97,116,32,194,187]);;
      F.line = 652;
      formatValue_922747051(fmtRes_520103353, 0, snippet_520103348, []);
      F.line = 652;
      fmtRes_520103353[0].push.apply(fmtRes_520103353[0], [194,171]);;
    };
    var msg_520103354 = nimCopy(null, fmtRes_520103353[0], NTI33554449);
    F.line = 653;
    grammar_520095212(parser_520103313).errors.push(init_1224736792(new_520095367(), msg_520103354, loc_520103336, 1040, (-1), (-1), (-1), [], (-1), []));;
    }
    
    F.line = 654;
    var colontmp__520104027 = root_520103335;
    F.line = 654;
    var colontmp__520104028 = nimCopy(null, grammar_520095212(parser_520103313).errors, NTI520093773);
    F.line = 654;
    result_520103316 = nimCopy(result_520103316, {Field0: colontmp__520104027, Field1: nimCopy(null, colontmp__520104028, NTI520093773)}, NTI520093754);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520103316;

}

function nsuJoinSep(a_1006634539, sep_1006634540) {
  var result_1006634541 = [];

  var F = {procname: "strutils.join", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    if ((0 < (a_1006634539).length)) {
    F.line = 1845;
    F.filename = "strutils.nim";
    var L_1006634548 = mulInt((sep_1006634540).length, subInt((a_1006634539).length, 1));
    Label1: {
      F.line = 1846;
      var i_1006634556 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520104051 = 0;
      F.line = 1846;
      F.filename = "strutils.nim";
      colontmp__520104051 = (a_1006634539).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520104052 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_520104052 <= colontmp__520104051)) break Label3;
            F.line = 1846;
            F.filename = "strutils.nim";
            i_1006634556 = res_520104052;
            F.line = 1846;
            L_1006634548 = addInt(L_1006634548, (a_1006634539[chckIndx(i_1006634556, 0, (a_1006634539).length - 1)]).length);
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520104052 = addInt(res_520104052, 1);
          }
      };
    };
    F.line = 1847;
    F.filename = "strutils.nim";
    result_1006634541 = nimCopy(null, mnewString(0), NTI33554449);
    F.line = 1848;
    result_1006634541.push.apply(result_1006634541, a_1006634539[chckIndx(0, 0, (a_1006634539).length - 1)]);;
    Label4: {
      F.line = 1849;
      var i_1006634569 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520104055 = 0;
      F.line = 1849;
      F.filename = "strutils.nim";
      colontmp__520104055 = (a_1006634539).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520104056 = 1;
      Label5: {
        F.line = 91;
          Label6: while (true) {
          if (!(res_520104056 <= colontmp__520104055)) break Label6;
            F.line = 1849;
            F.filename = "strutils.nim";
            i_1006634569 = res_520104056;
            F.line = 1849;
            result_1006634541.push.apply(result_1006634541, sep_1006634540);;
            F.line = 1849;
            result_1006634541.push.apply(result_1006634541, a_1006634539[chckIndx(i_1006634569, 0, (a_1006634539).length - 1)]);;
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520104056 = addInt(res_520104056, 1);
          }
      };
    };
    }
    else {
      F.line = 1853;
      F.filename = "strutils.nim";
      result_1006634541 = nimCopy(null, [], NTI33554449);
    }
    
  framePtr = F.prev;

  return result_1006634541;

}

function newSeq_503317028(len_503317030) {
  var result_503317031 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 631;
    F.filename = "system.nim";
    result_503317031 = new Array(len_503317030); for (var i = 0 ; i < len_503317030 ; ++i) { result_503317031[i] = []; }  framePtr = F.prev;

  return result_503317031;

}

function nsuEndsWith(s_1006634434, suffix_1006634435) {
  var result_1006634436 = false;

  var F = {procname: "strutils.endsWith", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 65;
    F.filename = "strimpl.nim";
    var suffixLenHEX60gensym153_1006634442 = (suffix_1006634435).length;
    F.line = 66;
    var sLenHEX60gensym153_1006634443 = (s_1006634434).length;
    F.line = 67;
    var iHEX60gensym153_1006634444 = 0;
    F.line = 68;
    var jHEX60gensym153_1006634445 = subInt(sLenHEX60gensym153_1006634443, suffixLenHEX60gensym153_1006634442);
    Label1: {
      F.line = 69;
        Label2: while (true) {
        if (!((0 <= addInt(iHEX60gensym153_1006634444, jHEX60gensym153_1006634445)) && (addInt(iHEX60gensym153_1006634444, jHEX60gensym153_1006634445) < sLenHEX60gensym153_1006634443))) break Label2;
          if (!((s_1006634434[chckIndx(addInt(iHEX60gensym153_1006634444, jHEX60gensym153_1006634445), 0, (s_1006634434).length - 1)] == suffix_1006634435[chckIndx(iHEX60gensym153_1006634444, 0, (suffix_1006634435).length - 1)]))) {
          F.line = 70;
          result_1006634436 = false;
          break BeforeRet;
          }
          
          F.line = 71;
          iHEX60gensym153_1006634444 = addInt(iHEX60gensym153_1006634444, 1);
        }
    };
    if ((suffixLenHEX60gensym153_1006634442 <= iHEX60gensym153_1006634444)) {
    F.line = 72;
    result_1006634436 = true;
    break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_1006634436;

}

function nsuStartsWith(s_1006634414, prefix_1006634415) {
  var result_1006634416 = false;

  var F = {procname: "strutils.startsWith", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 56;
    F.filename = "strimpl.nim";
    var prefixLenHEX60gensym146_1006634421 = (prefix_1006634415).length;
    F.line = 57;
    var sLenHEX60gensym146_1006634422 = (s_1006634414).length;
    F.line = 58;
    var iHEX60gensym146_1006634423 = 0;
    Label1: {
      F.line = 1624;
      F.filename = "strutils.nim";
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym146_1006634421 <= iHEX60gensym146_1006634423)) {
          F.line = 60;
          F.filename = "strimpl.nim";
          result_1006634416 = true;
          break BeforeRet;
          }
          
          if (((sLenHEX60gensym146_1006634422 <= iHEX60gensym146_1006634423) || !((s_1006634414[chckIndx(iHEX60gensym146_1006634423, 0, (s_1006634414).length - 1)] == prefix_1006634415[chckIndx(iHEX60gensym146_1006634423, 0, (prefix_1006634415).length - 1)])))) {
          F.line = 61;
          result_1006634416 = false;
          break BeforeRet;
          }
          
          F.line = 62;
          iHEX60gensym146_1006634423 = addInt(iHEX60gensym146_1006634423, 1);
        }
    };
  };
  framePtr = F.prev;

  return result_1006634416;

}

function substr_33558078(s_33558079, first_33558080, last_33558081) {
  var result_33558082 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2658;
    F.filename = "system.nim";
    var first_33558083 = nimMax(first_33558080, 0);
    F.line = 2659;
    var L_33558084 = nimMax(addInt(subInt(nimMin(last_33558081, (s_33558079).length - 1), first_33558083), 1), 0);
    F.line = 2660;
    result_33558082 = nimCopy(null, mnewString(chckRange(L_33558084, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 2661;
      var i_33558089 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520104081 = 0;
      F.line = 2661;
      F.filename = "system.nim";
      colontmp__520104081 = subInt(L_33558084, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520104082 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_520104082 <= colontmp__520104081)) break Label3;
            F.line = 2661;
            F.filename = "system.nim";
            i_33558089 = res_520104082;
            F.line = 2661;
            result_33558082[chckIndx(i_33558089, 0, (result_33558082).length - 1)] = s_33558079[chckIndx(addInt(i_33558089, first_33558083), 0, (s_33558079).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520104082 = addInt(res_520104082, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_33558082;

}

function nsuIndent(s_1006634188, count_1006634189, padding_1006634190) {
            var Temporary6;

  var result_1006634191 = [];

  var F = {procname: "strutils.indent", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1463;
    F.filename = "strutils.nim";
    result_1006634191 = nimCopy(null, [], NTI33554449);
    F.line = 1464;
    var i_1006634192 = 0;
    Label1: {
      F.line = 1465;
      var line_1006634193 = [];
      F.line = 669;
      var first_520104075 = 0;
      F.line = 670;
      var last_520104076 = 0;
      F.line = 671;
      var eolpos_520104077 = 0;
      Label2: {
        F.line = 672;
          Label3: while (true) {
          if (!true) break Label3;
            Label4: {
              F.line = 673;
                Label5: while (true) {
                if (!((last_520104076 < (s_1006634188).length) && !((ConstSet17[s_1006634188[chckIndx(last_520104076, 0, (s_1006634188).length - 1)]] != undefined)))) break Label5;
                  F.line = 673;
                  last_520104076 = addInt(last_520104076, 1);
                }
            };
            F.line = 675;
            eolpos_520104077 = last_520104076;
            if ((last_520104076 < (s_1006634188).length)) {
            if ((s_1006634188[chckIndx(last_520104076, 0, (s_1006634188).length - 1)] == 10)) {
            F.line = 677;
            last_520104076 = addInt(last_520104076, 1);
            }
            else {
            if ((s_1006634188[chckIndx(last_520104076, 0, (s_1006634188).length - 1)] == 13)) {
            F.line = 679;
            last_520104076 = addInt(last_520104076, 1);
            if (((last_520104076 < (s_1006634188).length) && (s_1006634188[chckIndx(last_520104076, 0, (s_1006634188).length - 1)] == 10))) {
            F.line = 680;
            last_520104076 = addInt(last_520104076, 1);
            }
            
            }
            }
            }
            
            F.line = 1465;
            if (false) {
            Temporary6 = subInt(last_520104076, 1);
            }
            else {
            Temporary6 = subInt(eolpos_520104077, 1);
            }
            
            line_1006634193 = substr_33558078(s_1006634188, first_520104075, Temporary6);
            if (!((i_1006634192 == 0))) {
            F.line = 1467;
            result_1006634191.push.apply(result_1006634191, [10]);;
            }
            
            Label7: {
              F.line = 1468;
              var j_1006634198 = 0;
              F.line = 75;
              F.filename = "iterators_1.nim";
              var colontmp__520104070 = 0;
              F.line = 1468;
              F.filename = "strutils.nim";
              colontmp__520104070 = count_1006634189;
              F.line = 90;
              F.filename = "iterators_1.nim";
              var res_520104071 = 1;
              Label8: {
                F.line = 91;
                  Label9: while (true) {
                  if (!(res_520104071 <= colontmp__520104070)) break Label9;
                    F.line = 1468;
                    F.filename = "strutils.nim";
                    j_1006634198 = res_520104071;
                    F.line = 1468;
                    result_1006634191.push.apply(result_1006634191, padding_1006634190);;
                    F.line = 93;
                    F.filename = "iterators_1.nim";
                    res_520104071 = addInt(res_520104071, 1);
                  }
              };
            };
            F.line = 1465;
            F.filename = "strutils.nim";
            result_1006634191.push.apply(result_1006634191, line_1006634193);;
            F.line = 1465;
            i_1006634192 = addInt(i_1006634192, 1);
            if ((eolpos_520104077 == last_520104076)) {
            F.line = 686;
            break Label2;
            }
            
            F.line = 688;
            first_520104075 = last_520104076;
          }
      };
    };
  framePtr = F.prev;

  return result_1006634191;

}

function HEX5BHEX5D_1174406136(s_1174406138, i_1174406139) {
  var result_1174406140 = null;
  var result_1174406140_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_1174406140 = s_1174406138; result_1174406140_Idx = chckIndx(subInt((s_1174406138).length, i_1174406139), 0, (s_1174406138).length - 1);
  framePtr = F.prev;

  return [result_1174406140, result_1174406140_Idx];

}

function delete_1174406160(x_1174406162, x_1174406162_Idx, i_1174406163) {
  var F = {procname: "delete.delete", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1966;
    F.filename = "system.nim";
    x_1174406162[x_1174406162_Idx].splice(i_1174406163, 1);
  framePtr = F.prev;

  
}

function concat_1174406191(seqs_1174406193) {
  var result_1174406194 = [];

  var F = {procname: "concat.concat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sequtils.nim", line: 0};
  framePtr = F;
    F.line = 134;
    F.filename = "sequtils.nim";
    var L_1174406195 = 0;
    Label1: {
      F.line = 135;
      var seqitm_1174406209 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_520104091 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_520104091 < (seqs_1174406193).length)) break Label3;
            F.line = 135;
            F.filename = "sequtils.nim";
            seqitm_1174406209 = seqs_1174406193[chckIndx(i_520104091, 0, (seqs_1174406193).length - 1)];
            F.line = 135;
            L_1174406195 = addInt(L_1174406195, (seqitm_1174406209).length);
            F.line = 16;
            F.filename = "iterators.nim";
            i_520104091 = addInt(i_520104091, 1);
          }
      };
    };
    F.line = 136;
    F.filename = "sequtils.nim";
    result_1174406194 = new Array(chckRange(L_1174406195, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1174406195, 0, 2147483647) ; ++i) { result_1174406194[i] = []; }    F.line = 137;
    var i_1174406222 = 0;
    Label4: {
      F.line = 138;
      var s_1174406226 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_520104099 = 0;
      Label5: {
        F.line = 14;
          Label6: while (true) {
          if (!(i_520104099 < (seqs_1174406193).length)) break Label6;
            F.line = 138;
            F.filename = "sequtils.nim";
            s_1174406226 = seqs_1174406193[chckIndx(i_520104099, 0, (seqs_1174406193).length - 1)];
            Label7: {
              F.line = 139;
              var itm_1174406248 = [];
              F.line = 241;
              F.filename = "iterators.nim";
              var i_520104096 = 0;
              F.line = 242;
              var L_520104097 = (s_1174406226).length;
              Label8: {
                F.line = 243;
                  Label9: while (true) {
                  if (!(i_520104096 < L_520104097)) break Label9;
                    F.line = 139;
                    F.filename = "sequtils.nim";
                    itm_1174406248 = s_1174406226[chckIndx(i_520104096, 0, (s_1174406226).length - 1)];
                    F.line = 140;
                    result_1174406194[chckIndx(i_1174406222, 0, (result_1174406194).length - 1)] = nimCopy(null, itm_1174406248, NTI33554449);
                    F.line = 139;
                    i_1174406222 = addInt(i_1174406222, 1);
                    F.line = 245;
                    F.filename = "iterators.nim";
                    i_520104096 = addInt(i_520104096, 1);
                    if (!(((s_1174406226).length == L_520104097))) {
                    F.line = 246;
                    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              };
            };
            F.line = 16;
            i_520104099 = addInt(i_520104099, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1174406194;

}

function serialize_1174406018(node_1174406019, opening_1174406022, closing_1174406023, leafdata_1174406026, ind_1174406027) {
    var Temporary1;
    var Temporary3;
      var Temporary8;
      var Temporary12;
        var Temporary14;

  var result_1174406028 = [];

  var F = {procname: "nodetree.serialize", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 204;
    F.filename = "nodetree.nim";
    result_1174406028 = nimCopy(null, newSeq_503317028(0), NTI503316800);
    F.line = 205;
    var open_1174406036 = opening_1174406022(node_1174406019);
    F.line = 206;
    var close_1174406037 = closing_1174406023(node_1174406019);
    F.line = 207;
    var openLF_1174406038 = nsuEndsWith(open_1174406036, [10]);
    F.line = 208;
    var closeLF_1174406039 = nsuStartsWith(close_1174406037, [10]);
    if ((0 < ind_1174406027)) {
    F.line = 210;
    if (openLF_1174406038) {
    Temporary1 = nsuIndent(HEX5BHEX5D_1006634267(open_1174406036, HEX2EHEX2E_1040187496(0, 2)), chckRange(ind_1174406027, 0, 2147483647), [32]);
    }
    else {
    Temporary1 = nsuIndent(open_1174406036, chckRange(ind_1174406027, 0, 2147483647), [32]);
    }
    
    open_1174406036 = nimCopy(null, Temporary1, NTI33554449);
    if (closeLF_1174406039) {
    F.line = 211;
    close_1174406037 = nimCopy(null, nsuIndent(HEX5BHEX5D_1006634267(close_1174406037, HEX2EHEX2E_1040187496(1, 1)), chckRange(ind_1174406027, 0, 2147483647), [32]), NTI33554449);
    }
    
    }
    else {
      if (openLF_1174406038) {
      F.line = 213;
      open_1174406036 = nimCopy(null, HEX5BHEX5D_1006634267(open_1174406036, HEX2EHEX2E_1040187496(0, 2)), NTI33554449);
      }
      
      if (closeLF_1174406039) {
      F.line = 214;
      close_1174406037 = nimCopy(null, HEX5BHEX5D_1006634267(close_1174406037, HEX2EHEX2E_1040187496(1, 1)), NTI33554449);
      }
      
    }
    
    F.line = 215;
    var Temporary2 = nimCopy(null, open_1174406036, NTI33554449);
    result_1174406028.push(Temporary2);;
    if (((node_1174406019.childrenSeq).length == 0)) {
    F.line = 218;
    var lines_1174406132 = [leafdata_1174406026(node_1174406019)];
    if ((!(openLF_1174406038) && (0 < (lines_1174406132[0]).length))) {
    F.line = 220;
    (Temporary3 = HEX5BHEX5D_1174406136(result_1174406028, 1), Temporary3)[0][Temporary3[1]].push.apply(Temporary3[0][Temporary3[1]], lines_1174406132[0][chckIndx(0, 0, (lines_1174406132[0]).length - 1)]);;
    F.line = 221;
    delete_1174406160(lines_1174406132, 0, 0);
    }
    
    Label4: {
      F.line = 222;
      var i_1174406190 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__520104059 = 0;
      F.line = 222;
      F.filename = "nodetree.nim";
      colontmp__520104059 = subInt((lines_1174406132[0]).length, 1);
      F.line = 65;
      F.filename = "iterators_1.nim";
      var res_520104060 = 0;
      Label5: {
        F.line = 66;
          Label6: while (true) {
          if (!(res_520104060 <= colontmp__520104059)) break Label6;
            F.line = 222;
            F.filename = "nodetree.nim";
            i_1174406190 = res_520104060;
            F.line = 222;
            lines_1174406132[0][chckIndx(i_1174406190, 0, (lines_1174406132[0]).length - 1)] = nimCopy(null, nsuIndent(lines_1174406132[0][chckIndx(i_1174406190, 0, (lines_1174406132[0]).length - 1)], chckRange(addInt(ind_1174406027, 2), 0, 2147483647), [32]), NTI33554449);
            F.line = 68;
            F.filename = "iterators_1.nim";
            res_520104060 = addInt(res_520104060, 1);
          }
      };
    };
    F.line = 224;
    F.filename = "nodetree.nim";
    result_1174406028 = nimCopy(null, concat_1174406191([nimCopy(null, result_1174406028, NTI1174405819), nimCopy(null, lines_1174406132[0], NTI1174405824)]), NTI1174405830);
    if (closeLF_1174406039) {
    F.line = 226;
    var Temporary7 = nimCopy(null, close_1174406037, NTI33554449);
    result_1174406028.push(Temporary7);;
    }
    else {
      F.line = 228;
    (Temporary8 = HEX5BHEX5D_1174406136(result_1174406028, 1), Temporary8)[0][Temporary8[1]].push.apply(Temporary8[0][Temporary8[1]], close_1174406037);;
    }
    
    }
    else {
      F.line = 231;
      F.line = 231;
      var collectResult_1174406282 = [];
      Label9: {
        F.line = 232;
        var child_1174406316 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520104063 = 0;
        F.line = 242;
        var L_520104064 = (node_1174406019.childrenSeq).length;
        Label10: {
          F.line = 243;
            Label11: while (true) {
            if (!(i_520104063 < L_520104064)) break Label11;
              F.line = 232;
              F.filename = "nodetree.nim";
              child_1174406316 = node_1174406019.childrenSeq[chckIndx(i_520104063, 0, (node_1174406019.childrenSeq).length - 1)];
              F.line = 232;
              collectResult_1174406282.push(serialize_1174406018(child_1174406316, opening_1174406022, closing_1174406023, leafdata_1174406026, addInt(ind_1174406027, 2)));;
              F.line = 245;
              F.filename = "iterators.nim";
              i_520104063 = addInt(i_520104063, 1);
              if (!(((node_1174406019.childrenSeq).length == L_520104064))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      var childBlocks_1174406321 = [nimCopy(null, collectResult_1174406282, NTI1174405907)];
      if ((!(openLF_1174406038) && (0 < (childBlocks_1174406321[0][chckIndx(0, 0, (childBlocks_1174406321[0]).length - 1)][chckIndx(0, 0, (childBlocks_1174406321[0][chckIndx(0, 0, (childBlocks_1174406321[0]).length - 1)]).length - 1)]).length))) {
      F.line = 235;
      F.filename = "nodetree.nim";
      (Temporary12 = HEX5BHEX5D_1174406136(result_1174406028, 1), Temporary12)[0][Temporary12[1]].push.apply(Temporary12[0][Temporary12[1]], childBlocks_1174406321[0][chckIndx(0, 0, (childBlocks_1174406321[0]).length - 1)][chckIndx(0, 0, (childBlocks_1174406321[0][chckIndx(0, 0, (childBlocks_1174406321[0]).length - 1)]).length - 1)]);;
      F.line = 236;
      delete_1174406160(childBlocks_1174406321[0], chckIndx(0, 0, (childBlocks_1174406321[0]).length - 1), 0);
      }
      
      F.line = 237;
      result_1174406028 = nimCopy(null, concat_1174406191([nimCopy(null, result_1174406028, NTI1174405931), concat_1174406191(childBlocks_1174406321[0])]), NTI1174405830);
      if (closeLF_1174406039) {
      F.line = 239;
      var Temporary13 = nimCopy(null, close_1174406037, NTI33554449);
      result_1174406028.push(Temporary13);;
      }
      else {
        F.line = 241;
      (Temporary14 = HEX5BHEX5D_1174406136(result_1174406028, 1), Temporary14)[0][Temporary14[1]].push.apply(Temporary14[0][Temporary14[1]], close_1174406037);;
      }
      
    }
    
  framePtr = F.prev;

  return result_1174406028;

}

function len_1174406448(t_1174406451) {
  var result_1174406452 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 1513;
    F.filename = "tables.nim";
    result_1174406452 = t_1174406451.counter;
  framePtr = F.prev;

  return result_1174406452;

}

function attr_1174405308(node_1174405309) {
  var result_1174405310 = ({data: [], counter: 0, first: 0, last: 0});

  var F = {procname: "nodetree.attr", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((node_1174405309.attributesRef == null)) {
    F.line = 125;
    F.filename = "nodetree.nim";
    node_1174405309.attributesRef = ({data: [], counter: 0, first: 0, last: 0});
    }
    
    F.line = 126;
    result_1174405310 = node_1174405309.attributesRef;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1174405310;

}

function content_1174405182(node_1174405183) {
  var result_1174405184 = [];

  var F = {procname: "nodetree.content", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((node_1174405183.childrenSeq).length == 0)) {
    F.line = 77;
    F.filename = "nodetree.nim";
    result_1174405184 = nimCopy(null, HEX24_1140850752(node_1174405183.textSlice), NTI33554449);
    break BeforeRet;
    }
    else {
      F.line = 79;
      result_1174405184 = nimCopy(null, [], NTI33554449);
      Label1: {
        F.line = 80;
        var child_1174405210 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520104115 = 0;
        F.line = 242;
        var L_520104116 = (node_1174405183.childrenSeq).length;
        Label2: {
          F.line = 243;
            Label3: while (true) {
            if (!(i_520104115 < L_520104116)) break Label3;
              F.line = 80;
              F.filename = "nodetree.nim";
              child_1174405210 = node_1174405183.childrenSeq[chckIndx(i_520104115, 0, (node_1174405183.childrenSeq).length - 1)];
              F.line = 80;
              result_1174405184.push.apply(result_1174405184, content_1174405182(child_1174405210));;
              F.line = 245;
              F.filename = "iterators.nim";
              i_520104115 = addInt(i_520104115, 1);
              if (!(((node_1174405183.childrenSeq).length == L_520104116))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
  };
  framePtr = F.prev;

  return result_1174405184;

}

function substr_33558090(s_33558091, first_33558092) {
  var result_33558093 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2665;
    F.filename = "system.nim";
    result_33558093 = nimCopy(null, substr_33558078(s_33558091, first_33558092, (s_33558091).length - 1), NTI33554449);
  framePtr = F.prev;

  return result_33558093;

}

function nsuReplaceStr(s_1006634832, sub_1006634833, by_1006634834) {
  var result_1006634835 = [];

  var F = {procname: "strutils.replace", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2180;
    F.filename = "strutils.nim";
    result_1006634835 = nimCopy(null, [], NTI33554449);
    F.line = 2181;
    var subLen_1006634836 = (sub_1006634833).length;
    if ((subLen_1006634836 == 0)) {
    F.line = 2183;
    result_1006634835 = nimCopy(null, s_1006634832, NTI33554449);
    }
    else {
    if ((subLen_1006634836 == 1)) {
    F.line = 2187;
    var c_1006634837 = sub_1006634833[chckIndx(0, 0, (sub_1006634833).length - 1)];
    F.line = 2188;
    var last_1006634838 = (s_1006634832).length - 1;
    F.line = 2189;
    var i_1006634839 = 0;
    Label1: {
      F.line = 2190;
        Label2: while (true) {
        if (!true) break Label2;
          F.line = 2191;
          var j_1006634840 = nsuFindChar(s_1006634832, c_1006634837, chckRange(i_1006634839, 0, 2147483647), last_1006634838);
          if ((j_1006634840 < 0)) {
          F.line = 2192;
          break Label1;
          }
          
          F.line = 2193;
          result_1006634835.push.apply(result_1006634835, substr_33558078(s_1006634832, i_1006634839, subInt(j_1006634840, 1)));;
          F.line = 2194;
          result_1006634835.push.apply(result_1006634835, by_1006634834);;
          F.line = 2195;
          i_1006634839 = addInt(j_1006634840, subLen_1006634836);
        }
    };
    F.line = 2197;
    result_1006634835.push.apply(result_1006634835, substr_33558090(s_1006634832, i_1006634839));;
    }
    else {
      F.line = 2199;
      var a_1006634841 = nsuInitNewSkipTable(sub_1006634833);
      F.line = 2200;
      var last_1006634842 = (s_1006634832).length - 1;
      F.line = 2201;
      var i_1006634843 = 0;
      Label3: {
        F.line = 2202;
          Label4: while (true) {
          if (!true) break Label4;
            F.line = 2203;
            var j_1006634844 = nsuFindStrA(a_1006634841, s_1006634832, sub_1006634833, chckRange(i_1006634843, 0, 2147483647), last_1006634842);
            if ((j_1006634844 < 0)) {
            F.line = 2204;
            break Label3;
            }
            
            F.line = 2205;
            result_1006634835.push.apply(result_1006634835, substr_33558078(s_1006634832, i_1006634843, subInt(j_1006634844, 1)));;
            F.line = 2206;
            result_1006634835.push.apply(result_1006634835, by_1006634834);;
            F.line = 2207;
            i_1006634843 = addInt(j_1006634844, subLen_1006634836);
          }
      };
      F.line = 2209;
      result_1006634835.push.apply(result_1006634835, substr_33558090(s_1006634832, i_1006634843));;
    }
    }
  framePtr = F.prev;

  return result_1006634835;

}

function asSxpr_1174405705(node_1174405706) {

function renderAttrs_1174406394(node_1174406395) {
  var result_1174406396 = [];

  var F = {procname: "asSxpr.renderAttrs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 247;
    F.filename = "nodetree.nim";
    F.line = 247;
    var attrStrs_1174406453 = newSeq_503317028(chckRange(len_1174406448(attr_1174405308(node_1174406395)), 0, 2147483647));
    Label1: {
      F.line = 249;
      var i_1174406471 = (-1);
      Label2: {
        F.line = 248;
        var attr_1174406809 = [];
        F.line = 248;
        var value_1174406810 = [];
        F.line = 1695;
        F.filename = "tables.nim";
        var colontmp__520104107 = ({data: [], counter: 0, first: 0, last: 0});
        F.line = 248;
        F.filename = "nodetree.nim";
        colontmp__520104107 = nimCopy(colontmp__520104107, attr_1174405308(node_1174406395), NTI1174405135);
        F.line = 1721;
        F.filename = "tables.nim";
        var L_520104109 = len_1174406448(colontmp__520104107);
        if ((0 < colontmp__520104107.counter)) {
        F.line = 1303;
        var h_520104110 = colontmp__520104107.first;
        Label3: {
          F.line = 1304;
            Label4: while (true) {
            if (!(0 <= h_520104110)) break Label4;
              F.line = 1305;
              var nxt_520104112 = colontmp__520104107.data[chckIndx(h_520104110, 0, (colontmp__520104107.data).length - 1)].Field1;
              if (isFilled_1107296287(colontmp__520104107.data[chckIndx(h_520104110, 0, (colontmp__520104107.data).length - 1)].Field0)) {
              F.line = 249;
              F.filename = "nodetree.nim";
              attr_1174406809 = colontmp__520104107.data[chckIndx(h_520104110, 0, (colontmp__520104107.data).length - 1)].Field2;
              F.line = 249;
              value_1174406810 = colontmp__520104107.data[chckIndx(h_520104110, 0, (colontmp__520104107.data).length - 1)].Field3;
              F.line = 249;
              i_1174406471 = addInt(i_1174406471, 1);
              F.line = 249;
              Label5: {
                F.line = 249;
                var fmtRes_1174406824 = [mnewString(0)];
                F.line = 249;
                fmtRes_1174406824[0].push.apply(fmtRes_1174406824[0], [96,40]);;
                F.line = 249;
                formatValue_922747051(fmtRes_1174406824, 0, attr_1174406809, []);
                F.line = 249;
                fmtRes_1174406824[0].push.apply(fmtRes_1174406824[0], [32,34]);;
                F.line = 249;
                formatValue_922747051(fmtRes_1174406824, 0, value_1174406810, []);
                F.line = 249;
                fmtRes_1174406824[0].push.apply(fmtRes_1174406824[0], [34,41]);;
              };
              attrStrs_1174406453[chckIndx(i_1174406471, 0, (attrStrs_1174406453).length - 1)] = nimCopy(null, fmtRes_1174406824[0], NTI33554449);
              if (!((len_1174406448(colontmp__520104107) == L_520104109))) {
              F.line = 1724;
              F.filename = "tables.nim";
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim(1724, 11) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 1308;
              h_520104110 = nxt_520104112;
            }
        };
        }
        
      };
    };
    result_1174406396 = nimCopy(null, nsuJoinSep(attrStrs_1174406453, [32]), NTI33554449);
  framePtr = F.prev;

  return result_1174406396;

}
      
function opening_1174406830(node_1174406831) {
          var Temporary1;
          var Temporary2;

        var result_1174406832 = [];

        var F = {procname: "asSxpr.opening", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
          F.line = 253;
          F.filename = "nodetree.nim";
          if ((len_1174406448(attr_1174405308(node_1174406831)) == 0)) {
          if ((((node_1174406831.childrenSeq).length == 0) && (runeLen_1174405679(node_1174406831) < 60))) {
          Label3: {
            F.line = 255;
            var fmtRes_1174406888 = [mnewString(0)];
            F.line = 255;
            fmtRes_1174406888[0].push.apply(fmtRes_1174406888[0], [40]);;
            F.line = 255;
            formatValue_922747051(fmtRes_1174406888, 0, node_1174406831.nameRef[0][node_1174406831.nameRef[1]], []);
            F.line = 255;
            fmtRes_1174406888[0].push.apply(fmtRes_1174406888[0], [32]);;
          };
          Temporary2 = fmtRes_1174406888[0];
          }
          else {
            Label4: {
              F.line = 257;
              var fmtRes_1174406893 = [mnewString(0)];
              F.line = 257;
              fmtRes_1174406893[0].push.apply(fmtRes_1174406893[0], [40]);;
              F.line = 257;
              formatValue_922747051(fmtRes_1174406893, 0, node_1174406831.nameRef[0][node_1174406831.nameRef[1]], []);
              F.line = 649;
              F.filename = "strformat.nim";
              addChar(fmtRes_1174406893[0], 10);;
            };
          Temporary2 = fmtRes_1174406893[0];
          }
          
          Temporary1 = Temporary2;
          }
          else {
            Label5: {
              F.line = 259;
              F.filename = "nodetree.nim";
              var fmtRes_1174406898 = [mnewString(0)];
              F.line = 259;
              fmtRes_1174406898[0].push.apply(fmtRes_1174406898[0], [40]);;
              F.line = 259;
              formatValue_922747051(fmtRes_1174406898, 0, node_1174406831.nameRef[0][node_1174406831.nameRef[1]], []);
              F.line = 259;
              fmtRes_1174406898[0].push.apply(fmtRes_1174406898[0], [32]);;
              F.line = 259;
              formatValue_922747051(fmtRes_1174406898, 0, renderAttrs_1174406394(node_1174406831), []);
              F.line = 649;
              F.filename = "strformat.nim";
              addChar(fmtRes_1174406898[0], 10);;
            };
          Temporary1 = fmtRes_1174406898[0];
          }
          
          result_1174406832 = nimCopy(null, Temporary1, NTI33554449);
        framePtr = F.prev;

        return result_1174406832;

      }
      
function closing_1174406899(node_1174406900) {
        var result_1174406901 = [];

        var F = {procname: "asSxpr.closing", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
          F.line = 261;
          F.filename = "nodetree.nim";
          result_1174406901 = nimCopy(null, [41], NTI33554449);
        framePtr = F.prev;

        return result_1174406901;

      }
      
function leafdata_1174406902(node_1174406903) {
                var Temporary3;
                
function esc_1174406905(s_1174406906) {
                  var result_1174406907 = [];

                  var F = {procname: "leafdata.esc", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
                  framePtr = F;
                    F.line = 265;
                    F.filename = "nodetree.nim";
                    result_1174406907 = nimCopy(null, nsuReplaceStr(nsuReplaceStr(s_1174406906, [92], [92,92]), [34], [92,34]), NTI33554449);
                  framePtr = F.prev;

                  return result_1174406907;

                }

        var result_1174406904 = [];

        var F = {procname: "asSxpr.leafdata", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
        BeforeRet: {
          if (!(((node_1174406903.childrenSeq).length == 0))) {
          F.line = 267;
          F.filename = "nodetree.nim";
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim(267, 5) `node.isLeaf` "));
          }
          
          F.line = 268;
          var L_1174406916 = runeLen_1174405679(node_1174406903);
          if ((60 <= L_1174406916)) {
          F.line = 270;
          var s_1174406917 = content_1174405182(node_1174406903);
          F.line = 272;
          var lines_1174406922 = [];
          F.line = 273;
          var i_1174406923 = 0;
          F.line = 274;
          var k_1174406924 = 0;
          Label1: {
            F.line = 275;
              Label2: while (true) {
              if (!(0 < L_1174406916)) break Label2;
                F.line = 276;
                if ((L_1174406916 < 60)) {
                Temporary3 = L_1174406916;
                }
                else {
                Temporary3 = 60;
                }
                
                k_1174406924 = runeOffset_956308676(s_1174406917, chckRange(addInt(((i_1174406923) | 0), Temporary3), 0, 2147483647), chckRange(i_1174406923, 0, 2147483647));
                if ((k_1174406924 <= i_1174406923)) {
                F.line = 277;
                break Label1;
                }
                
                F.line = 278;
                lines_1174406922.push([34].concat(esc_1174406905(HEX5BHEX5D_1006634239(s_1174406917, HEX2EHEX2E_973078576(i_1174406923, subInt(k_1174406924, 1)))) || [],[34]));;
                F.line = 279;
                i_1174406923 = k_1174406924;
                F.line = 280;
                L_1174406916 = subInt(L_1174406916, 60);
              }
          };
          F.line = 281;
          result_1174406904 = nimCopy(null, lines_1174406922, NTI1174406287);
          break BeforeRet;
          }
          else {
            F.line = 283;
            result_1174406904 = nimCopy(null, [[34].concat(esc_1174406905(content_1174405182(node_1174406903)) || [],[34])], NTI1174406328);
            break BeforeRet;
          }
          
        };
        framePtr = F.prev;

        return result_1174406904;

      }

  var result_1174406393 = [];

  var F = {procname: "nodetree.asSxpr", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((node_1174405706 == null)) {
    F.line = 286;
    F.filename = "nodetree.nim";
    result_1174406393 = nimCopy(null, [110,105,108], NTI33554449);
    break BeforeRet;
    }
    else {
      F.line = 288;
      result_1174406393 = nimCopy(null, nsuJoinSep(serialize_1174406018(node_1174405706, opening_1174406830, closing_1174406899, leafdata_1174406902, 0), [10]), NTI33554449);
      break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_1174406393;

}

function HEX24_1174407026(node_1174407027) {
  var result_1174407028 = [];

  var F = {procname: "nodetree.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 292;
    F.filename = "nodetree.nim";
    result_1174407028 = nimCopy(null, asSxpr_1174405705(node_1174407027), NTI33554449);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1174407028;

}

function addQuoted_520103414(s_520103416, s_520103416_Idx, x_520103417) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2521;
    F.filename = "system.nim";
    s_520103416[s_520103416_Idx].push.apply(s_520103416[s_520103416_Idx], HEX24_1174407026(x_520103417));;
  framePtr = F.prev;

  
}

function addQuoted_520103544(s_520103546, s_520103546_Idx, x_520103547) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2521;
    F.filename = "system.nim";
    s_520103546[s_520103546_Idx].push.apply(s_520103546[s_520103546_Idx], HEX24_1224736847(x_520103547));;
  framePtr = F.prev;

  
}

function collectionToString_520103504(x_520103506, prefix_520103507, separator_520103508, suffix_520103509) {
  var result_520103510 = [[]];

  var F = {procname: "collectionToString.collectionToString", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 90;
    F.filename = "dollars.nim";
    result_520103510[0] = nimCopy(null, prefix_520103507, NTI33554449);
    F.line = 91;
    var firstElement_520103511 = true;
    Label1: {
      F.line = 92;
      var value_520103534 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104122 = 0;
      F.line = 242;
      var L_520104123 = (x_520103506).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104122 < L_520104123)) break Label3;
            F.line = 92;
            F.filename = "dollars.nim";
            value_520103534 = x_520103506[i_520104122];
            if (firstElement_520103511) {
            F.line = 94;
            firstElement_520103511 = false;
            }
            else {
              F.line = 96;
            result_520103510[0].push.apply(result_520103510[0], separator_520103508);;
            }
            
            if ((value_520103534 == null)) {
            F.line = 101;
            result_520103510[0].push.apply(result_520103510[0], [110,105,108]);;
            }
            else {
              F.line = 103;
            addQuoted_520103544(result_520103510, 0, value_520103534);
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104122 += 1;
            if (!(((x_520103506).length == L_520104123))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 106;
    F.filename = "dollars.nim";
    result_520103510[0].push.apply(result_520103510[0], suffix_520103509);;
  framePtr = F.prev;

  return result_520103510[0];

}

function HEX24_520103500(x_520103502) {
  var result_520103503 = [];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 117;
    F.filename = "dollars.nim";
    result_520103503 = nimCopy(null, collectionToString_520103504(x_520103502, [64,91], [44,32], [93]), NTI33554449);
  framePtr = F.prev;

  return result_520103503;

}

function addQuoted_520103494(s_520103496, s_520103496_Idx, x_520103497) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2521;
    F.filename = "system.nim";
    s_520103496[s_520103496_Idx].push.apply(s_520103496[s_520103496_Idx], HEX24_520103500(x_520103497));;
  framePtr = F.prev;

  
}

function HEX24_520103382(x_520103384) {
  var result_520103385 = [[]];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 19;
    F.filename = "miscdollars.nim";
    result_520103385[0] = nimCopy(null, [40], NTI33554449);
    F.line = 21;
    var countHEX60gensym387_520103396 = 0;
    if ((0 < countHEX60gensym387_520103396)) {
    F.line = 23;
    result_520103385[0].push.apply(result_520103385[0], [44,32]);;
    }
    
    F.line = 25;
    result_520103385[0].push.apply(result_520103385[0], [114,111,111,116]);;
    F.line = 26;
    result_520103385[0].push.apply(result_520103385[0], [58,32]);;
    F.line = 27;
    countHEX60gensym387_520103396 += 1;
    if ((x_520103384["Field0"] == null)) {
    F.line = 30;
    result_520103385[0].push.apply(result_520103385[0], [110,105,108]);;
    }
    else {
      F.line = 31;
    addQuoted_520103414(result_520103385, 0, x_520103384["Field0"]);
    }
    
    if ((0 < countHEX60gensym387_520103396)) {
    F.line = 23;
    result_520103385[0].push.apply(result_520103385[0], [44,32]);;
    }
    
    F.line = 25;
    result_520103385[0].push.apply(result_520103385[0], [101,114,114,111,114,115]);;
    F.line = 26;
    result_520103385[0].push.apply(result_520103385[0], [58,32]);;
    F.line = 27;
    countHEX60gensym387_520103396 += 1;
    F.line = 33;
    addQuoted_520103494(result_520103385, 0, x_520103384["Field1"]);
    F.line = 39;
    result_520103385[0].push.apply(result_520103385[0], [41]);;
  framePtr = F.prev;

  return result_520103385[0];

}

function init_520099192(regexParser_520099193, rxInfo_520099194) {
  var result_520099195 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1113;
    F.filename = "parse.nim";
    var _ = init_520094673(regexParser_520099193, [58,82,101,103,69,120,112]);
    F.line = 1114;
    regexParser_520099193.reInfo = nimCopy(regexParser_520099193.reInfo, rxInfo_520099194, NTI520093730);
    F.line = 1115;
    regexParser_520099193.flags[0] = true;
    F.line = 1116;
    result_520099195 = regexParser_520099193;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099195;

}

function new_520099222() {
  var result_520099225 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520099227 = null;
    F.line = 839;
    r_520099227 = ({m_type: NTI520097464, reInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_520099225 = r_520099227;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099225;

}

function rx_520093766(rx_str_520093767) {
  var result_520093768 = {Field0: [], Field1: {Field0: null, Field1: null}};

  var F = {procname: "parse.rx", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 27;
    F.filename = "parse.nim";
    var colontmp__520104125 = nimCopy(null, rx_str_520093767, NTI33554449);
    F.line = 27;
    var colontmp__520104126 = ure_520093736(rx_str_520093767);
    F.line = 27;
    result_520093768 = nimCopy(result_520093768, {Field0: nimCopy(null, colontmp__520104125, NTI33554449), Field1: nimCopy(null, colontmp__520104126, NTI1140850938)}, NTI520093730);
  framePtr = F.prev;

  return result_520093768;

}

function contains_1006634823(s_1006634824, sub_1006634825) {
  var result_1006634826 = false;

  var F = {procname: "strutils.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 2161;
    F.filename = "strutils.nim";
    result_1006634826 = (0 <= nsuFindStr(s_1006634824, sub_1006634825, 0, (-1)));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1006634826;

}

function urex_520093793(pattern_520093795) {
  var result_520093796 = {Field0: null, Field1: null};

  var F = {procname: "urex.urex", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 227;
    F.filename = "strslice.nim";
    var flatPattern_520093797 = toJSStr(pattern_520093795).replace(PCREFlag_1140851009, "").replace(comment_1140851010, "").replace(whitespace_1140851011, "").replace(slashU_1140851012, "\\u{$1}");
    F.line = 231;
    var colontmp__520104129 = new RegExp(flatPattern_520093797, "uy");
    F.line = 232;
    var colontmp__520104130 = new RegExp(flatPattern_520093797, "ug");
    F.line = 231;
    result_520093796 = nimCopy(result_520093796, {Field0: colontmp__520104129, Field1: colontmp__520104130}, NTI1140850938);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520093796;

}

function mrx_520093790(multiline_rx_str_520093791) {
  var result_520093792 = {Field0: [], Field1: {Field0: null, Field1: null}};

  var F = {procname: "parse.mrx", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 29;
    F.filename = "parse.nim";
    var colontmp__520104127 = nimCopy(null, multiline_rx_str_520093791, NTI33554449);
    F.line = 29;
    var colontmp__520104128 = urex_520093793(multiline_rx_str_520093791);
    F.line = 29;
    result_520093792 = nimCopy(result_520093792, {Field0: nimCopy(null, colontmp__520104127, NTI33554449), Field1: nimCopy(null, colontmp__520104128, NTI1140850938)}, NTI520093730);
  framePtr = F.prev;

  return result_520093792;

}

function init_520099306(insignificant_520099307, whitespace_520099308, comment_520099309) {
  var result_520099310 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1170;
    F.filename = "parse.nim";
    var _ = init_520094673(insignificant_520099307, [58,87,104,105,116,101,115,112,97,99,101]);
    F.line = 1171;
    insignificant_520099307.whitespace = nimCopy(insignificant_520099307.whitespace, whitespace_520099308, NTI520093730);
    F.line = 1172;
    insignificant_520099307.comment = nimCopy(insignificant_520099307.comment, comment_520099309, NTI520093730);
    F.line = 1173;
    var ws_520099311 = ([40,63,58] || []).concat(whitespace_520099308.Field0 || [],[41,63] || []);
    if ((((comment_520099309.Field0).length == 0) || eqStrings(comment_520099309.Field0, [36,46]))) {
    F.line = 1175;
    insignificant_520099307.combined = nimCopy(insignificant_520099307.combined, rx_520093766(ws_520099311), NTI520093730);
    }
    else {
      F.line = 1177;
      var cmmt_520099312 = ([40,63,58] || []).concat(comment_520099309.Field0 || [],[41] || []);
      F.line = 1178;
      Label1: {
        F.line = 1178;
        var fmtRes_520099317 = [mnewString(0)];
        F.line = 1178;
        fmtRes_520099317[0].push.apply(fmtRes_520099317[0], [40,63,58]);;
        F.line = 1178;
        formatValue_922747051(fmtRes_520099317, 0, ws_520099311, []);
        F.line = 1178;
        fmtRes_520099317[0].push.apply(fmtRes_520099317[0], [40,63,58]);;
        F.line = 1178;
        formatValue_922747051(fmtRes_520099317, 0, cmmt_520099312, []);
        F.line = 1178;
        formatValue_922747051(fmtRes_520099317, 0, ws_520099311, []);
        F.line = 1178;
        fmtRes_520099317[0].push.apply(fmtRes_520099317[0], [41,42,41]);;
      };
      insignificant_520099307.combined = nimCopy(insignificant_520099307.combined, rx_520093766(fmtRes_520099317[0]), NTI520093730);
    }
    
    F.line = 1179;
    result_520099310 = insignificant_520099307;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099310;

}

function new_520099343() {
  var result_520099346 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520099348 = null;
    F.line = 839;
    r_520099348 = ({m_type: NTI520097535, combined: {Field0: [], Field1: {Field0: null, Field1: null}}, whitespace: {Field0: [], Field1: {Field0: null, Field1: null}}, comment: {Field0: [], Field1: {Field0: null, Field1: null}}, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_520099346 = r_520099348;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099346;

}

function Whitespace_520099337(whitespace_520099338, comment_520099339) {
    var Temporary1;
    var Temporary2;

  var result_520099340 = null;

  var F = {procname: "parse.Whitespace", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1185;
    F.filename = "parse.nim";
    F.line = 1185;
    if (contains_1006634823(whitespace_520099338, [10])) {
    Temporary1 = mrx_520093790(whitespace_520099338);
    }
    else {
    Temporary1 = rx_520093766(whitespace_520099338);
    }
    
    var wsInfo_520099341 = nimCopy(null, Temporary1, NTI520093730);
    F.line = 1186;
    if (contains_1006634823(comment_520099339, [10])) {
    Temporary2 = mrx_520093790(comment_520099339);
    }
    else {
    Temporary2 = rx_520093766(comment_520099339);
    }
    
    var commentInfo_520099342 = nimCopy(null, Temporary2, NTI520093730);
    result_520099340 = init_520099306(new_520099343(), wsInfo_520099341, commentInfo_520099342);
  framePtr = F.prev;

  return result_520099340;

}

function init_520099475(repeat_520099476, parser_520099477, repRange_520099478, name_520099479) {
  var result_520099480 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((repRange_520099478["Field0"] < repRange_520099478["Field1"]))) {
    F.line = 1265;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1265, 3) `repRange[1] > repRange[0]` "));
    }
    
    F.line = 1266;
    var _ = init_520094673(repeat_520099476, name_520099479);
    F.line = 1267;
    repeat_520099476.subParsers = nimCopy(null, [parser_520099477], NTI520097644);
    F.line = 1268;
    repeat_520099476.repRange = nimCopy(repeat_520099476.repRange, repRange_520099478, NTI520097629);
    F.line = 1269;
    result_520099480 = repeat_520099476;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099480;

}

function new_520103610() {
  var result_520103613 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520103615 = null;
    F.line = 839;
    r_520103615 = ({m_type: NTI520097631, repRange: {Field0: 0, Field1: 0}, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_520103613 = r_520103615;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520103613;

}

function init_520097907(errorCatching_520097908, ptype_520097909, mandatory_520097910, skipList_520097915, resumeList_520097920, errorList_520097925) {
  var result_520097926 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 755;
    F.filename = "parse.nim";
    var _ = init_520094673(errorCatching_520097908, ptype_520097909);
    F.line = 756;
    errorCatching_520097908.flags[5] = true;
    F.line = 757;
    errorCatching_520097908.mandatory = mandatory_520097910;
    F.line = 758;
    errorCatching_520097908.skipList = nimCopy(null, skipList_520097915, NTI520096136);
    F.line = 759;
    errorCatching_520097908.resumeList = nimCopy(null, resumeList_520097920, NTI520096147);
    F.line = 760;
    errorCatching_520097908.errorList = nimCopy(null, errorList_520097925, NTI520096158);
    F.line = 761;
    result_520097926 = errorCatching_520097908;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097926;

}

function HEX40_520099693(a_520099695) {
  var result_520099696 = [];

  var F = {procname: "@.@", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1462;
    F.filename = "system.nim";
    result_520099696 = new Array(chckRange((a_520099695).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((a_520099695).length, 0, 2147483647) ; ++i) { result_520099696[i] = null; }    Label1: {
      F.line = 1463;
      var i_520099712 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520104139 = 0;
      F.line = 1463;
      F.filename = "system.nim";
      colontmp__520104139 = subInt((a_520099695).length, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520104140 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_520104140 <= colontmp__520104139)) break Label3;
            F.line = 1463;
            F.filename = "system.nim";
            i_520099712 = res_520104140;
            F.line = 1463;
            result_520099696[chckIndx(i_520099712, 0, (result_520099696).length - 1)] = a_520099695[chckIndx(i_520099712, 0, (a_520099695).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520104140 = addInt(res_520104140, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_520099696;

}

function init_520099947(series_520099948, parsers_520099949, mandatory_520099950) {
                      var Temporary7;

  var result_520099951 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((1 <= (parsers_520099949).length))) {
    F.line = 1430;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1430, 3) `parsers.len >= 1` "));
    }
    
    F.line = 1431;
    var _ = init_520097907(series_520099948, [58,83,101,114,105,101,115], mandatory_520099950, [], [], []);
    F.line = 1432;
    series_520099948.flags[1] = true;
    F.line = 1433;
    series_520099948.subParsers = nimCopy(null, HEX40_520099693(parsers_520099949), NTI520097788);
    Label1: {
      F.line = 1435;
      var i_520099967 = (-1);
      Label2: {
        F.line = 1434;
        var subP_520099971 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520104135 = 0;
        F.line = 242;
        var L_520104136 = (series_520099948.subParsers).length;
        Label3: {
          F.line = 243;
            Label4: while (true) {
            if (!(i_520104135 < L_520104136)) break Label4;
              F.line = 1435;
              F.filename = "parse.nim";
              subP_520099971 = series_520099948.subParsers[chckIndx(i_520104135, 0, (series_520099948.subParsers).length - 1)];
              F.line = 1435;
              i_520099967 = addInt(i_520099967, 1);
              F.line = 1435;
              var p_520099977 = subP_520099971;
              Label5: {
                F.line = 1436;
                  Label6: while (true) {
                  if (!((((p_520099977.subParsers).length == 1) && eqStrings(p_520099977.ptype, [58,83,101,114,105,101,115])) && eqStrings(p_520099977.pname, []))) break Label6;
                      if (!(p_520099977.mandatory == 0)) Temporary7 = false; else {                        Temporary7 = (i_520099967 < series_520099948.mandatory);                      }                    if (Temporary7) {
                    F.line = 1438;
                    series_520099948.mandatory = i_520099967;
                    }
                    
                    F.line = 1439;
                    p_520099977 = p_520099977.subParsers[chckIndx(0, 0, (p_520099977.subParsers).length - 1)];
                    F.line = 1440;
                    series_520099948.subParsers[chckIndx(i_520099967, 0, (series_520099948.subParsers).length - 1)] = p_520099977;
                  }
              };
              F.line = 245;
              F.filename = "iterators.nim";
              i_520104135 = addInt(i_520104135, 1);
              if (!(((series_520099948.subParsers).length == L_520104136))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
    F.line = 1441;
    F.filename = "parse.nim";
    result_520099951 = series_520099948;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099951;

}

function new_520100038() {
  var result_520100041 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520100043 = null;
    F.line = 839;
    r_520100043 = ({m_type: NTI520097974, mandatory: 0, skipList: [], resumeList: [], errorList: [], referredParsers: [], ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_520100041 = r_520100043;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520100041;

}

function init_520099689(alternative_520099690, parsers_520099691) {
  var result_520099692 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1364;
    F.filename = "parse.nim";
    var _ = init_520094673(alternative_520099690, [58,65,108,116,101,114,110,97,116,105,118,101]);
    F.line = 1365;
    alternative_520099690.subParsers = nimCopy(null, HEX40_520099693(parsers_520099691), NTI520097788);
    F.line = 1366;
    alternative_520099690.flags[1] = true;
    F.line = 1367;
    result_520099692 = alternative_520099690;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099692;

}

function new_520099778() {
  var result_520099781 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520099783 = null;
    F.line = 839;
    r_520099783 = ({m_type: NTI520097782, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_520099781 = r_520099783;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099781;

}

function add_520099813(x_520099815, x_520099815_Idx, y_520099816) {
    var Temporary1;

  var F = {procname: "add.add", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1204;
    F.filename = "system.nim";
    var xl_520099820 = (x_520099815[x_520099815_Idx]).length;
    F.line = 1205;
    if (x_520099815[x_520099815_Idx].length < (Temporary1 = chckRange(addInt(xl_520099820, (y_520099816).length), 0, 2147483647), Temporary1)) { for (var i = x_520099815[x_520099815_Idx].length ; i < Temporary1 ; ++i) x_520099815[x_520099815_Idx].push(null); }
               else { x_520099815[x_520099815_Idx].length = Temporary1; };
    Label2: {
      F.line = 1206;
      var i_520099835 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520104143 = 0;
      F.line = 1206;
      F.filename = "system.nim";
      colontmp__520104143 = (y_520099816).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520104144 = 0;
      Label3: {
        F.line = 91;
          Label4: while (true) {
          if (!(res_520104144 <= colontmp__520104143)) break Label4;
            F.line = 1206;
            F.filename = "system.nim";
            i_520099835 = res_520104144;
            F.line = 1206;
            x_520099815[x_520099815_Idx][chckIndx(addInt(xl_520099820, i_520099835), 0, (x_520099815[x_520099815_Idx]).length - 1)] = y_520099816[chckIndx(i_520099835, 0, (y_520099816).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520104144 = addInt(res_520104144, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function HEX7C_520099774(alternative_520099775, other_520099776) {
  var result_520099777 = null;

  var F = {procname: "parse.|", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(alternative_520099775.pname, []))) {
    F.line = 1388;
    F.filename = "parse.nim";
    result_520099777 = init_520099689(new_520099778(), [alternative_520099775, other_520099776]);
    break BeforeRet;
    }
    
    if (eqStrings(other_520099776.pname, [])) {
    F.line = 1390;
    add_520099813(alternative_520099775, "subParsers", other_520099776.subParsers);
    }
    else {
      F.line = 1392;
    alternative_520099775.subParsers.push(other_520099776);;
    }
    
    F.line = 1393;
    result_520099777 = alternative_520099775;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099777;

}

function HEX7C_520099886(alternative_520099887, other_520099888) {
  var result_520099889 = null;

  var F = {procname: "parse.|", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(alternative_520099887.pname, []))) {
    F.line = 1396;
    F.filename = "parse.nim";
    result_520099889 = init_520099689(new_520099778(), [alternative_520099887, other_520099888]);
    break BeforeRet;
    }
    
    F.line = 1397;
    alternative_520099887.subParsers.push(other_520099888);;
    F.line = 1398;
    result_520099889 = alternative_520099887;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099889;

}

function hash_520100804(x_520100806) {
  var result_520100807 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 214;
    F.filename = "hashes.nim";
    result_520100807 = hashWangYi1_855638209(BigInt.asUintN(64, BigInt(x_520100806)));
  framePtr = F.prev;

  return result_520100807;

}

function rawGet_520100797(t_520100800, key_520100801, hc_520100802, hc_520100802_Idx) {
  var result_520100803 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 59;
    F.filename = "hashcommon.nim";
    hc_520100802[hc_520100802_Idx] = hash_520100804(key_520100801);
    if ((hc_520100802[hc_520100802_Idx] == 0)) {
    F.line = 61;
    hc_520100802[hc_520100802_Idx] = 314159265;
    }
    
    if (((t_520100800.data).length == 0)) {
    F.line = 43;
    result_520100803 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_520100877 = (hc_520100802[hc_520100802_Idx] & (t_520100800.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1107296287(t_520100800.data[chckIndx(h_520100877, 0, (t_520100800.data).length - 1)].Field0)) break Label2;
          if (((t_520100800.data[chckIndx(h_520100877, 0, (t_520100800.data).length - 1)].Field0 == hc_520100802[hc_520100802_Idx]) && (t_520100800.data[chckIndx(h_520100877, 0, (t_520100800.data).length - 1)].Field1 == key_520100801))) {
          F.line = 51;
          result_520100803 = h_520100877;
          break BeforeRet;
          }
          
          F.line = 52;
          h_520100877 = nextTry_1107296290(h_520100877, (t_520100800.data).length - 1);
        }
    };
    F.line = 53;
    result_520100803 = subInt((-1), h_520100877);
  };
  framePtr = F.prev;

  return result_520100803;

}

function hasKey_520100790(t_520100793, key_520100794) {
  var result_520100795 = false;

  var F = {procname: "hasKey.hasKey", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 372;
    F.filename = "tables.nim";
    var hc_520100796 = [0];
    F.line = 373;
    result_520100795 = (0 <= rawGet_520100797(t_520100793, key_520100794, hc_520100796, 0));
  framePtr = F.prev;

  return result_520100795;

}

function contains_520100784(t_520100787, key_520100788) {
  var result_520100789 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 383;
    F.filename = "tables.nim";
    result_520100789 = hasKey_520100790(t_520100787, key_520100788);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520100789;

}

function raiseKeyError_520101211(key_520101213) {
  var F = {procname: "raiseKeyError.raiseKeyError", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 235;
    F.filename = "tables.nim";
    raiseException({message: ([107,101,121,32,110,111,116,32,102,111,117,110,100,58,32] || []).concat(HEX24_369098760(((key_520101213) | 0)) || []), parent: null, m_type: NTI134217747, name: null, trace: [], up: null}, "KeyError");
  framePtr = F.prev;

  
}

function HEX5BHEX5D_520101140(t_520101143, key_520101144) {
  var result_520101145 = null;
  var result_520101145_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 243;
    F.filename = "tables.nim";
    var hcHEX60gensym22_520101146 = [0];
    F.line = 244;
    var indexHEX60gensym22_520101153 = rawGet_520100797(t_520101143, key_520101144, hcHEX60gensym22_520101146, 0);
    if ((0 <= indexHEX60gensym22_520101153)) {
    F.line = 245;
    result_520101145 = t_520101143.data[chckIndx(indexHEX60gensym22_520101153, 0, (t_520101143.data).length - 1)]; result_520101145_Idx = "Field2";
    }
    else {
      F.line = 247;
    raiseKeyError_520101211(key_520101144);
    }
    
  framePtr = F.prev;

  return [result_520101145, result_520101145_Idx];

}

function mustRehash_520101474(t_520101476) {
  var result_520101477 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_520101476.counter < (t_520101476.data).length))) {
    F.line = 34;
    F.filename = "hashcommon.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 35;
    result_520101477 = ((mulInt((t_520101476.data).length, 2) < mulInt(t_520101476.counter, 3)) || (subInt((t_520101476.data).length, t_520101476.counter) < 4));
  framePtr = F.prev;

  return result_520101477;

}

function rawInsert_520101983(t_520101987, data_520101988, data_520101988_Idx, key_520101989, val_520101990, hc_520101991, h_520101992) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 25;
    F.filename = "tableimpl.nim";
    data_520101988[data_520101988_Idx][chckIndx(h_520101992, 0, (data_520101988[data_520101988_Idx]).length - 1)].Field1 = key_520101989;
    F.line = 26;
    data_520101988[data_520101988_Idx][chckIndx(h_520101992, 0, (data_520101988[data_520101988_Idx]).length - 1)].Field2 = val_520101990;
    F.line = 27;
    data_520101988[data_520101988_Idx][chckIndx(h_520101992, 0, (data_520101988[data_520101988_Idx]).length - 1)].Field0 = hc_520101991;
  framePtr = F.prev;

  
}

function enlarge_520101662(t_520101665) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 250;
    F.filename = "tables.nim";
    var n_520101668 = [];
    F.line = 251;
    n_520101668 = new Array(chckRange(mulInt((t_520101665.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_520101665.data).length, 2), 0, 2147483647) ; ++i) { n_520101668[i] = {Field0: 0, Field1: 0, Field2: 0}; }    F.line = 252;
    var Temporary1 = t_520101665.data; t_520101665.data = n_520101668; n_520101668 = Temporary1;    Label2: {
      F.line = 253;
      var i_520101743 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__520104153 = 0;
      F.line = 253;
      F.filename = "tables.nim";
      colontmp__520104153 = (n_520101668).length - 1;
      F.line = 65;
      F.filename = "iterators_1.nim";
      var res_520104154 = 0;
      Label3: {
        F.line = 66;
          Label4: while (true) {
          if (!(res_520104154 <= colontmp__520104153)) break Label4;
            F.line = 253;
            F.filename = "tables.nim";
            i_520101743 = res_520104154;
            F.line = 254;
            var eh_520101801 = n_520101668[chckIndx(i_520101743, 0, (n_520101668).length - 1)].Field0;
            if (isFilled_1107296287(eh_520101801)) {
            F.line = 256;
            var j_520101805 = (eh_520101801 & (t_520101665.data).length - 1);
            Label5: {
              F.line = 257;
                Label6: while (true) {
                if (!isFilled_1107296287(t_520101665.data[chckIndx(j_520101805, 0, (t_520101665.data).length - 1)].Field0)) break Label6;
                  F.line = 258;
                  j_520101805 = nextTry_1107296290(j_520101805, (t_520101665.data).length - 1);
                }
            };
            F.line = 260;
            rawInsert_520101983(t_520101665, t_520101665, "data", n_520101668[chckIndx(i_520101743, 0, (n_520101668).length - 1)].Field1, n_520101668[chckIndx(i_520101743, 0, (n_520101668).length - 1)].Field2, eh_520101801, j_520101805);
            }
            
            F.line = 68;
            F.filename = "iterators_1.nim";
            res_520104154 = addInt(res_520104154, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function rawGetKnownHC_520102164(t_520102167, key_520102168, hc_520102169) {
  var result_520102170 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((t_520102167.data).length == 0)) {
    F.line = 43;
    F.filename = "hashcommon.nim";
    result_520102170 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_520102232 = (hc_520102169 & (t_520102167.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1107296287(t_520102167.data[chckIndx(h_520102232, 0, (t_520102167.data).length - 1)].Field0)) break Label2;
          if (((t_520102167.data[chckIndx(h_520102232, 0, (t_520102167.data).length - 1)].Field0 == hc_520102169) && (t_520102167.data[chckIndx(h_520102232, 0, (t_520102167.data).length - 1)].Field1 == key_520102168))) {
          F.line = 51;
          result_520102170 = h_520102232;
          break BeforeRet;
          }
          
          F.line = 52;
          h_520102232 = nextTry_1107296290(h_520102232, (t_520102167.data).length - 1);
        }
    };
    F.line = 53;
    result_520102170 = subInt((-1), h_520102232);
  };
  framePtr = F.prev;

  return result_520102170;

}

function HEX5BHEX5DHEX3D_520101275(t_520101278, key_520101279, val_520101280) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_520101278.data).length == 0)) {
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym357_520101340 = slotsNeeded_1107296298(32);
    F.line = 169;
    t_520101278.counter = 0;
    F.line = 170;
    t_520101278.data = new Array(chckRange(correctSizeHEX60gensym357_520101340, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym357_520101340, 0, 2147483647) ; ++i) { t_520101278.data[i] = {Field0: 0, Field1: 0, Field2: 0}; }    }
    
    F.line = 59;
    var hc_520101345 = [0];
    F.line = 60;
    var index_520101352 = rawGet_520100797(t_520101278, key_520101279, hc_520101345, 0);
    if ((0 <= index_520101352)) {
    F.line = 61;
    t_520101278.data[chckIndx(index_520101352, 0, (t_520101278.data).length - 1)].Field2 = val_520101280;
    }
    else {
      if (((t_520101278.data).length == 0)) {
      F.line = 165;
      var correctSizeHEX60gensym360_520101469 = slotsNeeded_1107296298(32);
      F.line = 169;
      t_520101278.counter = 0;
      F.line = 170;
      t_520101278.data = new Array(chckRange(correctSizeHEX60gensym360_520101469, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym360_520101469, 0, 2147483647) ; ++i) { t_520101278.data[i] = {Field0: 0, Field1: 0, Field2: 0}; }      }
      
      if (mustRehash_520101474(t_520101278)) {
      F.line = 51;
      enlarge_520101662(t_520101278);
      F.line = 52;
      index_520101352 = rawGetKnownHC_520102164(t_520101278, key_520101279, hc_520101345[0]);
      }
      
      F.line = 53;
      index_520101352 = subInt((-1), index_520101352);
      F.line = 54;
      rawInsert_520101983(t_520101278, t_520101278, "data", key_520101279, val_520101280, hc_520101345[0], index_520101352);
      F.line = 62;
      t_520101278.counter = addInt(t_520101278.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function HEX28HEX29_520097630(parser_520097631, location_520097632) {
  var result_520097633 = {Field0: null, Field1: 0};

  var F = {procname: "parse.()", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 637;
    F.filename = "parse.nim";
    result_520097633 = nimCopy(result_520097633, parser_520097631.call(parser_520097631, location_520097632), NTI520093753);
  framePtr = F.prev;

  return result_520097633;

}

function forwardWrapper_520100605(parser_520100606, location_520100607) {
    var Temporary1;

  var result_520100608 = {Field0: null, Field1: 0};

  var F = {procname: "parse.forwardWrapper", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1625;
    F.filename = "parse.nim";
    var grammar_520100609 = grammar_520095212(parser_520100606);
    if ((location_520100607 <= grammar_520100609.rollbackLocation)) {
    F.line = 1626;
    rollback_520095814(grammar_520100609, location_520100607);
    }
    
    if (contains_520095941(parser_520100606.visited, ((location_520100607) | 0))) {
    F.line = 1627;
    result_520100608 = nimCopy(result_520100608, HEX5BHEX5D_520096272(parser_520100606.visited, ((location_520100607) | 0)), NTI520093753);
    break BeforeRet;
    }
    
    F.line = 1629;
    var depth_520100730 = 0;
    if (contains_520100784(parser_520100606.recursionCounter, location_520100607)) {
    F.line = 1631;
    depth_520100730 = (Temporary1 = HEX5BHEX5D_520101140(parser_520100606.recursionCounter, location_520100607), Temporary1)[0][Temporary1[1]];
    if ((depth_520100730 == 0)) {
    F.line = 1633;
    delete grammar_520100609.flags[1];
    F.line = 1634;
    var colontmp__520104146 = null;
    F.line = 1634;
    var colontmp__520104147 = location_520100607;
    F.line = 1634;
    result_520100608 = nimCopy(result_520100608, {Field0: colontmp__520104146, Field1: colontmp__520104147}, NTI520093753);
    }
    else {
      F.line = 1636;
      HEX5BHEX5DHEX3D_520101275(parser_520100606.recursionCounter, location_520100607, subInt(depth_520100730, 1));
      F.line = 1637;
      result_520100608 = nimCopy(result_520100608, HEX28HEX29_520097630(parser_520100606.subParsers[chckIndx(0, 0, (parser_520100606.subParsers).length - 1)], location_520100607), NTI520093753);
      F.line = 1638;
      HEX5BHEX5DHEX3D_520101275(parser_520100606.recursionCounter, location_520100607, depth_520100730);
    }
    
    }
    else {
      F.line = 1640;
      HEX5BHEX5DHEX3D_520101275(parser_520100606.recursionCounter, location_520100607, 0);
      F.line = 1641;
      var memoization_520102521 = (grammar_520100609.flags[1] != undefined);
      F.line = 1642;
      grammar_520100609.flags[1] = true;
      F.line = 1644;
      result_520100608 = nimCopy(result_520100608, HEX28HEX29_520097630(parser_520100606.subParsers[chckIndx(0, 0, (parser_520100606.subParsers).length - 1)], location_520100607), NTI520093753);
      if (!((result_520100608.Field0 == null))) {
      F.line = 1647;
      depth_520100730 = 1;
      Label2: {
        F.line = 1649;
          Label3: while (true) {
          if (!true) break Label3;
            F.line = 1650;
            HEX5BHEX5DHEX3D_520101275(parser_520100606.recursionCounter, location_520100607, depth_520100730);
            F.line = 1651;
            grammar_520100609.flags[1] = true;
            F.line = 1652;
            var rb_520102582 = (grammar_520100609.rollbackStack).length;
            F.line = 1653;
            var nextResult_520102583 = HEX28HEX29_520097630(parser_520100606.subParsers[chckIndx(0, 0, (parser_520100606.subParsers).length - 1)], location_520100607);
            if ((nextResult_520102583.Field1 <= result_520100608.Field1)) {
            Label4: {
              F.line = 1656;
                Label5: while (true) {
                if (!(rb_520102582 < (grammar_520100609.rollbackStack).length)) break Label5;
                  F.line = 1657;
                  var rbItem_520102590 = pop_520095847(grammar_520100609, "rollbackStack");
                  F.line = 1658;
                  rbItem_520102590.Field1();
                  if ((0 < (grammar_520100609.rollbackStack).length)) {
                  F.line = 1660;
                  grammar_520100609.rollbackLocation = HEX5BHEX5D_520095822(grammar_520100609.rollbackStack, 1).Field0;
                  }
                  else {
                    F.line = 1662;
                    grammar_520100609.rollbackLocation = (-2);
                  }
                  
                }
            };
            F.line = 1663;
            break Label2;
            }
            
            F.line = 1665;
            result_520100608 = nimCopy(result_520100608, nextResult_520102583, NTI520093753);
            F.line = 1666;
            depth_520100730 = addInt(depth_520100730, 1);
          }
      };
      }
      
      if (!(memoization_520102521)) {
      F.line = 1668;
      delete grammar_520100609.flags[1];
      }
      
      if ((grammar_520100609.flags[1] != undefined)) {
      F.line = 1669;
      HEX5BHEX5DHEX3D_520096462(parser_520100606.visited, ((location_520100607) | 0), result_520100608);
      }
      
    }
    
  };
  framePtr = F.prev;

  return result_520100608;

}

function initTable_520103152(initialSize_520103155) {
  var result_520103156 = ({data: [], counter: 0});

  var F = {procname: "initTable.initTable", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym374_520103158 = slotsNeeded_1107296298(chckRange(initialSize_520103155, 0, 2147483647));
    F.line = 169;
    result_520103156.counter = 0;
    F.line = 170;
    result_520103156.data = new Array(chckRange(correctSizeHEX60gensym374_520103158, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym374_520103158, 0, 2147483647) ; ++i) { result_520103156.data[i] = {Field0: 0, Field1: 0, Field2: 0}; }  framePtr = F.prev;

  return result_520103156;

}

function init_520103145(forward_520103146) {
  var result_520103147 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1677;
    F.filename = "parse.nim";
    var _ = init_520094673(forward_520103146, [58,70,111,114,119,97,114,100]);
    F.line = 1678;
    forward_520103146.flags[6] = true;
    F.line = 1679;
    forward_520103146.call = forwardWrapper_520100605;
    F.line = 1680;
    forward_520103146.recursionCounter = nimCopy(forward_520103146.recursionCounter, initTable_520103152(32), NTI520098442);
    F.line = 1681;
    result_520103147 = forward_520103146;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520103147;

}

function new_520103782() {
  var result_520103785 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_520103787 = null;
    F.line = 839;
    r_520103787 = ({m_type: NTI520098434, recursionCounter: ({data: [], counter: 0}), ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_520103785 = r_520103787;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520103785;

}

function HEX26_520100417(parser_520100418, other_520100419) {
  var result_520100420 = null;

  var F = {procname: "parse.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1530;
    F.filename = "parse.nim";
    result_520100420 = init_520099947(new_520100038(), [parser_520100418, other_520100419], 1073741824);
  framePtr = F.prev;

  return result_520100420;

}

function min_520100367(x_520100369, y_520100370) {
    var Temporary1;

  var result_520100371 = 0;

    if ((x_520100369 <= y_520100370)) {
    Temporary1 = x_520100369;
    }
    else {
    Temporary1 = y_520100370;
    }
    
    result_520100371 = Temporary1;

  return result_520100371;

}

function mergeErrorLists_520098217(left_520098218, right_520098219) {
  var F = {procname: "parse.mergeErrorLists", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 859;
      F.filename = "parse.nim";
      var m_520098223 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104158 = 0;
      F.line = 242;
      var L_520104159 = (right_520098219.skipList).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104158 < L_520104159)) break Label3;
            F.line = 859;
            F.filename = "parse.nim";
            m_520098223 = right_520098219.skipList[chckIndx(i_520104158, 0, (right_520098219.skipList).length - 1)];
            F.line = 859;
            var Temporary4 = nimCopy(null, m_520098223, NTI520093758);
            left_520098218.skipList.push(Temporary4);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104158 = addInt(i_520104158, 1);
            if (!(((right_520098219.skipList).length == L_520104159))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label5: {
      F.line = 860;
      F.filename = "parse.nim";
      var m_520098231 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104162 = 0;
      F.line = 242;
      var L_520104163 = (right_520098219.resumeList).length;
      Label6: {
        F.line = 243;
          Label7: while (true) {
          if (!(i_520104162 < L_520104163)) break Label7;
            F.line = 860;
            F.filename = "parse.nim";
            m_520098231 = right_520098219.resumeList[chckIndx(i_520104162, 0, (right_520098219.resumeList).length - 1)];
            F.line = 860;
            var Temporary8 = nimCopy(null, m_520098231, NTI520093758);
            left_520098218.resumeList.push(Temporary8);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104162 = addInt(i_520104162, 1);
            if (!(((right_520098219.resumeList).length == L_520104163))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label9: {
      F.line = 861;
      F.filename = "parse.nim";
      var em_520098239 = {Field0: ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null}), Field1: []};
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104167 = 0;
      F.line = 242;
      var L_520104168 = (right_520098219.errorList).length;
      Label10: {
        F.line = 243;
          Label11: while (true) {
          if (!(i_520104167 < L_520104168)) break Label11;
            F.line = 861;
            F.filename = "parse.nim";
            em_520098239 = right_520098219.errorList[chckIndx(i_520104167, 0, (right_520098219.errorList).length - 1)];
            F.line = 861;
            var Temporary12 = nimCopy(null, em_520098239, NTI520093759);
            left_520098218.errorList.push(Temporary12);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104167 = addInt(i_520104167, 1);
            if (!(((right_520098219.errorList).length == L_520104168))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label13: {
      F.line = 862;
      F.filename = "parse.nim";
      var p_520098247 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104175 = 0;
      F.line = 242;
      var L_520104176 = (right_520098219.referredParsers).length;
      Label14: {
        F.line = 243;
          Label15: while (true) {
          if (!(i_520104175 < L_520104176)) break Label15;
            F.line = 862;
            F.filename = "parse.nim";
            p_520098247 = right_520098219.referredParsers[chckIndx(i_520104175, 0, (right_520098219.referredParsers).length - 1)];
            Label16: {
              Label17: {
                F.line = 864;
                var q_520098252 = null;
                F.line = 241;
                F.filename = "iterators.nim";
                var i_520104172 = 0;
                F.line = 242;
                var L_520104173 = (left_520098218.referredParsers).length;
                Label18: {
                  F.line = 243;
                    Label19: while (true) {
                    if (!(i_520104172 < L_520104173)) break Label19;
                      F.line = 864;
                      F.filename = "parse.nim";
                      q_520098252 = left_520098218.referredParsers[chckIndx(i_520104172, 0, (left_520098218.referredParsers).length - 1)];
                      if ((p_520098247 == q_520098252)) {
                      F.line = 865;
                      break Label16;
                      }
                      
                      F.line = 245;
                      F.filename = "iterators.nim";
                      i_520104172 = addInt(i_520104172, 1);
                      if (!(((left_520098218.referredParsers).length == L_520104173))) {
                      F.line = 246;
                      failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                };
              };
              F.line = 866;
              F.filename = "parse.nim";
              left_520098218.referredParsers.push(p_520098247);;
            };
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104175 = addInt(i_520104175, 1);
            if (!(((right_520098219.referredParsers).length == L_520104176))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  
}

function HEX3CHEX3C_520100361(left_520100362, right_520100363) {
  var F = {procname: "parse.<<", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (((1073741824 <= left_520100362.mandatory) && (right_520100363.mandatory < 1073741824))) {
    F.line = 1506;
    F.filename = "parse.nim";
    left_520100362.mandatory = min_520100367((((left_520100362.subParsers).length + right_520100363.mandatory) >>> 0), 1073741824);
    }
    
    F.line = 1507;
    add_520099813(left_520100362, "subParsers", right_520100363.subParsers);
    F.line = 1508;
    mergeErrorLists_520098217(left_520100362, right_520100363);
  framePtr = F.prev;

  
}

function HEX26_520100376(series_520100377, other_520100378) {
  var result_520100379 = null;

  var F = {procname: "parse.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(series_520100377.pname, []))) {
    F.line = 1511;
    F.filename = "parse.nim";
    result_520100379 = init_520099947(new_520100038(), [series_520100377, other_520100378], 1073741824);
    break BeforeRet;
    }
    
    if (eqStrings(name_520094768(other_520100378), [])) {
    F.line = 1513;
    HEX3CHEX3C_520100361(series_520100377, other_520100378);
    }
    else {
      F.line = 1515;
    series_520100377.subParsers.push(other_520100378);;
    }
    
    F.line = 1516;
    result_520100379 = series_520100377;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520100379;

}

function HEX26_520099908(x_520099910, y_520099911) {
  var result_520099912 = [];

  var F = {procname: "&.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1531;
    F.filename = "system.nim";
    result_520099912 = new Array(chckRange(addInt((x_520099910).length, (y_520099911).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_520099910).length, (y_520099911).length), 0, 2147483647) ; ++i) { result_520099912[i] = null; }    Label1: {
      F.line = 1532;
      var i_520099930 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520104179 = 0;
      F.line = 1532;
      F.filename = "system.nim";
      colontmp__520104179 = subInt((x_520099910).length, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520104180 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_520104180 <= colontmp__520104179)) break Label3;
            F.line = 1532;
            F.filename = "system.nim";
            i_520099930 = res_520104180;
            F.line = 1532;
            result_520099912[chckIndx(i_520099930, 0, (result_520099912).length - 1)] = x_520099910[chckIndx(i_520099930, 0, (x_520099910).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520104180 = addInt(res_520104180, 1);
          }
      };
    };
    Label4: {
      F.line = 1534;
      F.filename = "system.nim";
      var i_520099938 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520104183 = 0;
      F.line = 1534;
      F.filename = "system.nim";
      colontmp__520104183 = subInt((y_520099911).length, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520104184 = 0;
      Label5: {
        F.line = 91;
          Label6: while (true) {
          if (!(res_520104184 <= colontmp__520104183)) break Label6;
            F.line = 1534;
            F.filename = "system.nim";
            i_520099938 = res_520104184;
            F.line = 1534;
            result_520099912[chckIndx(addInt(i_520099938, (x_520099910).length), 0, (result_520099912).length - 1)] = y_520099911[chckIndx(i_520099938, 0, (y_520099911).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520104184 = addInt(res_520104184, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_520099912;

}

function HEX26_520100398(other_520100399, series_520100400) {
  var result_520100401 = null;

  var F = {procname: "parse.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(series_520100400.pname, []))) {
    F.line = 1524;
    F.filename = "parse.nim";
    result_520100401 = init_520099947(new_520100038(), [other_520100399, series_520100400], 1073741824);
    break BeforeRet;
    }
    
    F.line = 1525;
    series_520100400.subParsers = nimCopy(null, HEX26_520099908([other_520100399], series_520100400.subParsers), NTI520097950);
    if ((series_520100400.mandatory < 1073741824)) {
    F.line = 1527;
    series_520100400.mandatory = ((series_520100400.mandatory + 1) >>> 0);
    }
    
    F.line = 1528;
    result_520100401 = series_520100400;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520100401;

}

function set_520103181(forward_520103182, parser_520103183) {
  var F = {procname: "parse.set", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1687;
    F.filename = "parse.nim";
    forward_520103182.subParsers = nimCopy(null, [parser_520103183], NTI520097644);
    if (eqStrings(parser_520103183.pname, [])) {
    if (!(eqStrings(forward_520103182.pname, []))) {
    F.line = 1690;
    var _ = assignName_520094839(forward_520103182.pname, parser_520103183);
    F.line = 1691;
    forward_520103182.symbol = parser_520103183;
    }
    
    }
    
    if ((forward_520103182.flags[7] != undefined)) {
    F.line = 1692;
    parser_520103183.flags[7] = true;
    }
    
    if ((parser_520103183.flags[9] != undefined)) {
    F.line = 1694;
    forward_520103182.flags[9] = true;
    }
    else {
      if (!((forward_520103182.flags[7] != undefined))) {
      F.line = 1696;
      delete parser_520103183.flags[7];
      }
      
      F.line = 1697;
      delete forward_520103182.flags[9];
    }
    
    F.line = 1698;
    forward_520103182.pname = nimCopy(null, [], NTI33554449);
  framePtr = F.prev;

  
}

function Drop_520098757(parser_520098758) {
  var result_520098759 = null;

  var F = {procname: "parse.Drop", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 967;
    F.filename = "parse.nim";
    F.line = 967;
    parser_520098758.flags = nimCopy(parser_520098758.flags, SetPlus(parser_520098758.flags, ConstSet19), NTI520093762);
    result_520098759 = parser_520098758;
  framePtr = F.prev;

  return result_520098759;

}

function RegExp_520099218(reStr_520099219) {
    var Temporary1;

  var result_520099220 = null;

  var F = {procname: "parse.RegExp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1122;
    F.filename = "parse.nim";
    F.line = 1122;
    if (contains_1006634823(reStr_520099219, [10])) {
    Temporary1 = mrx_520093790(reStr_520099219);
    }
    else {
    Temporary1 = rx_520093766(reStr_520099219);
    }
    
    var reInfo_520099221 = nimCopy(null, Temporary1, NTI520093730);
    result_520099220 = init_520099192(new_520099222(), reInfo_520099221);
  framePtr = F.prev;

  return result_520099220;

}

function HEXC2HEXA7_520100034(parser_520100035) {
  var result_520100036 = null;

  var F = {procname: "parse.\xC2\xA7", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((eqStrings(parser_520100035.pname, []) && eqStrings(parser_520100035.ptype, [58,83,101,114,105,101,115]))) {
    F.line = 1451;
    F.filename = "parse.nim";
    var series_520100037 = parser_520100035;
    F.line = 1452;
    series_520100037.mandatory = 0;
    F.line = 1453;
    result_520100036 = series_520100037;
    break BeforeRet;
    }
    
    F.line = 1454;
    result_520100036 = init_520099947(new_520100038(), [parser_520100035], 0);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520100036;

}

function HEX26_520100387(series_520100388, other_520100389) {
  var result_520100390 = null;

  var F = {procname: "parse.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(series_520100388.pname, []))) {
    F.line = 1519;
    F.filename = "parse.nim";
    result_520100390 = init_520099947(new_520100038(), [series_520100388, other_520100389], 1073741824);
    break BeforeRet;
    }
    
    F.line = 1520;
    series_520100388.subParsers.push(other_520100389);;
    F.line = 1521;
    result_520100390 = series_520100388;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520100390;

}

function find_1040187446(a_1040187449, item_1040187450) {
  var result_1040187451 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1665;
    F.filename = "system.nim";
    result_1040187451 = 0;
    Label1: {
      F.line = 1666;
      var i_1040187455 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_520104199 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_520104199 < (a_1040187449).length)) break Label3;
            F.line = 1666;
            F.filename = "system.nim";
            i_1040187455 = a_1040187449[chckIndx(i_520104199, 0, (a_1040187449).length - 1)];
            if (eqStrings(i_1040187455, item_1040187450)) {
            F.line = 1667;
            break BeforeRet;
            }
            
            F.line = 1666;
            result_1040187451 = addInt(result_1040187451, 1);
            F.line = 16;
            F.filename = "iterators.nim";
            i_520104199 = addInt(i_520104199, 1);
          }
      };
    };
    F.line = 1669;
    F.filename = "system.nim";
    result_1040187451 = (-1);
  };
  framePtr = F.prev;

  return result_1040187451;

}

function contains_1040187441(a_1040187443, item_1040187444) {
  var result_1040187445 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1683;
    F.filename = "system.nim";
    result_1040187445 = (0 <= find_1040187446(a_1040187443, item_1040187444));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1040187445;

}

function setMatcherList_520098398(errorCatcher_520098400, list_520098401, listName_520098402) {
              var Temporary4;

  var F = {procname: "setMatcherList.setMatcherList", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!((errorCatcher_520098400.flags[5] != undefined))) {
    F.line = 869;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(869, 5) `\x0Acontains(errorCatcher.flags, isErrorCatching)` "));
    }
    
    F.line = 870;
    var catcher_520098412 = errorCatcher_520098400;
    if (eqStrings(listName_520098402, [101,114,114,111,114,115])) {
    if (!(((catcher_520098412.errorList).length == 0))) {
    F.line = 891;
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(891, 9) `catcher.errorList.len == 0` ") || []).concat(HEX24_520095036(catcher_520098412) || [],[58,32,115,107,105,112,76,105,115,116,32,99,97,110,110,111,116,32,98,101,32,115,101,116,32,116,119,105,99,101,33] || []));
    }
    
    F.line = 892;
    catcher_520098412.errorList = nimCopy(null, list_520098401, NTI520096546);
    }
    else {
      F.line = 894;
      raiseException({message: ([70,111,114,32,116,121,112,101,32,84,32,61,32,77,97,116,99,104,101,114,44,32,108,105,115,116,78,97,109,101,32,109,117,115,116,32,98,101,32,34,101,114,114,111,114,115,34,44,32,98,117,116,32,110,111,116,32,34] || []).concat(listName_520098402 || [],[34,33] || []), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
    }
    
    if (!((errorCatcher_520098400.grammarVar == GrammarPlaceholder_520094178))) {
    Label1: {
      F.line = 897;
      var em_520098429 = {Field0: ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null}), Field1: []};
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104202 = 0;
      F.line = 242;
      var L_520104203 = (list_520098401).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104202 < L_520104203)) break Label3;
            F.line = 897;
            F.filename = "parse.nim";
            em_520098429 = list_520098401[chckIndx(i_520104202, 0, (list_520098401).length - 1)];
            F.line = 898;
            var matcher_520098430 = nimCopy(null, em_520098429.Field0, NTI520093758);
            F.line = 897;
            switch (matcher_520098430.kind) {
            case 3:
              F.line = 901;
              var Temporary4 = matcher_520098430;
              if (ConstSet21[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI520093756)); }
              grammarHEX3D_520095261(Temporary4.consumeParser, grammar_520095212(errorCatcher_520098400));
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104202 = addInt(i_520104202, 1);
            if (!(((list_520098401).length == L_520104203))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  framePtr = F.prev;

  
}

function anonSubs_520095090(parser_520095091) {
  var result_520095092 = [];

  var F = {procname: "parse.anonSubs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 324;
    F.filename = "parse.nim";
    F.line = 324;
    var collectResult_520095093 = [];
    Label1: {
      F.line = 325;
      var p_520095111 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104206 = 0;
      F.line = 242;
      var L_520104207 = (parser_520095091.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104206 < L_520104207)) break Label3;
            F.line = 325;
            F.filename = "parse.nim";
            p_520095111 = parser_520095091.subParsers[chckIndx(i_520104206, 0, (parser_520095091.subParsers).length - 1)];
            if ((((name_520094768(p_520095111)).length == 0) || (parser_520095091.flags[6] != undefined))) {
            F.line = 341;
            F.filename = "sugar.nim";
            collectResult_520095093.push(p_520095111);;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104206 = addInt(i_520104206, 1);
            if (!(((parser_520095091.subParsers).length == L_520104207))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    result_520095092 = nimCopy(null, collectResult_520095093, NTI520094509);
  framePtr = F.prev;

  return result_520095092;

}

function isActive_520098023(catcher_520098024) {
  var result_520098025 = false;

  var F = {procname: "parse.isActive", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 787;
    F.filename = "parse.nim";
    result_520098025 = (catcher_520098024.mandatory < 1073741824);
  framePtr = F.prev;

  return result_520098025;

}

function attachMatchers_520098318(parser_520098320, list_520098321, listName_520098322, failIfAmbiguous_520098323) {
                var Temporary8;

  var F = {procname: "attachMatchers.attachMatchers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!(contains_1040187441(ErrorCatcherListNames_520098301, listName_520098322))) {
    F.line = 909;
    F.filename = "parse.nim";
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(909, 3) `\x0Acontains(ErrorCatcherListNames, listName)` ") || []).concat(listName_520098322 || [],[105,115,32,110,111,116,32,111,110,101,32,111,102,32] || [],nsuJoinSep(ErrorCatcherListNames_520098301, [44,32]) || []));
    }
    
    if (!((0 < (list_520098321).length))) {
    F.line = 911;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(911, 3) `\x0A0 < list.len` Empty lists are not allowed"));
    }
    
    if ((parser_520098320.flags[5] != undefined)) {
    F.line = 913;
    setMatcherList_520098398(parser_520098320, list_520098321, listName_520098322);
    }
    else {
      F.line = 916;
      var pname_520098435 = nimCopy(null, parser_520098320.pname, NTI33554449);
      F.line = 917;
      var ptype_520098436 = nimCopy(null, parser_520098320.ptype, NTI33554449);
      F.line = 918;
      var lname_520098437 = nimCopy(null, listName_520098322, NTI33554449);
      F.line = 919;
      Label1: {
        F.line = 919;
        var fmtRes_520098442 = [mnewString(0)];
        F.line = 919;
        fmtRes_520098442[0].push.apply(fmtRes_520098442[0], [80,97,114,115,101,114,32]);;
        F.line = 919;
        formatValue_922747051(fmtRes_520098442, 0, pname_520098435, []);
        F.line = 919;
        fmtRes_520098442[0].push.apply(fmtRes_520098442[0], [58]);;
        F.line = 919;
        formatValue_922747051(fmtRes_520098442, 0, ptype_520098436, []);
        F.line = 919;
        fmtRes_520098442[0].push.apply(fmtRes_520098442[0], [32,99,111,110,116,97,105,110,115,32,109,111,114,101,32,116,104,97,110,32]);;
      };
      Label2: {
        F.line = 921;
        var fmtRes_520098447 = [mnewString(0)];
        F.line = 921;
        fmtRes_520098447[0].push.apply(fmtRes_520098447[0], [32,117,110,99,108,101,97,114,32,116,111,32,119,104,105,99,104,32,111,102,32,116,104,101,115,101,32,116,104,101,32]);;
        F.line = 921;
        formatValue_922747051(fmtRes_520098447, 0, lname_520098437, []);
        F.line = 921;
        fmtRes_520098447[0].push.apply(fmtRes_520098447[0], [32,115,104,111,117,108,100,32,98,101,32,97,116,116,97,99,104,101,100,33]);;
      };
      var ambigErr_520098448 = (fmtRes_520098442[0] || []).concat(makeNimstrLit("one error catching parser (Series or Interleave), so that it remains") || [],fmtRes_520098447[0] || []);
      F.line = 922;
      Label3: {
        F.line = 922;
        var fmtRes_520098453 = [mnewString(0)];
        F.line = 922;
        fmtRes_520098453[0].push.apply(fmtRes_520098453[0], [80,97,114,115,101,114,32]);;
        F.line = 922;
        formatValue_922747051(fmtRes_520098453, 0, pname_520098435, []);
        F.line = 922;
        fmtRes_520098453[0].push.apply(fmtRes_520098453[0], [58]);;
        F.line = 922;
        formatValue_922747051(fmtRes_520098453, 0, ptype_520098436, []);
        F.line = 922;
        fmtRes_520098453[0].push.apply(fmtRes_520098453[0], [32,110,101,105,116,104,101,114,32]);;
      };
      Label4: {
        F.line = 924;
        var fmtRes_520098458 = [mnewString(0)];
        F.line = 924;
        formatValue_922747051(fmtRes_520098458, 0, lname_520098437, []);
        F.line = 924;
        fmtRes_520098458[0].push.apply(fmtRes_520098458[0], [32,99,111,117,108,100,32,98,101,32,97,116,116,97,99,104,101,100,33]);;
      };
      var notAcatcherErr_520098459 = (fmtRes_520098453[0] || []).concat([99,111,110,116,97,105,110,115,32,97,110,121,32,110,111,114,32,105,115,32,105,116,115,101,108,102,32,97,110,32,101,114,114,111,114,32,99,97,116,99,104,105,110,103,32,112,97,114,115,101,114,32,116,111,32,119,104,105,99,104,32] || [],fmtRes_520098458[0] || []);
      F.line = 925;
      var ambiguityFlag_520098460 = false;
      Label5: {
        F.line = 926;
        var p_520098464 = null;
        F.line = 239;
        F.filename = "iterators.nim";
        var colontmp__520104193 = [];
        F.line = 376;
        F.filename = "parse.nim";
        colontmp__520104193 = descendants_520095168(parser_520098320, anonSubs_520095090);
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520104194 = 0;
        F.line = 242;
        var L_520104195 = (colontmp__520104193).length;
        Label6: {
          F.line = 243;
            Label7: while (true) {
            if (!(i_520104194 < L_520104195)) break Label7;
              F.line = 376;
              F.filename = "parse.nim";
              p_520098464 = colontmp__520104193[chckIndx(i_520104194, 0, (colontmp__520104193).length - 1)];
                if (!(p_520098464.flags[5] != undefined)) Temporary8 = false; else {                  Temporary8 = isActive_520098023(p_520098464);                }              if (Temporary8) {
              if (ambiguityFlag_520098460) {
              F.line = 929;
              raiseException({message: nimCopy(null, ambigErr_520098448, NTI33554449), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
              }
              
              F.line = 930;
              setMatcherList_520098398(p_520098464, list_520098321, listName_520098322);
              F.line = 931;
              if (p_520098464.referredParsers.length < 0) { for (var i = p_520098464.referredParsers.length ; i < 0 ; ++i) p_520098464.referredParsers.push(null); }
               else { p_520098464.referredParsers.length = 0; };
              if (!(failIfAmbiguous_520098323)) {
              F.line = 933;
              break Label5;
              }
              
              F.line = 934;
              ambiguityFlag_520098460 = true;
              }
              
              F.line = 245;
              F.filename = "iterators.nim";
              i_520104194 = addInt(i_520104194, 1);
              if (!(((colontmp__520104193).length == L_520104195))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 378;
      F.filename = "parse.nim";
      resetTraversalTracker_520095193(parser_520098320);
      if (!(ambiguityFlag_520098460)) {
      F.line = 936;
      rawEcho(name_520094768(parser_520098320.subParsers[chckIndx(0, 0, (parser_520098320.subParsers).length - 1)]));
      F.line = 937;
      raiseException({message: nimCopy(null, notAcatcherErr_520098459, NTI33554449), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
      }
      
    }
    
  framePtr = F.prev;

  
}

function error_520098480(parser_520098481, error_520098482, unambig_520098483) {
  var F = {procname: "parse.error", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 944;
    F.filename = "parse.nim";
    attachMatchers_520098318(parser_520098481, [nimCopy(null, error_520098482, NTI520093759)], [101,114,114,111,114,115], unambig_520098483);
  framePtr = F.prev;

  
}
var F = {procname: "module parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
framePtr = F;
F.line = 19;
F.filename = "parse.nim";
var NeverMatchRegex_520093760 = ure_520093736([36,46]);
F.line = 160;
var EmptyNode_520093990 = init_520093968(new_1174405827(), [58,69,77,80,84,89], [], null);
F.line = 196;
var GrammarPlaceholder_520094178 = init_520094065(new_520094139(), [95,95,80,108,97,99,101,104,111,108,100,101,114,95,95], ConstSet2, EmptyStringSlice_1140850747, returnItemPlaceholder_520093997, returnSeqPlaceholder_520094000);
F.line = 745;
var anyPassage_520097852 = {kind: 1, cmpStr: [], rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, findProc: null, consumeParser: null};
F.line = 1159;
var RxNeverMatch_520099300 = nimCopy(null, {Field0: [36,46], Field1: nimCopy(null, NeverMatchRegex_520093760, NTI1140850938)}, NTI520093730);
F.line = 1744;
var doc_520103310 = assignName_520094839([116,101,120,116], init_520098784(new_520103270(), [88]));
F.line = 1745;
var cst_520103381 = HEX28HEX29_520103311(doc_520103310, [88], 0);
F.line = 1746;
rawEcho(HEX24_520103382(cst_520103381));
F.line = 1747;
rawEcho(asSxpr_1174405705(HEX28HEX29_520103311(init_520098784(new_520103270(), [65]), [65], 0).Field0));
if (!(eqStrings(asSxpr_1174405705(HEX28HEX29_520103311(init_520098784(new_520103270(), [65]), [65], 0).Field0), [40,58,84,101,120,116,32,34,65,34,41]))) {
F.line = 1748;
failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1748, 3) `Text(\"A\")(\"A\").root.asSxpr == \"(:Text \\\"A\\\")\"` "));
}

F.line = 1749;
rawEcho(asSxpr_1174405705(HEX28HEX29_520103311(init_520099192(new_520099222(), rx_520093766([92,119,43])), [65,66,67], 0).Field0));
if (!(eqStrings(asSxpr_1174405705(HEX28HEX29_520103311(init_520099192(new_520099222(), rx_520093766([92,119,43])), [65,66,67], 0).Field0), [40,58,82,101,103,69,120,112,32,34,65,66,67,34,41]))) {
F.line = 1750;
failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1750, 3) `RegExp(rx\"\\w+\")(\"ABC\").root.asSxpr == \"(:RegExp \\\"ABC\\\")\"` "));
}

F.line = 1751;
rawEcho(asSxpr_1174405705(HEX28HEX29_520103311(Whitespace_520099337([92,115,43], [35,46,42]), [32,32,32,35,32,99,111,109,109,101,110,116], 0).Field0));
if (!(eqStrings(asSxpr_1174405705(HEX28HEX29_520103311(Whitespace_520099337([92,115,43], [35,46,42]), [32,32,32,35,32,99,111,109,109,101,110,116], 0).Field0), [40,58,87,104,105,116,101,115,112,97,99,101,32,34,32,32,32,35,32,99,111,109,109,101,110,116,34,41]))) {
F.line = 1752;
failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1752, 3) `Whitespace(r\"\\s+\", r\"#.*\")(\"   # comment\").root.asSxpr ==\x0A    \"(:Whitespace \\\"   # comment\\\")\"` "));
}

F.line = 1753;
rawEcho(asSxpr_1174405705(HEX28HEX29_520103311(init_520099475(new_520103610(), init_520098784(new_520103270(), [65]), {Field0: 1, Field1: 3}, [58,82,101,112,101,97,116]), [65,65,65,65], 0).Field0));
F.line = 1754;
rawEcho(asSxpr_1174405705(HEX28HEX29_520103311(assignName_520094839([114], init_520099475(new_520103610(), init_520098784(new_520103270(), [65]), {Field0: 1, Field1: 3}, [58,82,101,112,101,97,116])), [65,65], 0).Field0));
F.line = 1755;
rawEcho(asSxpr_1174405705(HEX28HEX29_520103311(init_520099947(new_520100038(), [init_520098784(new_520103270(), [65]), init_520098784(new_520103270(), [66]), init_520098784(new_520103270(), [67])], 1), [65,66,67], 0).Field0));
F.line = 1756;
++excHandler;
try {
F.line = 1757;
rawEcho(asSxpr_1174405705(HEX28HEX29_520103311(init_520099947(new_520100038(), [init_520098784(new_520103270(), [65]), init_520098784(new_520103270(), [66]), init_520098784(new_520103270(), [67])], 1), [65,66,88], 0).Field0));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI520093774))) {
F.line = 1759;
rawEcho([69,120,112,101,99,116,101,100,32,69,120,99,101,112,116,105,111,110]);
}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
F.line = 1760;
rawEcho(asSxpr_1174405705(HEX28HEX29_520103311(init_520099689(new_520099778(), [init_520098784(new_520103270(), [65]), init_520098784(new_520103270(), [66])]), [66], 0).Field0));
if (!(eqStrings(asSxpr_1174405705(HEX28HEX29_520103311(init_520099689(new_520099778(), [init_520098784(new_520103270(), [65]), init_520098784(new_520103270(), [66])]), [66], 0).Field0), [40,58,84,101,120,116,32,34,66,34,41]))) {
F.line = 1761;
failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1761, 3) `Alternative(Text(\"A\"), Text(\"B\"))(\"B\").root.asSxpr == \"(:Text \\\"B\\\")\"` "));
}

if (!(eqStrings(HEX24_520095036(init_520099689(new_520099778(), [init_520098784(new_520103270(), [65]), init_520098784(new_520103270(), [66])])), [34,65,34,124,34,66,34]))) {
F.line = 1762;
failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1762, 3) `$Alternative(Text(\"A\"), Text(\"B\")) == \"\\\"A\\\"|\\\"B\\\"\"` "));
}

if (!(eqStrings(HEX24_520095036(init_520099947(new_520100038(), [init_520098784(new_520103270(), [65]), init_520098784(new_520103270(), [66]), init_520098784(new_520103270(), [67])], 1)), [34,65,34,32,194,167,34,66,34,32,34,67,34]))) {
F.line = 1763;
failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1763, 3) `$Series(Text(\"A\"), Text(\"B\"), Text(\"C\"), mandatory = 1\'u32) ==\x0A    \"\\\"A\\\" \xC2\xA7\\\"B\\\" \\\"C\\\"\"` "));
}

F.line = 1764;
rawEcho(HEX24_520095036(HEX7C_520099774(init_520099689(new_520099778(), [init_520098784(new_520103270(), [65]), init_520098784(new_520103270(), [66])]), HEX7C_520099886(init_520099689(new_520099778(), [init_520098784(new_520103270(), [67]), init_520098784(new_520103270(), [68])]), init_520098784(new_520103270(), [69])))));
F.line = 1766;
var root_520103820 = assignName_520094839([114,111,111,116], init_520103145(new_520103782()));
F.line = 1767;
var t_520103825 = assignName_520094839([116], HEX26_520100417(init_520098784(new_520103270(), [65]), root_520103820));
F.line = 1768;
var s_520103827 = assignName_520094839([115], HEX26_520100376(HEX26_520100398(root_520103820, t_520103825), t_520103825));
F.line = 1769;
set_520103181(root_520103820, s_520103827);
F.line = 1770;
rawEcho(HEX24_520095036(root_520103820));
F.line = 1771;
rawEcho(HEX24_520095036(t_520103825));
F.line = 1772;
rawEcho(HEX24_369098760((root_520103820.subParsers[chckIndx(0, 0, (root_520103820.subParsers).length - 1)].subParsers).length));
F.line = 1773;
rawEcho(HEX24_520095036(s_520103827));
F.line = 1774;
rawEcho(type_520094761(t_520103825));
F.line = 1775;
rawEcho([32]);
F.line = 1776;
grammarHEX3D_520095261(root_520103820, init_520094065(new_520094139(), [97,100,104,111,99,49], ConstSet18, EmptyStringSlice_1140850747, returnItemFlatten_520093991, returnSeqFlatten_520093994));
F.line = 1778;
var WS_520103835 = assignName_520094839([87,83], Drop_520098757(RegExp_520099218([92,115,42])));
F.line = 1779;
var NUMBER_520103837 = assignName_520094839([58,78,85,77,66,69,82], HEX26_520100417(RegExp_520099218([40,63,58,48,124,40,63,58,91,49,45,57,93,92,100,42,41,41,40,63,58,92,46,92,100,43,41,63]), WS_520103835));
F.line = 1780;
var sign_520103848 = assignName_520094839([115,105,103,110], HEX26_520100417(init_520099689(new_520099778(), [init_520098784(new_520103270(), [43]), init_520098784(new_520103270(), [45])]), WS_520103835));
F.line = 1781;
var expression_520103853 = assignName_520094839([101,120,112,114,101,115,115,105,111,110], init_520103145(new_520103782()));
F.line = 1782;
var group_520103861 = assignName_520094839([103,114,111,117,112], HEX26_520100376(HEX26_520100417(init_520098784(new_520103270(), [40]), WS_520103835), HEXC2HEXA7_520100034(HEX26_520100387(HEX26_520100417(expression_520103853, init_520098784(new_520103270(), [41])), WS_520103835))));
F.line = 1783;
var factor_520103869 = assignName_520094839([102,97,99,116,111,114], HEX26_520100417(init_520099475(new_520103610(), sign_520103848, {Field0: 0, Field1: 1}, [58,79,112,116,105,111,110]), init_520099689(new_520099778(), [NUMBER_520103837, group_520103861])));
F.line = 1784;
var term_520103883 = assignName_520094839([116,101,114,109], HEX26_520100387(factor_520103869, init_520099475(new_520103610(), HEX26_520100376(HEX26_520100417(init_520099689(new_520099778(), [init_520098784(new_520103270(), [42]), init_520098784(new_520103270(), [47])]), WS_520103835), HEXC2HEXA7_520100034(factor_520103869)), {Field0: 0, Field1: 1073741824}, [58,90,101,114,111,79,114,77,111,114,101])));
F.line = 1785;
set_520103181(expression_520103853, HEX26_520100387(term_520103883, init_520099475(new_520103610(), HEX26_520100376(HEX26_520100417(init_520099689(new_520099778(), [init_520098784(new_520103270(), [43]), init_520098784(new_520103270(), [45])]), WS_520103835), HEXC2HEXA7_520100034(term_520103883)), {Field0: 0, Field1: 1073741824}, [58,90,101,114,111,79,114,77,111,114,101])));
F.line = 1786;
grammarHEX3D_520095261(expression_520103853, init_520094065(new_520094139(), [65,114,105,116,104,109,101,116,105,99], ConstSet20, EmptyStringSlice_1140850747, returnItemFlatten_520093991, returnSeqFlatten_520093994));
F.line = 1788;
error_520098480(expression_520103853, {Field0: nimCopy(null, anyPassage_520097852, NTI520093758), Field1: [90,97,104,108,32,111,100,101,114,32,65,117,115,100,114,117,99,107,32,101,114,119,97,114,116,101,116,44,32,97,98,101,114,32,110,105,99,104,116,32,123,49,125]}, true);
framePtr = F.prev;
var F = {procname: "module parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function sysFatal_33557113(message_33557116) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_33557116, NTI33554449), m_type: NTI134217763, parent: null, name: null, trace: [], up: null}, "NilAccessDefect");
  framePtr = F.prev;

  
}

function chckNilDisp(p_33557112, p_33557112_Idx) {
    if ((p_33557112 == null && p_33557112_Idx == 0)) {
    sysFatal_33557113([99,97,110,110,111,116,32,100,105,115,112,97,116,99,104,59,32,100,105,115,112,97,116,99,104,101,114,32,105,115,32,110,105,108]);
    }
    

  
}

function clear_520094235(t_520094238) {
  var F = {procname: "clear.clear", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 151;
      F.filename = "tableimpl.nim";
      var i_520094302 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__520104210 = 0;
      F.line = 151;
      F.filename = "tableimpl.nim";
      colontmp__520104210 = (t_520094238.data).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520104211 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520104211 < colontmp__520104210)) break Label3;
            F.line = 151;
            F.filename = "tableimpl.nim";
            i_520094302 = i_520104211;
            F.line = 153;
            t_520094238.data[chckIndx(i_520094302, 0, (t_520094238.data).length - 1)].Field0 = 0;
            F.line = 154;
            t_520094238.data[chckIndx(i_520094302, 0, (t_520094238.data).length - 1)].Field1 = 0;
            F.line = 155;
            t_520094238.data[chckIndx(i_520094302, 0, (t_520094238.data).length - 1)].Field2 = nimCopy(t_520094238.data[chckIndx(i_520094302, 0, (t_520094238.data).length - 1)].Field2, {Field0: null, Field1: 0}, NTI520093753);
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520104211 = addInt(i_520104211, 1);
          }
      };
    };
    F.line = 156;
    F.filename = "tableimpl.nim";
    t_520094238.counter = 0;
  framePtr = F.prev;

  
}

function cleanUp_520094182(self_520094183) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 208;
    F.filename = "parse.nim";
    clear_520094235(self_520094183.visited);
  framePtr = F.prev;

  
}

function cleanUp_520103238(self_520103239) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1728;
    F.filename = "parse.nim";
    cleanUp_520094182(self_520103239);
  framePtr = F.prev;

  
}

function clear_520102727(t_520102730) {
  var F = {procname: "clear.clear", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 151;
      F.filename = "tableimpl.nim";
      var i_520102793 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__520104214 = 0;
      F.line = 151;
      F.filename = "tableimpl.nim";
      colontmp__520104214 = (t_520102730.data).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520104215 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520104215 < colontmp__520104214)) break Label3;
            F.line = 151;
            F.filename = "tableimpl.nim";
            i_520102793 = i_520104215;
            F.line = 153;
            t_520102730.data[chckIndx(i_520102793, 0, (t_520102730.data).length - 1)].Field0 = 0;
            F.line = 154;
            t_520102730.data[chckIndx(i_520102793, 0, (t_520102730.data).length - 1)].Field1 = 0;
            F.line = 155;
            t_520102730.data[chckIndx(i_520102793, 0, (t_520102730.data).length - 1)].Field2 = 0;
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520104215 = addInt(i_520104215, 1);
          }
      };
    };
    F.line = 156;
    F.filename = "tableimpl.nim";
    t_520102730.counter = 0;
  framePtr = F.prev;

  
}

function cleanUp_520102674(self_520102675) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1673;
    F.filename = "parse.nim";
    clear_520102727(self_520102675.recursionCounter);
    F.line = 1674;
    cleanUp_520094182(self_520102675);
  framePtr = F.prev;

  
}

function cleanUp_520094672(self_520094183) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_520094183);
    if (isObj(self_520094183.m_type, NTI520099792)) {
    F.line = 207;
    F.filename = "parse.nim";
    cleanUp_520103238(self_520094183);
    }
    else {
    if (isObj(self_520094183.m_type, NTI520098434)) {
    F.line = 207;
    cleanUp_520102674(self_520094183);
    }
    else {
    if (isObj(self_520094183.m_type, NTI520093764)) {
    F.line = 207;
    cleanUp_520094182(self_520094183);
    }
    }}
  framePtr = F.prev;

  
}

function HEX24_520098838(self_520098839) {
  var result_520098840 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1028;
    F.filename = "parse.nim";
    result_520098840 = nimCopy(null, nsuJoinSep([[34], nsuReplaceStr(self_520098839.text, [34], [92,34]), [34]], []), NTI33554449);
  framePtr = F.prev;

  return result_520098840;

}

function HEX24_520099297(self_520099298) {
  var result_520099299 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1143;
    F.filename = "parse.nim";
    result_520099299 = nimCopy(null, nsuJoinSep([[47], nsuReplaceStr(self_520099298.reInfo.Field0, [47], [92,47]), [47]], []), NTI33554449);
  framePtr = F.prev;

  return result_520099299;

}

function HEX24_520099186(self_520099187) {
  var result_520099188 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1096;
    F.filename = "parse.nim";
    result_520099188 = nimCopy(null, nsuJoinSep([[105,99,34], nsuReplaceStr(self_520099187.text, [34], [92,34]), [34]], []), NTI33554449);
  framePtr = F.prev;

  return result_520099188;

}

function HEX3DHEX3D_520099674(x_520099676, y_520099677) {
  var result_520099678 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((x_520099676["Field0"] == y_520099677["Field0"]))) {
    F.line = 1708;
    F.filename = "system.nim";
    result_520099678 = false;
    break BeforeRet;
    }
    
    if (!((x_520099676["Field1"] == y_520099677["Field1"]))) {
    F.line = 1708;
    result_520099678 = false;
    break BeforeRet;
    }
    
    F.line = 1709;
    result_520099678 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099678;

}

function HEX24_520099607(self_520099608) {
    var Temporary1;
      var Temporary2;
    var Temporary3;
    var Temporary4;
    var Temporary5;
    var Temporary6;

  var result_520099609 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1326;
    F.filename = "parse.nim";
    F.line = 1327;
    var postfix_520099614 = (grammar_520095212(self_520099608).flags[0] != undefined);
    F.line = 1328;
    var subP_520099615 = self_520099608.subParsers[chckIndx(0, 0, (self_520099608.subParsers).length - 1)];
    F.line = 1330;
    var subStr_520099616 = [];
    if (((postfix_520099614 && eqStrings(name_520094768(subP_520099615), [])) && contains_1040187441(NaryParsers_520093961, type_520094761(subP_520099615)))) {
    F.line = 1334;
    if (!(eqStrings(self_520099608.subParsers[chckIndx(0, 0, (self_520099608.subParsers).length - 1)].pname, []))) {
    Temporary1 = self_520099608.subParsers[chckIndx(0, 0, (self_520099608.subParsers).length - 1)].pname;
    }
    else {
    Temporary1 = HEX24_520095036(self_520099608.subParsers[chckIndx(0, 0, (self_520099608.subParsers).length - 1)]);
    }
    
    subStr_520099616 = nimCopy(null, nsuJoinSep([[40], nimCopy(null, Temporary1, NTI33554449), [41]], []), NTI33554449);
    }
    else {
      F.line = 1336;
      if (!(eqStrings(self_520099608.subParsers[chckIndx(0, 0, (self_520099608.subParsers).length - 1)].pname, []))) {
      Temporary2 = self_520099608.subParsers[chckIndx(0, 0, (self_520099608.subParsers).length - 1)].pname;
      }
      else {
      Temporary2 = HEX24_520095036(self_520099608.subParsers[chckIndx(0, 0, (self_520099608.subParsers).length - 1)]);
      }
      
      subStr_520099616 = nimCopy(null, Temporary2, NTI33554449);
    }
    
    if (HEX3DHEX3D_520099674(self_520099608.repRange, {Field0: 0, Field1: 1})) {
    if (postfix_520099614) {
    Temporary4 = (subStr_520099616 || []).concat([63] || []);
    }
    else {
    Temporary4 = nsuJoinSep([[91], nimCopy(null, subStr_520099616, NTI33554449), [93]], []);
    }
    
    Temporary3 = Temporary4;
    }
    else {
    if (((self_520099608.repRange["Field0"] == 0) && (1073741824 <= self_520099608.repRange["Field1"]))) {
    if (postfix_520099614) {
    Temporary5 = (subStr_520099616 || []).concat([42] || []);
    }
    else {
    Temporary5 = nsuJoinSep([[123], nimCopy(null, subStr_520099616, NTI33554449), [125]], []);
    }
    
    Temporary3 = Temporary5;
    }
    else {
    if (((self_520099608.repRange["Field0"] == 1) && (1073741824 <= self_520099608.repRange["Field1"]))) {
    if (postfix_520099614) {
    Temporary6 = (subStr_520099616 || []).concat([43] || []);
    }
    else {
    Temporary6 = nsuJoinSep([[123], nimCopy(null, subStr_520099616, NTI33554449), [125,43]], []);
    }
    
    Temporary3 = Temporary6;
    }
    else {
      F.line = 1347;
      var tmpTuple_520099684 = nimCopy(null, self_520099608.repRange, NTI520097629);
      F.line = 1347;
      var min_520099685 = tmpTuple_520099684["Field0"];
      F.line = 1347;
      var max_520099686 = tmpTuple_520099684["Field1"];
    Temporary3 = nsuJoinSep([nimCopy(null, subStr_520099616, NTI33554449), [40], HEX24_369098766(BigInt(min_520099685)), [44,32], HEX24_369098766(BigInt(max_520099686)), [41]], []);
    }
    }}
    result_520099609 = nimCopy(null, Temporary3, NTI33554449);
  framePtr = F.prev;

  return result_520099609;

}

function HEX24_520099455(self_520099456) {
  var result_520099457 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1213;
    F.filename = "parse.nim";
    result_520099457 = nimCopy(null, [126], NTI33554449);
  framePtr = F.prev;

  return result_520099457;

}

function HEX24_520100168(self_520100169) {
              var Temporary5;
              var Temporary6;

  var result_520100170 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1492;
    F.filename = "parse.nim";
    F.line = 1492;
    F.line = 1492;
    var collectResult_520100171 = [];
    Label1: {
      F.line = 1493;
      var i_520100247 = (-1);
      Label2: {
        F.line = 1493;
        var subP_520100251 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520104219 = 0;
        F.line = 242;
        var L_520104220 = (self_520100169.subParsers).length;
        Label3: {
          F.line = 243;
            Label4: while (true) {
            if (!(i_520104219 < L_520104220)) break Label4;
              F.line = 1494;
              F.filename = "parse.nim";
              subP_520100251 = self_520100169.subParsers[chckIndx(i_520104219, 0, (self_520100169.subParsers).length - 1)];
              F.line = 1494;
              i_520100247 = addInt(i_520100247, 1);
              F.line = 1495;
              if (!(eqStrings(subP_520100251.pname, []))) {
              Temporary5 = subP_520100251.pname;
              }
              else {
              Temporary5 = HEX24_520095036(subP_520100251);
              }
              
              var subStr_520100257 = nimCopy(null, Temporary5, NTI33554449);
              F.line = 1496;
              if ((i_520100247 == chckRange(self_520100169.mandatory, (-2147483648), 2147483647))) {
              Temporary6 = [194,167];
              }
              else {
              Temporary6 = [];
              }
              
              var marker_520100258 = nimCopy(null, Temporary6, NTI33554449);
              if ((contains_1040187441([[58,65,108,116,101,114,110,97,116,105,118,101], [58,83,101,114,105,101,115]], type_520094761(subP_520100251)) && eqStrings(name_520094768(subP_520100251), []))) {
              F.line = 341;
              F.filename = "sugar.nim";
              collectResult_520100171.push(nsuJoinSep([nimCopy(null, marker_520100258, NTI33554449), [40], nimCopy(null, subStr_520100257, NTI33554449), [41]], []));;
              }
              else {
                if (!(eqStrings(marker_520100258, []))) {
                F.line = 341;
                collectResult_520100171.push((marker_520100258 || []).concat(subStr_520100257 || []));;
                }
                else {
                  F.line = 341;
                  var Temporary7 = nimCopy(null, subStr_520100257, NTI33554449);
                collectResult_520100171.push(Temporary7);;
                }
                
              }
              
              F.line = 245;
              F.filename = "iterators.nim";
              i_520104219 = addInt(i_520104219, 1);
              if (!(((self_520100169.subParsers).length == L_520104220))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
    var subStrs_520100328 = nimCopy(null, collectResult_520100171, NTI520094459);
    result_520100170 = nimCopy(null, nsuJoinSep(subStrs_520100328, [32]), NTI33554449);
  framePtr = F.prev;

  return result_520100170;

}

function HEX24_520099751(self_520099752) {
            var Temporary4;

  var result_520099753 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1383;
    F.filename = "parse.nim";
    F.line = 1383;
    F.line = 1383;
    var collectResult_520099754 = [];
    Label1: {
      F.line = 1384;
      var subP_520099768 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104223 = 0;
      F.line = 242;
      var L_520104224 = (self_520099752.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104223 < L_520104224)) break Label3;
            F.line = 1384;
            F.filename = "parse.nim";
            subP_520099768 = self_520099752.subParsers[chckIndx(i_520104223, 0, (self_520099752.subParsers).length - 1)];
            F.line = 1384;
            if (!(eqStrings(subP_520099768.pname, []))) {
            Temporary4 = subP_520099768.pname;
            }
            else {
            Temporary4 = HEX24_520095036(subP_520099768);
            }
            
            var Temporary5 = nimCopy(null, Temporary4, NTI33554449);
            collectResult_520099754.push(Temporary5);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104223 = addInt(i_520104223, 1);
            if (!(((self_520099752.subParsers).length == L_520104224))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    var subStrs_520099773 = nimCopy(null, collectResult_520099754, NTI520094459);
    result_520099753 = nimCopy(null, nsuJoinSep(subStrs_520099773, [124]), NTI33554449);
  framePtr = F.prev;

  return result_520099753;

}

function HEX24_520103220(self_520103221) {
    var Temporary1;

  var result_520103222 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1706;
    F.filename = "parse.nim";
    if (!(eqStrings(self_520103221.subParsers[chckIndx(0, 0, (self_520103221.subParsers).length - 1)].pname, []))) {
    Temporary1 = self_520103221.subParsers[chckIndx(0, 0, (self_520103221.subParsers).length - 1)].pname;
    }
    else {
    Temporary1 = HEX24_520095036(self_520103221.subParsers[chckIndx(0, 0, (self_520103221.subParsers).length - 1)]);
    }
    
    result_520103222 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_520103222;

}

function HEX24_520100533(self_520100534) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
      var Temporary4;

  var result_520100535 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1582;
    F.filename = "parse.nim";
    F.line = 1583;
    if (self_520100534.positive) {
    Temporary1 = [38];
    }
    else {
    Temporary1 = [60,45,38];
    }
    
    var prefix_520100536 = nimCopy(null, Temporary1, NTI33554449);
    F.line = 1584;
    var subP_520100537 = self_520100534.subParsers[chckIndx(0, 0, (self_520100534.subParsers).length - 1)];
    if ((contains_1040187441(NaryParsers_520093961, type_520094761(subP_520100537)) && eqStrings(name_520094768(subP_520100537), []))) {
    if (!(eqStrings(subP_520100537.pname, []))) {
    Temporary3 = subP_520100537.pname;
    }
    else {
    Temporary3 = HEX24_520095036(subP_520100537);
    }
    
    Temporary2 = nsuJoinSep([nimCopy(null, prefix_520100536, NTI33554449), [40], nimCopy(null, Temporary3, NTI33554449), [41]], []);
    }
    else {
      if (!(eqStrings(subP_520100537.pname, []))) {
      Temporary4 = subP_520100537.pname;
      }
      else {
      Temporary4 = HEX24_520095036(subP_520100537);
      }
      
    Temporary2 = (prefix_520100536 || []).concat(Temporary4 || []);
    }
    
    result_520100535 = nimCopy(null, Temporary2, NTI33554449);
  framePtr = F.prev;

  return result_520100535;

}

function HEX24_520094998(self_520094999) {
  var result_520095000 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 295;
    F.filename = "parse.nim";
    F.line = 295;
    var args_520095008 = [];
    Label1: {
      F.line = 296;
      var p_520095012 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104227 = 0;
      F.line = 242;
      var L_520104228 = (self_520094999.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104227 < L_520104228)) break Label3;
            F.line = 296;
            F.filename = "parse.nim";
            p_520095012 = self_520094999.subParsers[chckIndx(i_520104227, 0, (self_520094999.subParsers).length - 1)];
            if (!((p_520095012 == null))) {
            F.line = 297;
            args_520095008.push(HEX24_520095036(p_520095012));;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104227 = addInt(i_520104227, 1);
            if (!(((self_520094999.subParsers).length == L_520104228))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    result_520095000 = nimCopy(null, nsuJoinSep([nimCopy(null, self_520094999.pname, NTI33554449), [58], type_520094761(self_520094999), [40], nsuJoinSep(args_520095008, [44,32]), [41]], []), NTI33554449);
  framePtr = F.prev;

  return result_520095000;

}

function HEX24_520095036(self_520094999) {
  var result_520095037 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_520094999);
    if (isObj(self_520094999.m_type, NTI520096857)) {
    F.line = 294;
    F.filename = "parse.nim";
    result_520095037 = HEX24_520098838(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520097464)) {
    F.line = 294;
    result_520095037 = HEX24_520099297(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520096896)) {
    F.line = 294;
    result_520095037 = HEX24_520099186(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520097631)) {
    F.line = 294;
    result_520095037 = HEX24_520099607(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520097535)) {
    F.line = 294;
    result_520095037 = HEX24_520099455(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520097974)) {
    F.line = 294;
    result_520095037 = HEX24_520100168(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520097782)) {
    F.line = 294;
    result_520095037 = HEX24_520099751(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520098434)) {
    F.line = 294;
    result_520095037 = HEX24_520103220(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520098331)) {
    F.line = 294;
    result_520095037 = HEX24_520100533(self_520094999);
    break BeforeRet;
    }
    else {
    if (isObj(self_520094999.m_type, NTI520093764)) {
    F.line = 294;
    result_520095037 = HEX24_520094998(self_520094999);
    break BeforeRet;
    }
    }}}}}}}}}
  };
  framePtr = F.prev;

  return result_520095037;

}

function refdParsers_520097947(self_520097948) {
              var Temporary4;
              var Temporary8;
              var Temporary12;

  var result_520097949 = [];

  var F = {procname: "parse.refdParsers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((self_520097948.referredParsers).length == 0)) {
    F.line = 766;
    F.filename = "parse.nim";
    self_520097948.referredParsers = nimCopy(null, self_520097948.subParsers, NTI520093781);
    Label1: {
      F.line = 767;
      var matcher_520097956 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104231 = 0;
      F.line = 242;
      var L_520104232 = (self_520097948.skipList).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104231 < L_520104232)) break Label3;
            F.line = 767;
            F.filename = "parse.nim";
            matcher_520097956 = self_520097948.skipList[chckIndx(i_520104231, 0, (self_520097948.skipList).length - 1)];
            F.line = 767;
            switch (matcher_520097956.kind) {
            case 3:
              F.line = 770;
              var Temporary4 = matcher_520097956;
              if (ConstSet22[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI520093756)); }
              self_520097948.referredParsers.push(Temporary4.consumeParser);;
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104231 = addInt(i_520104231, 1);
            if (!(((self_520097948.skipList).length == L_520104232))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label5: {
      F.line = 772;
      F.filename = "parse.nim";
      var matcher_520097964 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104235 = 0;
      F.line = 242;
      var L_520104236 = (self_520097948.resumeList).length;
      Label6: {
        F.line = 243;
          Label7: while (true) {
          if (!(i_520104235 < L_520104236)) break Label7;
            F.line = 772;
            F.filename = "parse.nim";
            matcher_520097964 = self_520097948.resumeList[chckIndx(i_520104235, 0, (self_520097948.resumeList).length - 1)];
            F.line = 772;
            switch (matcher_520097964.kind) {
            case 3:
              F.line = 775;
              var Temporary8 = matcher_520097964;
              if (ConstSet23[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI520093756)); }
              self_520097948.referredParsers.push(Temporary8.consumeParser);;
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104235 = addInt(i_520104235, 1);
            if (!(((self_520097948.resumeList).length == L_520104236))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label9: {
      F.line = 777;
      F.filename = "parse.nim";
      var errMatcher_520097991 = {Field0: ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null}), Field1: []};
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104239 = 0;
      F.line = 242;
      var L_520104240 = (self_520097948.errorList).length;
      Label10: {
        F.line = 243;
          Label11: while (true) {
          if (!(i_520104239 < L_520104240)) break Label11;
            F.line = 777;
            F.filename = "parse.nim";
            errMatcher_520097991 = self_520097948.errorList[chckIndx(i_520104239, 0, (self_520097948.errorList).length - 1)];
            F.line = 777;
            switch (errMatcher_520097991.Field0.kind) {
            case 3:
              F.line = 780;
              var Temporary12 = errMatcher_520097991.Field0;
              if (ConstSet24[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI520093756)); }
              self_520097948.referredParsers.push(Temporary12.consumeParser);;
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104239 = addInt(i_520104239, 1);
            if (!(((self_520097948.errorList).length == L_520104240))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    else {
      if (!(((self_520097948.subParsers).length <= (self_520097948.referredParsers).length))) {
      F.line = 783;
      F.filename = "parse.nim";
      failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(783, 5) `self.referredParsers.len >= self.subParsers.len` "));
      }
      
    }
    
    F.line = 784;
    result_520097949 = self_520097948["referredParsers"];
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520097949;

}

function refdParsers_520095040(self_520095041) {
  var result_520095042 = [];

  var F = {procname: "parse.refdParsers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 311;
    F.filename = "parse.nim";
    result_520095042 = self_520095041["subParsers"];
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520095042;

}

function refdParsers_520095059(self_520095041) {
  var result_520095060 = [];

  var F = {procname: "parse.refdParsers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_520095041);
    if (isObj(self_520095041.m_type, NTI520093765)) {
    F.line = 306;
    F.filename = "parse.nim";
    result_520095060 = refdParsers_520097947(self_520095041);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095041.m_type, NTI520093764)) {
    F.line = 306;
    result_520095060 = refdParsers_520095040(self_520095041);
    break BeforeRet;
    }
    }
  };
  framePtr = F.prev;

  return result_520095060;

}

function grammarHEX3D_520095224(self_520095225, grammar_520095226) {
  var F = {procname: "parse.grammar=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 409;
    F.filename = "parse.nim";
    var uniqueID_520095227 = 0;
    Label1: {
      F.line = 410;
      var p_520095231 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__520104243 = [];
      F.line = 376;
      F.filename = "parse.nim";
      colontmp__520104243 = descendants_520095168(self_520095225, refdSubs_520095087);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104244 = 0;
      F.line = 242;
      var L_520104245 = (colontmp__520104243).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104244 < L_520104245)) break Label3;
            F.line = 376;
            F.filename = "parse.nim";
            p_520095231 = colontmp__520104243[chckIndx(i_520104244, 0, (colontmp__520104243).length - 1)];
            if (!((p_520095231.grammarVar == GrammarPlaceholder_520094178))) {
            F.line = 411;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(411, 5) `p.grammarVar == GrammarPlaceholder` "));
            }
            
            F.line = 412;
            p_520095231.grammarVar = grammar_520095226;
            F.line = 376;
            uniqueID_520095227 = ((uniqueID_520095227 + 1) >>> 0);
            F.line = 414;
            p_520095231.uniqueID = uniqueID_520095227;
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104244 = addInt(i_520104244, 1);
            if (!(((colontmp__520104243).length == L_520104245))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 378;
    F.filename = "parse.nim";
    resetTraversalTracker_520095193(self_520095225);
  framePtr = F.prev;

  
}

function grammarHEX3D_520099422(self_520099423, grammar_520099424) {
  var F = {procname: "parse.grammar=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!((((HEX3DHEX3D_520095286(grammar_520099424.commentRe, NeverMatchRegex_520093760) || HEX3DHEX3D_520095286(grammar_520099424.commentRe, self_520099423.comment.Field1)) || HEX3DHEX3D_520095286(self_520099423.comment.Field1, NeverMatchRegex_520093760)) || ((self_520099423.comment.Field0).length == 0)))) {
    F.line = 1204;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1204, 3) `grammar.commentRe == NeverMatchRegex or grammar.commentRe == self.comment.regex or\x0A    self.comment.regex == NeverMatchRegex or\x0A    self.comment.reStr.len == 0` Multiple definitions of comments or insignificant whitespace not allowed!"));
    }
    
    F.line = 1207;
    grammarHEX3D_520095224(self_520099423, grammar_520099424);
    if (((0 < (self_520099423.comment.Field0).length) && !(HEX3DHEX3D_520095286(self_520099423.comment.Field1, NeverMatchRegex_520093760)))) {
    if (!(HEX3DHEX3D_520095286(grammar_520099424.commentRe, NeverMatchRegex_520093760))) {
    F.line = 1209;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1209, 5) `grammar.commentRe == NeverMatchRegex` implicit whitespace must only be defined once per grammar!"));
    }
    
    F.line = 1211;
    grammar_520099424.commentRe = nimCopy(grammar_520099424.commentRe, self_520099423.comment.Field1, NTI1140850938);
    }
    
  framePtr = F.prev;

  
}

function grammarHEX3D_520095261(self_520095225, grammar_520095226) {
  var F = {procname: "parse.grammar=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_520095225);
    if (isObj(self_520095225.m_type, NTI520097535)) {
    F.line = 408;
    F.filename = "parse.nim";
    grammarHEX3D_520099422(self_520095225, grammar_520095226);
    }
    else {
    if (isObj(self_520095225.m_type, NTI520093764)) {
    F.line = 408;
    grammarHEX3D_520095224(self_520095225, grammar_520095226);
    }
    }
  framePtr = F.prev;

  
}

function nsuContinuesWith(s_1006634452, substr_1006634453, start_1006634454) {
  var result_1006634455 = false;

  var F = {procname: "strutils.continuesWith", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1668;
    F.filename = "strutils.nim";
    var i_1006634456 = 0;
    Label1: {
      F.line = 1669;
        Label2: while (true) {
        if (!true) break Label2;
          if (((substr_1006634453).length <= i_1006634456)) {
          F.line = 1670;
          result_1006634455 = true;
          break BeforeRet;
          }
          
          if ((((s_1006634452).length <= addInt(i_1006634456, start_1006634454)) || !((s_1006634452[chckIndx(addInt(i_1006634456, start_1006634454), 0, (s_1006634452).length - 1)] == substr_1006634453[chckIndx(i_1006634456, 0, (substr_1006634453).length - 1)])))) {
          F.line = 1671;
          result_1006634455 = false;
          break BeforeRet;
          }
          
          F.line = 1672;
          i_1006634456 = addInt(i_1006634456, 1);
        }
    };
  };
  framePtr = F.prev;

  return result_1006634455;

}

function parse_520098820(self_520098821, location_520098822) {
      var Temporary1;

  var result_520098823 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (nsuContinuesWith((Temporary1 = str_1140850821(grammar_520095212(self_520098821).document), Temporary1)[0][Temporary1[1]], self_520098821.text, chckRange(location_520098822, 0, 2147483647))) {
    if ((self_520098821.flags[9] != undefined)) {
    F.line = 1021;
    F.filename = "parse.nim";
    var colontmp__520104247 = EmptyNode_520093990;
    F.line = 1021;
    var colontmp__520104248 = addInt(location_520098822, (((self_520098821.text).length) | 0));
    F.line = 1021;
    result_520098823 = nimCopy(result_520098823, {Field0: colontmp__520104247, Field1: colontmp__520104248}, NTI520093753);
    break BeforeRet;
    }
    
    F.line = 1024;
    var colontmp__520104249 = init_1174405874(new_1174405827(), self_520098821.nodeName[0], self_520098821.nodeName[1], self_520098821.slice, null);
    F.line = 1024;
    var colontmp__520104250 = addInt(location_520098822, (((self_520098821.text).length) | 0));
    F.line = 1024;
    result_520098823 = nimCopy(result_520098823, {Field0: colontmp__520104249, Field1: colontmp__520104250}, NTI520093753);
    break BeforeRet;
    }
    
    F.line = 1025;
    var colontmp__520104251 = null;
    F.line = 1025;
    var colontmp__520104252 = location_520098822;
    F.line = 1025;
    result_520098823 = nimCopy(result_520098823, {Field0: colontmp__520104251, Field1: colontmp__520104252}, NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520098823;

}

function matchLen_1140851064(slice_1140851065, pattern_1140851066, location_1140851067) {
    var Temporary1;

  var result_1140851068 = 0;

  var F = {procname: "strslice.matchLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(((0 <= location_1140851067) && (location_1140851067 <= addInt(subInt(slice_1140851065.Field2, slice_1140851065.Field1), 1))))) {
    F.line = 250;
    F.filename = "strslice.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(250, 5) `location >= 0 and location <= slice.stop - slice.start + 1` "));
    }
    
    F.line = 251;
    pattern_1140851066.Field0.lastIndex = addInt(location_1140851067, slice_1140851065.Field1);
    F.line = 252;
    var m_1140851074 = (toJSStr((Temporary1 = str_1140850821(slice_1140851065), Temporary1)[0][Temporary1[1]]).match(pattern_1140851066.Field0) || []);
    if ((0 < (m_1140851074).length)) {
    if (!(((m_1140851074).length == 1))) {
    F.line = 254;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(254, 7) `m.len == 1` "));
    }
    
    F.line = 255;
    result_1140851068 = (((cstrToNimstr(m_1140851074[chckIndx(0, 0, (m_1140851074).length - 1)])).length) | 0);
    break BeforeRet;
    }
    
    F.line = 256;
    result_1140851068 = (-1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1140851068;

}

function parse_520099262(self_520099263, location_520099264) {
  var result_520099265 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1132;
    F.filename = "parse.nim";
    var l_520099266 = matchLen_1140851064(grammar_520095212(self_520099263).document, self_520099263.reInfo.Field1, location_520099264);
    if ((0 <= l_520099266)) {
    if ((self_520099263.flags[9] != undefined)) {
    F.line = 1135;
    var colontmp__520104254 = EmptyNode_520093990;
    F.line = 1135;
    var colontmp__520104255 = addInt(location_520099264, l_520099266);
    F.line = 1135;
    result_520099265 = nimCopy(result_520099265, {Field0: colontmp__520104254, Field1: colontmp__520104255}, NTI520093753);
    break BeforeRet;
    }
    else {
    if (((self_520099263.flags[7] != undefined) && (l_520099266 == 0))) {
    F.line = 1137;
    var colontmp__520104256 = EmptyNode_520093990;
    F.line = 1137;
    var colontmp__520104257 = location_520099264;
    F.line = 1137;
    result_520099265 = nimCopy(result_520099265, {Field0: colontmp__520104256, Field1: colontmp__520104257}, NTI520093753);
    break BeforeRet;
    }
    }
    F.line = 1138;
    var text_520099286 = nimCopy(null, cut_1140850849(grammar_520095212(self_520099263).document, HEX2EHEX2E_1140850755(location_520099264, subInt(addInt(location_520099264, l_520099266), 1))), NTI1140850691);
    F.line = 1139;
    var colontmp__520104258 = init_1174405874(new_1174405827(), self_520099263.nodeName[0], self_520099263.nodeName[1], text_520099286, null);
    F.line = 1139;
    var colontmp__520104259 = addInt(location_520099264, l_520099266);
    F.line = 1139;
    result_520099265 = nimCopy(result_520099265, {Field0: colontmp__520104258, Field1: colontmp__520104259}, NTI520093753);
    break BeforeRet;
    }
    
    F.line = 1140;
    var colontmp__520104260 = null;
    F.line = 1140;
    var colontmp__520104261 = location_520099264;
    F.line = 1140;
    result_520099265 = nimCopy(result_520099265, {Field0: colontmp__520104260, Field1: colontmp__520104261}, NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099265;

}

function parse_520099154(self_520099155, location_520099156) {
      var Temporary1;

  var result_520099157 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (self_520099155.compare((Temporary1 = str_1140850821(grammar_520095212(self_520099155).document), Temporary1)[0][Temporary1[1]], location_520099156, self_520099155.text)) {
    if ((self_520099155.flags[9] != undefined)) {
    F.line = 1090;
    F.filename = "parse.nim";
    var colontmp__520104262 = EmptyNode_520093990;
    F.line = 1090;
    var colontmp__520104263 = addInt(location_520099156, (((self_520099155.text).length) | 0));
    F.line = 1090;
    result_520099157 = nimCopy(result_520099157, {Field0: colontmp__520104262, Field1: colontmp__520104263}, NTI520093753);
    break BeforeRet;
    }
    
    F.line = 1091;
    var nextLoc_520099162 = addInt(location_520099156, (((self_520099155.text).length) | 0));
    F.line = 1092;
    var colontmp__520104264 = init_1174405874(new_1174405827(), self_520099155.nodeName[0], self_520099155.nodeName[1], cut_1140850849(grammar_520095212(self_520099155).document, HEX2EHEX2E_1140850755(location_520099156, subInt(nextLoc_520099162, 1))), null);
    F.line = 1092;
    var colontmp__520104265 = nextLoc_520099162;
    F.line = 1092;
    result_520099157 = nimCopy(result_520099157, {Field0: colontmp__520104264, Field1: colontmp__520104265}, NTI520093753);
    break BeforeRet;
    }
    
    F.line = 1093;
    var colontmp__520104266 = null;
    F.line = 1093;
    var colontmp__520104267 = location_520099156;
    F.line = 1093;
    result_520099157 = nimCopy(result_520099157, {Field0: colontmp__520104266, Field1: colontmp__520104267}, NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099157;

}

function max_520099561(x_520099563, y_520099564) {
    var Temporary1;

  var result_520099565 = 0;

    if ((y_520099564 <= x_520099563)) {
    Temporary1 = x_520099563;
    }
    else {
    Temporary1 = y_520099564;
    }
    
    result_520099565 = Temporary1;

  return result_520099565;

}

function infiniteLoopWarning_520099458(parser_520099459, node_520099460, location_520099461) {
  var F = {procname: "parse.infiniteLoopWarning", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1223;
    F.filename = "parse.nim";
    break BeforeRet;
  };
  framePtr = F.prev;

  
}

function parse_520099554(self_520099555, location_520099556) {
  var result_520099557 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1299;
    F.filename = "parse.nim";
    var nodes_520099566 = [];
    F.line = 1300;
    var loc_520099567 = location_520099556;
    F.line = 1301;
    var lastLoc_520099568 = location_520099556;
    F.line = 1302;
    var node_520099569 = null;
    Label1: {
      F.line = 1303;
      var i_520099582 = 0;
      F.line = 70;
      F.filename = "iterators_1.nim";
      var res_520104272 = 1;
      Label2: {
        F.line = 71;
          Label3: while (true) {
          if (!(res_520104272 <= self_520099555.repRange.Field0)) break Label3;
            F.line = 1303;
            F.filename = "parse.nim";
            i_520099582 = res_520104272;
            F.line = 1304;
            var __520099583 = nimCopy(null, HEX28HEX29_520097630(self_520099555.subParsers[chckIndx(0, 0, (self_520099555.subParsers).length - 1)], loc_520099567), NTI520093753);
            F.line = 1304;
            node_520099569 = __520099583["Field0"];
            F.line = 1304;
            loc_520099567 = __520099583["Field1"];
            if ((node_520099569 == null)) {
            F.line = 1306;
            var colontmp__520104269 = null;
            F.line = 1306;
            var colontmp__520104270 = lastLoc_520099568;
            F.line = 1306;
            result_520099557 = nimCopy(result_520099557, {Field0: colontmp__520104269, Field1: colontmp__520104270}, NTI520093753);
            break BeforeRet;
            }
            else {
              F.line = 1308;
            nodes_520099566.push(node_520099569);;
            }
            
            if ((loc_520099567 <= lastLoc_520099568)) {
            F.line = 1310;
            infiniteLoopWarning_520099458(self_520099555, node_520099569, loc_520099567);
            F.line = 1311;
            break Label1;
            }
            
            F.line = 1312;
            lastLoc_520099568 = loc_520099567;
            F.line = 73;
            F.filename = "iterators_1.nim";
            res_520104272 = ((res_520104272 + 1) >>> 0);
          }
      };
    };
    Label4: {
      F.line = 1313;
      F.filename = "parse.nim";
      var i_520099596 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__520104275 = 0;
      F.line = 1313;
      F.filename = "parse.nim";
      colontmp__520104275 = ((self_520099555.repRange.Field0 + 1) >>> 0);
      F.line = 70;
      F.filename = "iterators_1.nim";
      var res_520104276 = colontmp__520104275;
      Label5: {
        F.line = 71;
          Label6: while (true) {
          if (!(res_520104276 <= self_520099555.repRange.Field1)) break Label6;
            F.line = 1313;
            F.filename = "parse.nim";
            i_520099596 = res_520104276;
            F.line = 1314;
            var __520099597 = nimCopy(null, HEX28HEX29_520097630(self_520099555.subParsers[chckIndx(0, 0, (self_520099555.subParsers).length - 1)], loc_520099567), NTI520093753);
            F.line = 1314;
            node_520099569 = __520099597["Field0"];
            F.line = 1314;
            loc_520099567 = __520099597["Field1"];
            if ((node_520099569 == null)) {
            F.line = 1316;
            break Label4;
            }
            else {
              F.line = 1318;
            nodes_520099566.push(node_520099569);;
            }
            
            if ((loc_520099567 <= lastLoc_520099568)) {
            F.line = 1320;
            infiniteLoopWarning_520099458(self_520099555, node_520099569, loc_520099567);
            F.line = 1321;
            break Label4;
            }
            
            F.line = 1322;
            lastLoc_520099568 = loc_520099567;
            F.line = 73;
            F.filename = "iterators_1.nim";
            res_520104276 = ((res_520104276 + 1) >>> 0);
          }
      };
    };
    F.line = 1323;
    F.filename = "parse.nim";
    var colontmp__520104278 = grammar_520095212(self_520099555).returnSequence(self_520099555, nodes_520099566);
    F.line = 1323;
    var colontmp__520104279 = loc_520099567;
    F.line = 1323;
    result_520099557 = nimCopy(result_520099557, {Field0: colontmp__520104278, Field1: colontmp__520104279}, NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099557;

}

function parse_520099387(self_520099388, location_520099389) {
  var result_520099390 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1194;
    F.filename = "parse.nim";
    var l_520099391 = matchLen_1140851064(grammar_520095212(self_520099388).document, self_520099388.combined.Field1, location_520099389);
    if ((0 <= l_520099391)) {
    if (((0 < l_520099391) || !((self_520099388.flags[7] != undefined)))) {
    if ((self_520099388.flags[9] != undefined)) {
    F.line = 1198;
    var colontmp__520104280 = EmptyNode_520093990;
    F.line = 1198;
    var colontmp__520104281 = addInt(location_520099389, l_520099391);
    F.line = 1198;
    result_520099390 = nimCopy(result_520099390, {Field0: colontmp__520104280, Field1: colontmp__520104281}, NTI520093753);
    break BeforeRet;
    }
    
    F.line = 1199;
    var text_520099411 = nimCopy(null, cut_1140850849(grammar_520095212(self_520099388).document, HEX2EHEX2E_1140850755(location_520099389, subInt(addInt(location_520099389, l_520099391), 1))), NTI1140850691);
    F.line = 1200;
    var colontmp__520104282 = init_1174405874(new_1174405827(), self_520099388.nodeName[0], self_520099388.nodeName[1], text_520099411, null);
    F.line = 1200;
    var colontmp__520104283 = addInt(location_520099389, l_520099391);
    F.line = 1200;
    result_520099390 = nimCopy(result_520099390, {Field0: colontmp__520104282, Field1: colontmp__520104283}, NTI520093753);
    break BeforeRet;
    }
    
    }
    
    F.line = 1201;
    var colontmp__520104284 = EmptyNode_520093990;
    F.line = 1201;
    var colontmp__520104285 = location_520099389;
    F.line = 1201;
    result_520099390 = nimCopy(result_520099390, {Field0: colontmp__520104284, Field1: colontmp__520104285}, NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099390;

}

function reentry_520098026(catcher_520098027, location_520098028) {
  var result_520098031 = {Field0: null, Field1: 0};

  var F = {procname: "parse.reentry", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 792;
    F.filename = "parse.nim";
    var node_520098032 = EmptyNode_520093990;
    F.line = 793;
    var reloc_520098033 = (-1);
    if ((0 < (catcher_520098027.skipList).length)) {
    F.line = 795;
    var gr_520098037 = grammar_520095212(catcher_520098027);
    F.line = 796;
    var __520098038 = nimCopy(null, reentry_point_520095272(gr_520098037.document, location_520098028, catcher_520098027.skipList, gr_520098037.commentRe, 10000), NTI520094652);
    F.line = 796;
    node_520098032 = __520098038["Field0"];
    F.line = 796;
    reloc_520098033 = __520098038["Field1"];
    if (!((node_520098032 == null))) {
    F.line = 799;
    var nd_520098042 = node_520098032;
    F.line = 800;
    var colontmp__520104295 = nd_520098042;
    F.line = 800;
    var colontmp__520104296 = reloc_520098033;
    F.line = 800;
    result_520098031 = nimCopy(result_520098031, {Field0: colontmp__520104295, Field1: colontmp__520104296}, NTI520096241);
    break BeforeRet;
    }
    
    }
    
    F.line = 801;
    var colontmp__520104297 = init_520093968(new_1174405827(), [95,95,90,79,77,66,73,69], [], null);
    F.line = 801;
    var colontmp__520104298 = (-1);
    F.line = 801;
    result_520098031 = nimCopy(result_520098031, {Field0: colontmp__520104297, Field1: colontmp__520104298}, NTI520096241);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520098031;

}

function startsWith_520098084(str_520098086, sub_520098087) {
  var result_520098088 = false;

  var F = {procname: "startsWith.startsWith", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((len_1140850833(str_520098086) < (((sub_520098087).length) | 0))) {
    F.line = 135;
    F.filename = "strslice.nim";
    result_520098088 = false;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 140;
      var idx_520098089 = 0;
      F.line = 140;
      var c_520098090 = 0;
      F.line = 193;
      F.filename = "iterators.nim";
      var i_520104309 = 0;
      F.line = 194;
      var L_520104310 = (sub_520098087).length;
      Label2: {
        F.line = 195;
          Label3: while (true) {
          if (!(i_520104309 < L_520104310)) break Label3;
            F.line = 140;
            F.filename = "strslice.nim";
            idx_520098089 = i_520104309;
            F.line = 140;
            c_520098090 = sub_520098087[chckIndx(i_520104309, 0, (sub_520098087).length - 1)];
            if (!((str_520098086.Field0[0][str_520098086.Field0[1]][chckIndx(addInt(((idx_520098089) | 0), str_520098086.Field1), 0, (str_520098086.Field0[0][str_520098086.Field0[1]]).length - 1)] == c_520098090))) {
            F.line = 141;
            result_520098088 = false;
            break BeforeRet;
            }
            
            F.line = 197;
            F.filename = "iterators.nim";
            i_520104309 = addInt(i_520104309, 1);
            if (!(((sub_520098087).length == L_520104310))) {
            F.line = 198;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(198, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 142;
    F.filename = "strslice.nim";
    result_520098088 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520098088;

}

function HEX3DHEX3D_520098079(str_520098081, cmp_520098082) {
  var result_520098083 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((len_1140850833(str_520098081) == (((cmp_520098082).length) | 0)))) {
    F.line = 147;
    F.filename = "strslice.nim";
    result_520098083 = false;
    break BeforeRet;
    }
    
    F.line = 153;
    result_520098083 = startsWith_520098084(str_520098081, cmp_520098082);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520098083;

}

function integerOutOfRangeError_939524421() {
  var F = {procname: "parseutils.integerOutOfRangeError", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 421;
    F.filename = "parseutils.nim";
    raiseException({message: [80,97,114,115,101,100,32,105,110,116,101,103,101,114,32,111,117,116,115,105,100,101,32,111,102,32,118,97,108,105,100,32,114,97,110,103,101], parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
  framePtr = F.prev;

  
}

function rawParseInt_939524423(s_939524424, b_939524425, b_939524425_Idx) {
      var Temporary1;
          var Temporary4;

  var result_939524426 = 0;

  var F = {procname: "parseutils.rawParseInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 429;
    F.filename = "parseutils.nim";
    var sign_939524427 = (-1n);
    F.line = 430;
    var i_939524428 = 0;
    if ((i_939524428 < (s_939524424).length)) {
    if ((s_939524424[chckIndx(i_939524428, 0, (s_939524424).length - 1)] == 43)) {
    F.line = 432;
    i_939524428 += 1;
    }
    else {
    if ((s_939524424[chckIndx(i_939524428, 0, (s_939524424).length - 1)] == 45)) {
    F.line = 434;
    i_939524428 += 1;
    F.line = 435;
    sign_939524427 = 1n;
    }
    }
    }
    
      if (!(i_939524428 < (s_939524424).length)) Temporary1 = false; else {        Temporary1 = (ConstSet30[s_939524424[chckIndx(i_939524428, 0, (s_939524424).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 437;
    b_939524425[b_939524425_Idx] = 0n;
    Label2: {
      F.line = 438;
        Label3: while (true) {
          if (!(i_939524428 < (s_939524424).length)) Temporary4 = false; else {            Temporary4 = (ConstSet31[s_939524424[chckIndx(i_939524428, 0, (s_939524424).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          F.line = 439;
          var c_939524462 = (s_939524424[chckIndx(i_939524428, 0, (s_939524424).length - 1)] - 48);
          if ((((-9223372036854775808n) + BigInt(c_939524462)) / 10n <= b_939524425[b_939524425_Idx])) {
          F.line = 441;
          b_939524425[b_939524425_Idx] = ((b_939524425[b_939524425_Idx] * 10n) - BigInt(c_939524462));
          }
          else {
            F.line = 443;
          integerOutOfRangeError_939524421();
          }
          
          F.line = 444;
          i_939524428 += 1;
          Label5: {
            F.line = 445;
              Label6: while (true) {
              if (!((i_939524428 < (s_939524424).length) && (s_939524424[chckIndx(i_939524428, 0, (s_939524424).length - 1)] == 95))) break Label6;
                F.line = 445;
                i_939524428 += 1;
              }
          };
        }
    };
    if (((sign_939524427 == (-1n)) && (b_939524425[b_939524425_Idx] == (-9223372036854775808n)))) {
    F.line = 447;
    integerOutOfRangeError_939524421();
    }
    else {
      F.line = 449;
      b_939524425[b_939524425_Idx] = (b_939524425[b_939524425_Idx] * sign_939524427);
      F.line = 450;
      result_939524426 = i_939524428;
    }
    
    }
    
  framePtr = F.prev;

  return result_939524426;

}

function npuParseBiggestInt(s_939524485, number_939524486, number_939524486_Idx) {
  var result_939524487 = 0;

  var F = {procname: "parseutils.parseBiggestInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 464;
    F.filename = "parseutils.nim";
    var res_939524488 = [0n];
    F.line = 467;
    result_939524487 = rawParseInt_939524423(s_939524485, res_939524488, 0);
    if (!((result_939524487 == 0))) {
    F.line = 469;
    number_939524486[number_939524486_Idx] = res_939524488[0];
    }
    
  framePtr = F.prev;

  return result_939524487;

}

function npuParseInt(s_939524490, number_939524491, number_939524491_Idx) {
  var result_939524492 = 0;

  var F = {procname: "parseutils.parseInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 482;
    F.filename = "parseutils.nim";
    var res_939524493 = [0n];
    F.line = 483;
    result_939524492 = npuParseBiggestInt(s_939524490, res_939524493, 0);
    if (((res_939524493[0] < (-2147483648n)) || (2147483647n < res_939524493[0]))) {
    F.line = 486;
    integerOutOfRangeError_939524421();
    }
    
    if (!((result_939524492 == 0))) {
    F.line = 488;
    number_939524491[number_939524491_Idx] = chckRange(Number(res_939524493[0]), (-2147483648), 2147483647);
    }
    
  framePtr = F.prev;

  return result_939524492;

}

function parseInt_939525003(s_939525004, number_939525005, number_939525005_Idx, start_939525006) {
  var result_939525007 = 0;

  var F = {procname: "parseutils.parseInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 999;
    F.filename = "parseutils.nim";
    result_939525007 = npuParseInt((s_939525004.slice(start_939525006, (s_939525004).length - 1 + 1)), number_939525005, number_939525005_Idx);
  framePtr = F.prev;

  return result_939525007;

}

function nsuParseInt(s_1006633817) {
  var result_1006633818 = [0];

  var F = {procname: "strutils.parseInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1134;
    F.filename = "strutils.nim";
    result_1006633818[0] = 0;
    F.line = 1135;
    var L_1006633819 = parseInt_939525003(s_1006633817, result_1006633818, 0, 0);
    if ((!((L_1006633819 == (s_1006633817).length)) || (L_1006633819 == 0))) {
    F.line = 1137;
    raiseException({message: ([105,110,118,97,108,105,100,32,105,110,116,101,103,101,114,58,32] || []).concat(s_1006633817 || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_1006633818[0];

}

function violation_520098053(catcher_520098054, location_520098055, wasLookAhead_520098056, expected_520098057, reloc_520098058, errorNode_520098059) {
    var Temporary1;
    var Temporary3;
              
function match_520098063(rule_520098064, text_520098065, location_520098066) {
                    var Temporary1;
                    var Temporary2;
                    var Temporary3;
                    var Temporary4;
                    var Temporary5;

                var result_520098067 = false;

                var F = {procname: "violation.match", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
                framePtr = F;
                BeforeRet: {
                  F.line = 812;
                  F.filename = "parse.nim";
                  switch (rule_520098064.kind) {
                  case 0:
                    F.line = 814;
                    var Temporary1 = rule_520098064;
                    if (ConstSet25[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'rxInfo\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI520093756)); }
                    result_520098067 = (0 <= matchLen_1140851064(text_520098065, Temporary1.rxInfo.Field1, location_520098066));
                    break BeforeRet;
                    break;
                  case 1:
                    F.line = 816;
                    var Temporary2 = rule_520098064;
                    if (ConstSet26[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'cmpStr\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI520093756)); }
                    var Temporary3 = rule_520098064;
                    if (ConstSet27[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'cmpStr\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI520093756)); }
                    result_520098067 = HEX3DHEX3D_520098079(cut_1140850849(text_520098065, HEX2EHEX2E_1140850755(location_520098066, subInt(addInt(location_520098066, (((Temporary2.cmpStr).length) | 0)), 1))), Temporary3.cmpStr);
                    break BeforeRet;
                    break;
                  case 2:
                    F.line = 818;
                    var Temporary4 = rule_520098064;
                    if (ConstSet28[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'findProc\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI520093756)); }
                    result_520098067 = (0 <= Temporary4.findProc(text_520098065, location_520098066, location_520098066)["Field0"]);
                    break BeforeRet;
                    break;
                  case 3:
                    F.line = 820;
                    var Temporary5 = rule_520098064;
                    if (ConstSet29[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI520093756)); }
                    var parser_520098091 = Temporary5.consumeParser;
                    F.line = 821;
++excHandler;
                    try {
                    F.line = 822;
                    var tmpTuple_520098092 = HEX28HEX29_520097630(parser_520098091, location_520098066);
                    F.line = 822;
                    var node_520098093 = tmpTuple_520098092["Field0"];
                    F.line = 822;
                    var pos_520098094 = tmpTuple_520098092["Field1"];
                    F.line = 823;
                    result_520098067 = !((node_520098093 == null));
                    break BeforeRet;
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
                    framePtr = F;
                    if (lastJSError && (isObj(lastJSError.m_type, NTI520093774))) {
                    F.line = 825;
                    var pe_520098098 = getCurrentException();
                    F.line = 825;
                    var msg_520098099 = ([69,114,114,111,114,32,119,104,105,108,101,32,112,105,99,107,105,110,103,32,101,114,114,111,114,32,109,101,115,115,97,103,101,32,119,105,116,104,58,32] || []).concat(HEX24_520095036(parser_520098091) || []);
                    F.line = 826;
                    var error_520098103 = init_1224736792(new_520095367(), msg_520098099, location_520098066, 1301, (-1), (-1), (-1), [], (-1), []);
                    F.line = 827;
                    grammar_520095212(parser_520098091).errors.push(error_520098103);;
                    }
                    else {
                    	reraiseException();
                    }
                    lastJSError = prevJSError;
                    } finally {
                    framePtr = F;
                    }
                    break;
                  }
                };
                framePtr = F.prev;

                return result_520098067;

              }

  var result_520098062 = {Field0: null, Field1: 0};

  var F = {procname: "parse.violation", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 830;
    F.filename = "parse.nim";
    var gr_520098117 = grammar_520095212(catcher_520098054);
    F.line = 831;
    var snippet_520098126 = cstrToNimstr(replace_1140851086(cut_1140850849(gr_520098117.document, HEX2EHEX2E_1140850755(location_520098055, addInt(location_520098055, 9))), ure_520093736([92,110]), [92,110]));
    F.line = 832;
    if ((len_1140850833(gr_520098117.document) <= location_520098055)) {
    Temporary1 = [69,79,70];
    }
    else {
      Label2: {
        F.line = 832;
        var fmtRes_520098131 = [mnewString(0)];
        F.line = 832;
        fmtRes_520098131[0].push.apply(fmtRes_520098131[0], [194,187]);;
        F.line = 832;
        formatValue_922747051(fmtRes_520098131, 0, snippet_520098126, []);
        F.line = 832;
        fmtRes_520098131[0].push.apply(fmtRes_520098131[0], [194,171]);;
      };
    Temporary1 = fmtRes_520098131[0];
    }
    
    var found_520098132 = nimCopy(null, Temporary1, NTI33554449);
    F.line = 833;
    if ((catcher_520098054.symbol == null)) {
    Temporary3 = HEX24_520095036(catcher_520098054);
    }
    else {
    Temporary3 = catcher_520098054.symbol.pname;
    }
    
    var sym_520098136 = nimCopy(null, Temporary3, NTI33554449);
    F.line = 835;
    var errCode_520098137 = 1010;
    F.line = 836;
    Label4: {
      F.line = 836;
      var fmtRes_520098142 = [mnewString(0)];
      F.line = 836;
      formatValue_922747051(fmtRes_520098142, 0, expected_520098057, []);
      F.line = 836;
      fmtRes_520098142[0].push.apply(fmtRes_520098142[0], [32,101,120,112,101,99,116,101,100,32,98,121,32,112,97,114,115,101,114,32]);;
      F.line = 836;
      formatValue_922747051(fmtRes_520098142, 0, sym_520098136, []);
      F.line = 836;
      fmtRes_520098142[0].push.apply(fmtRes_520098142[0], [44,32,98,117,116,32]);;
      F.line = 836;
      formatValue_922747051(fmtRes_520098142, 0, found_520098132, []);
      F.line = 836;
      fmtRes_520098142[0].push.apply(fmtRes_520098142[0], [32,102,111,117,110,100,33]);;
    };
    var message_520098143 = nimCopy(null, fmtRes_520098142[0], NTI33554449);
    Label5: {
      F.line = 838;
      var rule_520098147 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 838;
      var msg_520098148 = [];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104302 = 0;
      F.line = 242;
      var L_520104303 = (catcher_520098054.errorList).length;
      Label6: {
        F.line = 243;
          Label7: while (true) {
          if (!(i_520104302 < L_520104303)) break Label7;
            F.line = 838;
            F.filename = "parse.nim";
            rule_520098147 = catcher_520098054.errorList[chckIndx(i_520104302, 0, (catcher_520098054.errorList).length - 1)]["Field0"];
            F.line = 838;
            msg_520098148 = catcher_520098054.errorList[chckIndx(i_520104302, 0, (catcher_520098054.errorList).length - 1)]["Field1"];
            if (match_520098063(rule_520098147, gr_520098117.document, location_520098055)) {
            F.line = 840;
            var i_520098149 = addInt(nsuFindChar(msg_520098148, 58, 0, (-1)), 1);
            F.line = 841;
++excHandler;
            try {
            if ((0 < i_520098149)) {
            F.line = 842;
            errCode_520098137 = nsuParseInt(HEX5BHEX5D_1006634239(msg_520098148, HEX2EHEX2E_973078576(0, subInt(i_520098149, 1))));
            }
            
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = F;
            if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
            F.line = 844;
            i_520098149 = 0;
            }
            else {
            	reraiseException();
            }
            lastJSError = prevJSError;
            } finally {
            framePtr = F;
            }
            F.line = 845;
            message_520098143 = nimCopy(null, nsuReplaceStr(nsuReplaceStr(HEX5BHEX5D_1006634267(msg_520098148, HEX2EHEX2E_1040187496(i_520098149, 1)), [123,48,125], expected_520098057), [123,49,125], found_520098132), NTI33554449);
            F.line = 846;
            break Label5;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104302 = addInt(i_520104302, 1);
            if (!(((catcher_520098054.errorList).length == L_520104303))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if ((wasLookAhead_520098056 && (len_1140850833(gr_520098117.document) <= location_520098055))) {
    F.line = 848;
    F.filename = "parse.nim";
    errCode_520098137 = 1015;
    }
    
    F.line = 849;
    var error_520098195 = init_1224736792(new_520095367(), message_520098143, location_520098055, errCode_520098137, (-1), (-1), (-1), [], (-1), []);
    F.line = 850;
    gr_520098117.errors.push(error_520098195);;
    F.line = 851;
    var colontmp__520104305 = error_520098195;
    F.line = 851;
    var colontmp__520104306 = addInt(location_520098055, nimMax(reloc_520098058, 0));
    F.line = 851;
    result_520098062 = nimCopy(result_520098062, {Field0: colontmp__520104305, Field1: colontmp__520104306}, NTI520096257);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520098062;

}

function parse_520100078(self_520100079, location_520100080) {
                var Temporary5;

  var result_520100081 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1458;
    F.filename = "parse.nim";
    var results_520100088 = [];
    F.line = 1459;
    var loc_520100089 = location_520100080;
    F.line = 1460;
    var reloc_520100090 = 0;
    F.line = 1461;
    var error_520100091 = null;
    F.line = 1462;
    var node_520100092 = null;
    F.line = 1462;
    var nd_520100093 = null;
    F.line = 1463;
    var someNode_520100094 = null;
    Label1: {
      F.line = 1465;
      var pos_520100095 = (-1);
      Label2: {
        F.line = 1464;
        var parser_520100099 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_520104290 = 0;
        F.line = 242;
        var L_520104291 = (self_520100079.subParsers).length;
        Label3: {
          F.line = 243;
            Label4: while (true) {
            if (!(i_520104290 < L_520104291)) break Label4;
              F.line = 1465;
              F.filename = "parse.nim";
              parser_520100099 = self_520100079.subParsers[chckIndx(i_520104290, 0, (self_520100079.subParsers).length - 1)];
              F.line = 1465;
              pos_520100095 = addInt(pos_520100095, 1);
              F.line = 1465;
              var __520100105 = nimCopy(null, HEX28HEX29_520097630(parser_520100099, loc_520100089), NTI520093753);
              F.line = 1465;
              node_520100092 = __520100105["Field0"];
              F.line = 1465;
              loc_520100089 = __520100105["Field1"];
              if ((node_520100092 == null)) {
              if ((pos_520100095 < self_520100079.mandatory)) {
              F.line = 1468;
              var colontmp__520104288 = null;
              F.line = 1468;
              var colontmp__520104289 = location_520100080;
              F.line = 1468;
              result_520100081 = nimCopy(result_520100081, {Field0: colontmp__520104288, Field1: colontmp__520104289}, NTI520093753);
              break BeforeRet;
              }
              else {
                F.line = 1470;
                var __520100109 = nimCopy(null, reentry_520098026(self_520100079, loc_520100089), NTI520096241);
                F.line = 1470;
                someNode_520100094 = __520100109["Field0"];
                F.line = 1470;
                reloc_520100090 = __520100109["Field1"];
                F.line = 1471;
                if (!(eqStrings(parser_520100099.pname, []))) {
                Temporary5 = parser_520100099.pname;
                }
                else {
                Temporary5 = HEX24_520095036(parser_520100099);
                }
                
                var __520100110 = nimCopy(null, violation_520098053(self_520100079, loc_520100089, false, Temporary5, reloc_520100090, someNode_520100094), NTI520096257);
                F.line = 1471;
                error_520100091 = __520100110["Field0"];
                F.line = 1471;
                loc_520100089 = __520100110["Field1"];
                if ((0 <= reloc_520100090)) {
                F.line = 1473;
                var __520100111 = nimCopy(null, HEX28HEX29_520097630(parser_520100099, loc_520100089), NTI520093753);
                F.line = 1473;
                nd_520100093 = __520100111["Field0"];
                F.line = 1473;
                loc_520100089 = __520100111["Field1"];
                if (!((nd_520100093 == null))) {
                F.line = 1475;
                results_520100088.push(someNode_520100094);;
                F.line = 1476;
                someNode_520100094 = nd_520100093;
                }
                
                if ((!((((someNode_520100094.childrenSeq).length == 0) && (len_1140850833(someNode_520100094.textSlice) == 0))) || !((((someNode_520100094.nameRef[0][someNode_520100094.nameRef[1]]).length == 0) || (someNode_520100094.nameRef[0][someNode_520100094.nameRef[1]][chckIndx(0, 0, (someNode_520100094.nameRef[0][someNode_520100094.nameRef[1]]).length - 1)] == 58))))) {
                F.line = 1478;
                results_520100088.push(someNode_520100094);;
                }
                
                }
                else {
                  F.line = 1480;
                  results_520100088.push(someNode_520100094);;
                  F.line = 1481;
                  break Label2;
                }
                
              }
              
              }
              else {
              if ((!((((node_520100092.childrenSeq).length == 0) && (len_1140850833(node_520100092.textSlice) == 0))) || !((((node_520100092.nameRef[0][node_520100092.nameRef[1]]).length == 0) || (node_520100092.nameRef[0][node_520100092.nameRef[1]][chckIndx(0, 0, (node_520100092.nameRef[0][node_520100092.nameRef[1]]).length - 1)] == 58))))) {
              F.line = 1483;
              results_520100088.push(node_520100092);;
              }
              }
              F.line = 245;
              F.filename = "iterators.nim";
              i_520104290 = addInt(i_520104290, 1);
              if (!(((self_520100079.subParsers).length == L_520104291))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
    F.line = 1484;
    F.filename = "parse.nim";
    someNode_520100094 = grammar_520095212(self_520100079).returnSequence(self_520100079, results_520100088);
    if (!((error_520100091 == null))) {
    F.line = 177;
    F.filename = "nodetree.nim";
    var _ = assignSourcePos_1174405747(someNode_520100094, location_520100080);
    F.line = 1486;
    F.filename = "parse.nim";
    raiseException({origin: self_520100079, node: someNode_520100094, node_orig_len: subInt(loc_520100089, location_520100080), location: location_520100080, error: error_520100091, first_throw: true, m_type: NTI520093774, parent: null, name: null, message: [], trace: [], up: null}, "ParsingException:ObjectType");
    }
    
    F.line = 1489;
    var colontmp__520104293 = someNode_520100094;
    F.line = 1489;
    var colontmp__520104294 = loc_520100089;
    F.line = 1489;
    result_520100081 = nimCopy(result_520100081, {Field0: colontmp__520104293, Field1: colontmp__520104294}, NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520100081;

}

function parse_520099735(self_520099736, location_520099737) {
  var result_520099738 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1374;
    F.filename = "parse.nim";
    var loc_520099739 = location_520099737;
    F.line = 1375;
    var node_520099740 = null;
    Label1: {
      F.line = 1376;
      var parser_520099744 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_520104317 = 0;
      F.line = 242;
      var L_520104318 = (self_520099736.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_520104317 < L_520104318)) break Label3;
            F.line = 1376;
            F.filename = "parse.nim";
            parser_520099744 = self_520099736.subParsers[chckIndx(i_520104317, 0, (self_520099736.subParsers).length - 1)];
            F.line = 1377;
            var __520099745 = nimCopy(null, HEX28HEX29_520097630(parser_520099744, loc_520099739), NTI520093753);
            F.line = 1377;
            node_520099740 = __520099745["Field0"];
            F.line = 1377;
            loc_520099739 = __520099745["Field1"];
            if (!((node_520099740 == null))) {
            F.line = 1379;
            var colontmp__520104315 = grammar_520095212(self_520099736).returnItem(self_520099736, node_520099740);
            F.line = 1379;
            var colontmp__520104316 = loc_520099739;
            F.line = 1379;
            result_520099738 = nimCopy(result_520099738, {Field0: colontmp__520104315, Field1: colontmp__520104316}, NTI520093753);
            break BeforeRet;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_520104317 = addInt(i_520104317, 1);
            if (!(((self_520099736.subParsers).length == L_520104318))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 1380;
    F.filename = "parse.nim";
    var colontmp__520104320 = null;
    F.line = 1380;
    var colontmp__520104321 = location_520099737;
    F.line = 1380;
    result_520099738 = nimCopy(result_520099738, {Field0: colontmp__520104320, Field1: colontmp__520104321}, NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520099738;

}

function parse_520103216(self_520103217, location_520103218) {
  var result_520103219 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1702;
    F.filename = "parse.nim";
    result_520103219 = nimCopy(result_520103219, HEX28HEX29_520097630(self_520103217.subParsers[chckIndx(0, 0, (self_520103217.subParsers).length - 1)], location_520103218), NTI520093753);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520103219;

}

function parse_520100509(self_520100510, location_520100511) {
  var result_520100512 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1568;
    F.filename = "parse.nim";
    var loc_520100513 = 0;
    F.line = 1569;
    var node_520100514 = null;
    F.line = 1571;
    var __520100515 = nimCopy(null, HEX28HEX29_520097630(self_520100510.subParsers[chckIndx(0, 0, (self_520100510.subParsers).length - 1)], location_520100511), NTI520093753);
    F.line = 1571;
    node_520100514 = __520100515["Field0"];
    F.line = 1571;
    loc_520100513 = __520100515["Field1"];
    if ((self_520100510.positive != (node_520100514 == null))) {
    if ((self_520100510.flags[7] != undefined)) {
    F.line = 1574;
    node_520100514 = EmptyNode_520093990;
    }
    else {
      F.line = 1576;
      node_520100514 = init_520097660(new_1174405827(), self_520100510.nodeName[0], self_520100510.nodeName[1], [], null);
    }
    
    F.line = 1577;
    var colontmp__520104322 = node_520100514;
    F.line = 1577;
    var colontmp__520104323 = location_520100511;
    F.line = 1577;
    result_520100512 = nimCopy(result_520100512, {Field0: colontmp__520104322, Field1: colontmp__520104323}, NTI520093753);
    break BeforeRet;
    }
    else {
      F.line = 1579;
      var colontmp__520104324 = null;
      F.line = 1579;
      var colontmp__520104325 = location_520100511;
      F.line = 1579;
      result_520100512 = nimCopy(result_520100512, {Field0: colontmp__520104324, Field1: colontmp__520104325}, NTI520093753);
      break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_520100512;

}

function parse_520095781(self_520095782, location_520095783) {
  var result_520095784 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 577;
    F.filename = "parse.nim";
    rawEcho([80,97,114,115,101,114,46,112,97,114,115,101]);
    F.line = 578;
    var colontmp__520104326 = null;
    F.line = 578;
    var colontmp__520104327 = 0;
    F.line = 578;
    result_520095784 = nimCopy(result_520095784, {Field0: colontmp__520104326, Field1: colontmp__520104327}, NTI520093753);
  framePtr = F.prev;

  return result_520095784;

}

function parse_520095785(self_520095782, location_520095783) {
  var result_520095786 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_520095782);
    if (isObj(self_520095782.m_type, NTI520096857)) {
    F.line = 576;
    F.filename = "parse.nim";
    result_520095786 = nimCopy(result_520095786, parse_520098820(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520097464)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520099262(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520096896)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520099154(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520097631)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520099554(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520097535)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520099387(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520097974)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520100078(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520097782)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520099735(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520098434)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520103216(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520098331)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520100509(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    else {
    if (isObj(self_520095782.m_type, NTI520093764)) {
    F.line = 576;
    result_520095786 = nimCopy(result_520095786, parse_520095781(self_520095782, location_520095783), NTI520093753);
    break BeforeRet;
    }
    }}}}}}}}}
  };
  framePtr = F.prev;

  return result_520095786;

}
