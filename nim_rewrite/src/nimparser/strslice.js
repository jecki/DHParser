/* Generated by the Nim Compiler v2.0.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI704643141 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093968 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI838860879 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI838860885 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI184549387 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI939524100 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI939524099 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093951 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI520093759 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI520093999 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI520093701 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI520093699 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217749 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555835 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555181 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555180 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555178 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555178.node = NNI33555178;
NTI33555180.base = NTI33555177;
NTI33555181.base = NTI33555177;
var NNI33555177 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555180, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555181, name: "up", sons: null}]};
NTI33555177.node = NNI33555177;
var NNI33555173 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555173.node = NNI33555173;
NTI33555177.base = NTI33555173;
NTI33555178.base = NTI33555177;
NTI134217741.base = NTI33555178;
NTI134217743.base = NTI134217741;
var NNI33555835 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554450, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554450, name: "Field2", sons: null}]};
NTI33555835.node = NNI33555835;
var NNI134217751 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555178;
var NNI134217749 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555178;
NTI520093701.base = NTI33554449;
var NNI520093699 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "buf", len: 0, typ: NTI520093701, name: "buf", sons: null}, 
{kind: 1, offset: "start", len: 0, typ: NTI33554438, name: "start", sons: null}, 
{kind: 1, offset: "stop", len: 0, typ: NTI33554438, name: "stop", sons: null}]};
NTI520093699.node = NNI520093699;
var NNI520093999 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI520093999.node = NNI520093999;
var NNI520093759 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI520093759.node = NNI520093759;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555178;
var NNI939524100 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "flags", len: 0, typ: NTI33554450, name: "flags", sons: null}, 
{kind: 1, offset: "dotAll", len: 0, typ: NTI33554466, name: "dotAll", sons: null}, 
{kind: 1, offset: "global", len: 0, typ: NTI33554466, name: "global", sons: null}, 
{kind: 1, offset: "ignoreCase", len: 0, typ: NTI33554466, name: "ignoreCase", sons: null}, 
{kind: 1, offset: "multiline", len: 0, typ: NTI33554466, name: "multiline", sons: null}, 
{kind: 1, offset: "source", len: 0, typ: NTI33554450, name: "source", sons: null}, 
{kind: 1, offset: "sticky", len: 0, typ: NTI33554466, name: "sticky", sons: null}, 
{kind: 1, offset: "unicode", len: 0, typ: NTI33554466, name: "unicode", sons: null}, 
{kind: 1, offset: "lastIndex", len: 0, typ: NTI184549387, name: "lastIndex", sons: null}, 
{kind: 1, offset: "input", len: 0, typ: NTI33554450, name: "input", sons: null}, 
{kind: 1, offset: "lastMatch", len: 0, typ: NTI33554450, name: "lastMatch", sons: null}, 
{kind: 1, offset: "lastParen", len: 0, typ: NTI33554450, name: "lastParen", sons: null}, 
{kind: 1, offset: "leftContext", len: 0, typ: NTI33554450, name: "leftContext", sons: null}, 
{kind: 1, offset: "rightContext", len: 0, typ: NTI33554450, name: "rightContext", sons: null}, 
{kind: 1, offset: "hasIndices", len: 0, typ: NTI33554466, name: "hasIndices", sons: null}]};
NTI939524100.node = NNI939524100;
var NNI33555183 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555183.node = NNI33555183;
NTI33555183.base = NTI33555173;
NTI939524100.base = NTI33555183;
NTI939524099.base = NTI939524100;
var NNI520093951 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI939524099, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI939524099, name: "Field1", sons: null}]};
NTI520093951.node = NNI520093951;
var NNI838860885 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI838860879, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI838860885.node = NNI838860885;
var NNI520093968 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI520093968.node = NNI520093968;
var NNI704643141 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554435, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI704643141.node = NNI704643141;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}

function arrayConstr(len_33557314, value_33557315, typ_33557316) {
        var result = new Array(len_33557314);
    for (var i = 0; i < len_33557314; ++i) result[i] = nimCopy(null, value_33557315, typ_33557316);
    return result;
  

  
}

function mnewString(len_33557003) {
        var result = new Array(len_33557003);
    for (var i = 0; i < len_33557003; i++) {result[i] = 0;}
    return result;
  

  
}

function addInt(a_33557050, b_33557051) {
        var result = a_33557050 + b_33557051;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557324, a_33557325, b_33557326) {
  var result_33557327 = 0;

  BeforeRet: {
    if (((a_33557325 <= i_33557324) && (i_33557324 <= b_33557326))) {
    result_33557327 = i_33557324;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  };

  return result_33557327;

}

function chckIndx(i_33557319, a_33557320, b_33557321) {
  var result_33557322 = 0;

  BeforeRet: {
    if (((a_33557320 <= i_33557319) && (i_33557319 <= b_33557321))) {
    result_33557322 = i_33557319;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557319, a_33557320, b_33557321);
    }
    
  };

  return result_33557322;

}

function cstrToNimstr(c_33556898) {
      var ln = c_33556898.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556898.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556898.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function raiseException(e_33556653, ename_33556654) {
    e_33556653.name = ename_33556654;
    if ((excHandler == 0)) {
    unhandledException(e_33556653);
    }
    
    e_33556653.trace = nimCopy(null, rawWriteStackTrace_33556604(), NTI33554449);
    throw e_33556653;

  
}

function subInt(a_33557054, b_33557055) {
        var result = a_33557054 - b_33557055;
    checkOverflowInt(result);
    return result;
  

  
}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function makeNimstrLit(c_33556895) {
      var result = [];
  for (var i = 0; i < c_33556895.length; ++i) {
    result[i] = c_33556895.charCodeAt(i);
  }
  return result;
  

  
}

function nimBoolToStr(x_33556438) {
  var result_33556439 = [];

    if (x_33556438) {
    result_33556439 = nimCopy(null, [116,114,117,101], NTI33554449);
    }
    else {
      result_33556439 = nimCopy(null, [102,97,108,115,101], NTI33554449);
    }
    

  return result_33556439;

}

function eqStrings(a_33557041, b_33557042) {
        if (a_33557041 == b_33557042) return true;
    if (a_33557041 === null && b_33557042.length == 0) return true;
    if (b_33557042 === null && a_33557041.length == 0) return true;
    if ((!a_33557041) || (!b_33557042)) return false;
    var alen = a_33557041.length;
    if (alen != b_33557042.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33557041[i] != b_33557042[i]) return false;
    return true;
  

  
}
var F = {procname: "module parseutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet1[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function add_33556373(x_33556374, x_33556374_Idx, y_33556375) {
          if (x_33556374[x_33556374_Idx] === null) { x_33556374[x_33556374_Idx] = []; }
      var off = x_33556374[x_33556374_Idx].length;
      x_33556374[x_33556374_Idx].length += y_33556375.length;
      for (var i = 0; i < y_33556375.length; ++i) {
        x_33556374[x_33556374_Idx][off+i] = y_33556375.charCodeAt(i);
      }
    

  
}

function raiseRangeError() {
    raiseException({message: [118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101], parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");

  
}

function raiseIndexError(i_33556812, a_33556813, b_33556814) {
    var Temporary1;

    if ((b_33556814 < a_33556813)) {
    Temporary1 = [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,44,32,116,104,101,32,99,111,110,116,97,105,110,101,114,32,105,115,32,101,109,112,116,121];
    }
    else {
    Temporary1 = ([105,110,100,101,120,32] || []).concat(HEX24_369098760(i_33556812) || [],[32,110,111,116,32,105,110,32] || [],HEX24_369098760(a_33556813) || [],[32,46,46,32] || [],HEX24_369098760(b_33556814) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554449), parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addChars_301990090(result_301990092, result_301990092_Idx, x_301990093, start_301990094, n_301990095) {
    var Temporary1;

  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 43;
    F.filename = "digitsutils.nim";
    var old_301990096 = (result_301990092[result_301990092_Idx]).length;
    F.line = 44;
    if (result_301990092[result_301990092_Idx].length < (Temporary1 = chckRange(addInt(old_301990096, n_301990095), 0, 2147483647), Temporary1)) { for (var i = result_301990092[result_301990092_Idx].length; i < Temporary1; ++i) result_301990092[result_301990092_Idx].push(0); }
         else {result_301990092[result_301990092_Idx].length = Temporary1; };
    Label2: {
      F.line = 46;
      var iHEX60gensym4_301990110 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520094583 = 0;
      Label3: {
        F.line = 120;
          Label4: while (true) {
          if (!(i_520094583 < n_301990095)) break Label4;
            F.line = 49;
            F.filename = "digitsutils.nim";
            iHEX60gensym4_301990110 = i_520094583;
            F.line = 49;
            result_301990092[result_301990092_Idx][chckIndx(addInt(old_301990096, iHEX60gensym4_301990110), 0, (result_301990092[result_301990092_Idx]).length - 1)] = x_301990093.charCodeAt(chckIndx(addInt(start_301990094, iHEX60gensym4_301990110), 0, (x_301990093).length - 1));
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520094583 = addInt(i_520094583, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function addChars_301990086(result_301990088, result_301990088_Idx, x_301990089) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 55;
    F.filename = "digitsutils.nim";
    addChars_301990090(result_301990088, result_301990088_Idx, x_301990089, 0, ((x_301990089) == null ? 0 : (x_301990089).length));
  framePtr = F.prev;

  
}

function addInt_301990111(result_301990112, result_301990112_Idx, x_301990113) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 111;
    F.filename = "digitsutils.nim";
    addChars_301990086(result_301990112, result_301990112_Idx, ((x_301990113) + ""));
  framePtr = F.prev;

  
}

function addInt_301990129(result_301990130, result_301990130_Idx, x_301990131) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 115;
    F.filename = "digitsutils.nim";
    addInt_301990111(result_301990130, result_301990130_Idx, BigInt(x_301990131));
  framePtr = F.prev;

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 18;
    F.filename = "dollars.nim";
    addInt_301990129(result_369098762, 0, x_369098761);
  framePtr = F.prev;

  return result_369098762[0];

}

function auxWriteStackTrace_33556508(f_33556509) {
  var result_33556510 = [[]];

    var it_33556518 = f_33556509;
    var i_33556519 = 0;
    var total_33556520 = 0;
    var tempFrames_33556521 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555835);
    Label1: {
        Label2: while (true) {
        if (!(!((it_33556518 == null)) && (i_33556519 <= 63))) break Label2;
          tempFrames_33556521[i_33556519].Field0 = it_33556518.procname;
          tempFrames_33556521[i_33556519].Field1 = it_33556518.line;
          tempFrames_33556521[i_33556519].Field2 = it_33556518.filename;
          i_33556519 += 1;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    Label3: {
        Label4: while (true) {
        if (!!((it_33556518 == null))) break Label4;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    result_33556510[0] = nimCopy(null, [], NTI33554449);
    if (!((total_33556520 == i_33556519))) {
    result_33556510[0].push.apply(result_33556510[0], [40]);;
    result_33556510[0].push.apply(result_33556510[0], HEX24_369098760((total_33556520 - i_33556519)));;
    result_33556510[0].push.apply(result_33556510[0], [32,99,97,108,108,115,32,111,109,105,116,116,101,100,41,32,46,46,46,10]);;
    }
    
    Label5: {
      var j_33556554 = 0;
      var colontmp__520094575 = 0;
      colontmp__520094575 = (i_33556519 - 1);
      var res_520094577 = colontmp__520094575;
      Label6: {
          Label7: while (true) {
          if (!(0 <= res_520094577)) break Label7;
            j_33556554 = res_520094577;
            result_33556510[0].push.apply(result_33556510[0], cstrToNimstr(tempFrames_33556521[j_33556554].Field2));;
            if ((0 < tempFrames_33556521[j_33556554].Field1)) {
            result_33556510[0].push.apply(result_33556510[0], [40]);;
            addInt_301990129(result_33556510, 0, tempFrames_33556521[j_33556554].Field1);
            if (false) {
            result_33556510[0].push.apply(result_33556510[0], [44,32]);;
            addInt_301990129(result_33556510, 0, 0);
            }
            
            result_33556510[0].push.apply(result_33556510[0], [41]);;
            }
            
            result_33556510[0].push.apply(result_33556510[0], [32,97,116,32]);;
            add_33556373(result_33556510, 0, tempFrames_33556521[j_33556554].Field0);
            result_33556510[0].push.apply(result_33556510[0], [10]);;
            res_520094577 -= 1;
          }
      };
    };

  return result_33556510[0];

}

function rawWriteStackTrace_33556604() {
  var result_33556605 = [];

    if (!((framePtr == null))) {
    result_33556605 = nimCopy(null, ([84,114,97,99,101,98,97,99,107,32,40,109,111,115,116,32,114,101,99,101,110,116,32,99,97,108,108,32,108,97,115,116,41,10] || []).concat(auxWriteStackTrace_33556508(framePtr) || []), NTI33554449);
    }
    else {
      result_33556605 = nimCopy(null, [78,111,32,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,32,97,118,97,105,108,97,98,108,101,10], NTI33554449);
    }
    

  return result_33556605;

}

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 631;
    F.filename = "system.nim";
    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }  framePtr = F.prev;

  return result_33556922;

}

function unhandledException(e_33556649) {
    var buf_33556650 = [[]];
    if (!(((e_33556649.message).length == 0))) {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556650[0].push.apply(buf_33556650[0], e_33556649.message);;
    }
    else {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556650[0].push.apply(buf_33556650[0], [32,91]);;
    add_33556373(buf_33556650, 0, e_33556649.name);
    buf_33556650[0].push.apply(buf_33556650[0], [93,10]);;
    buf_33556650[0].push.apply(buf_33556650[0], rawWriteStackTrace_33556604());;
    var cbuf_33556651 = toJSStr(buf_33556650[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556651);
  }
  else {
    throw cbuf_33556651;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33557048) {
        if (a_33557048 > 2147483647 || a_33557048 < -2147483648) raiseOverflow();
  

  
}

function makeStringSlice_520093708(str_520093710) {
  var result_520093711 = ({buf: [null, 0], start: 0, stop: 0});

  var F = {procname: "makeStringSlice.makeStringSlice", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 49;
    F.filename = "strslice.nim";
    F.line = 57;
    var strRef_520093713 = null;
    var strRef_520093713_Idx = 0;
    F.line = 58;
    strRef_520093713 = [[]]; strRef_520093713_Idx = 0;
    F.line = 59;
    strRef_520093713[strRef_520093713_Idx] = nimCopy(null, str_520093710, NTI33554449);
    result_520093711 = nimCopy(result_520093711, {buf: [strRef_520093713, strRef_520093713_Idx], start: 0, stop: subInt((((str_520093710).length) | 0), 1)}, NTI520093699);
  framePtr = F.prev;

  return result_520093711;

}

function high_520093834(str_520093835) {
  var result_520093836 = 0;

  var F = {procname: "strslice.high", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "strslice.nim";
    result_520093836 = subInt(str_520093835.stop, str_520093835.start);
  framePtr = F.prev;

  return result_520093836;

}

function len_520093837(str_520093838) {
  var result_520093839 = 0;

  var F = {procname: "strslice.len", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 87;
    F.filename = "strslice.nim";
    result_520093839 = addInt(high_520093834(str_520093838), 1);
  framePtr = F.prev;

  return result_520093839;

}

function HEX5BHEX5D_520094138(str_520094140, slc_520094143) {
  var result_520094144 = ({buf: [null, 0], start: 0, stop: 0});

  var F = {procname: "[].[]", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 92;
    F.filename = "strslice.nim";
    if ((slc_520094143.a < 0)) {
    F.line = 95;
    raiseException({message: [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115], parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");
    }
    
    F.line = 96;
    var stop_520094146 = 0;
    if ((addInt(len_520093837(str_520094140), 1) < ((slc_520094143.b) | 0))) {
    F.line = 99;
    raiseException({message: ([118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,58,32] || []).concat(HEX24_369098760(((subInt(addInt(len_520093837(str_520094140), 1), ((slc_520094143.b) | 0))) | 0)) || []), parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");
    }
    
    F.line = 101;
    stop_520094146 = addInt(subInt(str_520094140.stop, ((slc_520094143.b) | 0)), 1);
    result_520094144 = nimCopy(result_520094144, {buf: [str_520094140.buf[0], str_520094140.buf[1]], start: addInt(str_520094140.start, slc_520094143.a), stop: stop_520094146}, NTI520093699);
  framePtr = F.prev;

  return result_520094144;

}

function HEX2EHEX2E_520094107(a_520094110, b_520094111) {
  var result_520094114 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_520094114 = nimCopy(result_520094114, {a: a_520094110, b: b_520094111}, NTI520093999);
  framePtr = F.prev;

  return result_520094114;

}

function toStringSlice_520094166(str_520094168) {
  var result_520094169 = ({buf: [null, 0], start: 0, stop: 0});

  var F = {procname: "toStringSlice.toStringSlice", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 67;
    F.filename = "strslice.nim";
    result_520094169 = nimCopy(result_520094169, makeStringSlice_520093708(str_520094168), NTI520093699);
  framePtr = F.prev;

  return result_520094169;

}

function HEX5BHEX5D_520093810(s_520093813, x_520093814) {
  var result_520093815 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_520093817 = ((x_520093814.a) | 0);
    F.line = 84;
    var L_520093819 = addInt(subInt(((x_520093814.b) | 0), a_520093817), 1);
    F.line = 85;
    result_520093815 = nimCopy(null, mnewString(chckRange(L_520093819, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_520093824 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520094588 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520094588 < L_520093819)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_520093824 = i_520094588;
            F.line = 86;
            result_520093815[chckIndx(i_520093824, 0, (result_520093815).length - 1)] = s_520093813[chckIndx(addInt(i_520093824, a_520093817), 0, (s_520093813).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520094588 = addInt(i_520094588, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_520093815;

}

function HEX2EHEX2E_520093759(a_520093762, b_520093763) {
  var result_520093766 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_520093766 = nimCopy(result_520093766, {a: a_520093762, b: b_520093763}, NTI520093759);
  framePtr = F.prev;

  return result_520093766;

}

function HEX24_520093756(str_520093757) {
  var result_520093758 = [];

  var F = {procname: "strslice.$", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((str_520093757.stop < 0)) {
    F.line = 73;
    F.filename = "strslice.nim";
    result_520093758 = nimCopy(null, [], NTI33554449);
    break BeforeRet;
    }
    
    F.line = 74;
    result_520093758 = nimCopy(null, HEX5BHEX5D_520093810(str_520093757.buf[0][str_520093757.buf[1]], HEX2EHEX2E_520093759(str_520093757.start, str_520093757.stop)), NTI33554449);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520093758;

}

function nsuFindChar(s_654313108, sub_654313109, start_654313110, last_654313111) {
    var Temporary1;

  var result_654313112 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1945;
    F.filename = "strutils.nim";
    result_654313112 = (-1);
    F.line = 1946;
    if ((last_654313111 < 0)) {
    Temporary1 = (s_654313108).length - 1;
    }
    else {
    Temporary1 = last_654313111;
    }
    
    var last_654313113 = Temporary1;
    Label2: {
      F.line = 1949;
      var iHEX60gensym176_654313127 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__520094595 = 0;
      F.line = 1949;
      F.filename = "strutils.nim";
      colontmp__520094595 = start_654313110;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_520094596 = colontmp__520094595;
      Label3: {
        F.line = 91;
          Label4: while (true) {
          if (!(res_520094596 <= last_654313113)) break Label4;
            F.line = 1963;
            F.filename = "strutils.nim";
            iHEX60gensym176_654313127 = res_520094596;
            if ((s_654313108[chckIndx(iHEX60gensym176_654313127, 0, (s_654313108).length - 1)] == sub_654313109)) {
            F.line = 1951;
            result_654313112 = iHEX60gensym176_654313127;
            break BeforeRet;
            }
            
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_520094596 = addInt(res_520094596, 1);
          }
      };
    };
  };
  framePtr = F.prev;

  return result_654313112;

}

function nsuFindStrA(a_654313086, s_654313087, sub_654313088, start_654313089, last_654313090) {
    var Temporary1;

  var result_654313091 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1905;
    F.filename = "strutils.nim";
    if ((last_654313090 < 0)) {
    Temporary1 = (s_654313087).length - 1;
    }
    else {
    Temporary1 = last_654313090;
    }
    
    var last_654313092 = Temporary1;
    F.line = 1906;
    var subLast_654313093 = subInt((sub_654313088).length, 1);
    if ((subLast_654313093 == (-1))) {
    F.line = 1911;
    result_654313091 = start_654313089;
    break BeforeRet;
    }
    
    F.line = 1915;
    result_654313091 = (-1);
    F.line = 1916;
    var skip_654313094 = start_654313089;
    Label2: {
      F.line = 1918;
        Label3: while (true) {
        if (!(subLast_654313093 <= subInt(last_654313092, skip_654313094))) break Label3;
          F.line = 1919;
          var i_654313095 = subLast_654313093;
          Label4: {
            F.line = 1920;
              Label5: while (true) {
              if (!(s_654313087[chckIndx(addInt(skip_654313094, i_654313095), 0, (s_654313087).length - 1)] == sub_654313088[chckIndx(i_654313095, 0, (sub_654313088).length - 1)])) break Label5;
                if ((i_654313095 == 0)) {
                F.line = 1922;
                result_654313091 = skip_654313094;
                break BeforeRet;
                }
                
                F.line = 1923;
                i_654313095 = subInt(i_654313095, 1);
              }
          };
          F.line = 1924;
          skip_654313094 = addInt(skip_654313094, a_654313086[chckIndx(s_654313087[chckIndx(addInt(skip_654313094, subLast_654313093), 0, (s_654313087).length - 1)], 0, (a_654313086).length - 1)]);
        }
    };
  };
  framePtr = F.prev;

  return result_654313091;

}

function fill_654313046(a_654313048, value_654313049) {
  var F = {procname: "fill.fill", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 72;
    F.filename = "algorithm.nim";
    var xHEX60gensym172_654313055 = 0;
    Label1: {
      F.line = 98;
        Label2: while (true) {
        if (!(xHEX60gensym172_654313055 <= (a_654313048).length - 1)) break Label2;
          F.line = 98;
          a_654313048[chckIndx(xHEX60gensym172_654313055, 0, (a_654313048).length - 1)] = value_654313049;
          F.line = 75;
          xHEX60gensym172_654313055 = addInt(xHEX60gensym172_654313055, 1);
        }
    };
  framePtr = F.prev;

  
}

function nsuInitSkipTable(a_654313043, sub_654313044) {
  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1878;
    F.filename = "strutils.nim";
    var m_654313045 = (sub_654313044).length;
    F.line = 1879;
    fill_654313046(a_654313043, m_654313045);
    Label1: {
      F.line = 1881;
      var i_654313065 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__520094601 = 0;
      F.line = 1881;
      F.filename = "strutils.nim";
      colontmp__520094601 = subInt(m_654313045, 1);
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_520094602 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_520094602 < colontmp__520094601)) break Label3;
            F.line = 1881;
            F.filename = "strutils.nim";
            i_654313065 = i_520094602;
            F.line = 1881;
            a_654313043[chckIndx(sub_654313044[chckIndx(i_654313065, 0, (sub_654313044).length - 1)], 0, (a_654313043).length - 1)] = subInt(subInt(m_654313045, 1), i_654313065);
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_520094602 = addInt(i_520094602, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function nsuInitNewSkipTable(sub_654313083) {
  var result_654313084 = [new Int32Array(256)];

  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1891;
    F.filename = "strutils.nim";
    nsuInitSkipTable(result_654313084[0], sub_654313083);
  framePtr = F.prev;

  return result_654313084[0];

}

function nsuFindStr(s_654313145, sub_654313146, start_654313147, last_654313148) {
  var result_654313149 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((subInt((s_654313145).length, start_654313147) < (sub_654313146).length)) {
    F.line = 2003;
    F.filename = "strutils.nim";
    result_654313149 = (-1);
    break BeforeRet;
    }
    
    if (((sub_654313146).length == 1)) {
    F.line = 2004;
    result_654313149 = nsuFindChar(s_654313145, sub_654313146[chckIndx(0, 0, (sub_654313146).length - 1)], start_654313147, last_654313148);
    break BeforeRet;
    }
    
    F.line = 2007;
    result_654313149 = nsuFindStrA(nsuInitNewSkipTable(sub_654313146), s_654313145, sub_654313146, start_654313147, last_654313148);
  };
  framePtr = F.prev;

  return result_654313149;

}

function sysFatal_268435501(message_268435504) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_268435504, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}

function raiseAssert_268435499(msg_268435500) {
  var F = {procname: "assertions.raiseAssert", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 36;
    F.filename = "assertions.nim";
    sysFatal_268435501(msg_268435500);
  framePtr = F.prev;

  
}

function failedAssertImpl_268435541(msg_268435542) {
  var F = {procname: "assertions.failedAssertImpl", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 41;
    F.filename = "assertions.nim";
    raiseAssert_268435499(msg_268435542);
  framePtr = F.prev;

  
}

function find_520093942(s_520093943, sub_520093944, start_520093945, last_520093946) {
    var Temporary1;

  var result_520093947 = 0;

  var F = {procname: "strslice.find", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 169;
    F.filename = "strslice.nim";
    if ((last_520093946 == 0)) {
    Temporary1 = subInt(s_520093943.stop, s_520093943.start);
    }
    else {
    Temporary1 = ((last_520093946) | 0);
    }
    
    result_520093947 = subInt(((nsuFindStr(s_520093943.buf[0][s_520093943.buf[1]], sub_520093944, chckRange(addInt(((start_520093945) | 0), s_520093943.start), 0, 2147483647), ((addInt(s_520093943.start, Temporary1)) | 0))) | 0), s_520093943.start);
    if (((result_520093947 < 0) || (subInt(s_520093943.stop, (((sub_520093944).length - 1) | 0)) < result_520093947))) {
    F.line = 171;
    result_520093947 = (-1);
    }
    
  framePtr = F.prev;

  return result_520093947;

}

function find_520093948(s_520093949, sub_520093950, start_520093951, last_520093952) {
    var Temporary1;
    var Temporary2;

  var result_520093953 = 0;

  var F = {procname: "strslice.find", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 175;
    F.filename = "strslice.nim";
    if ((s_520093949.buf[0] == sub_520093950.buf[0] && s_520093949.buf[1] == sub_520093950.buf[1])) {
    if (((addInt(s_520093949.start, ((start_520093951) | 0)) <= sub_520093950.start) && (subInt(sub_520093950.stop, s_520093949.start) <= subInt(s_520093949.stop, addInt(s_520093949.start, ((last_520093952) | 0)))))) {
    Temporary2 = subInt(sub_520093950.start, s_520093949.start);
    }
    else {
    Temporary2 = (-1);
    }
    
    Temporary1 = Temporary2;
    }
    else {
    Temporary1 = find_520093942(s_520093949, HEX24_520093756(sub_520093950), start_520093951, last_520093952);
    }
    
    result_520093953 = Temporary1;
  framePtr = F.prev;

  return result_520093953;

}

function HEX5BHEX5D_520093865(str_520093867, slc_520093870) {
  var result_520093871 = ({buf: [null, 0], start: 0, stop: 0});

  var F = {procname: "[].[]", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 92;
    F.filename = "strslice.nim";
    if ((slc_520093870.a < 0)) {
    F.line = 95;
    raiseException({message: [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115], parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");
    }
    
    F.line = 96;
    var stop_520093873 = 0;
    if (((addInt(slc_520093870.b, 1) < slc_520093870.a) || (high_520093834(str_520093867) < slc_520093870.b))) {
    F.line = 104;
    raiseException({message: [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115], parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");
    }
    
    F.line = 105;
    stop_520093873 = addInt(str_520093867.start, slc_520093870.b);
    result_520093871 = nimCopy(result_520093871, {buf: [str_520093867.buf[0], str_520093867.buf[1]], start: addInt(str_520093867.start, slc_520093870.a), stop: stop_520093873}, NTI520093699);
  framePtr = F.prev;

  return result_520093871;

}

function startsWith_520094338(str_520094340, sub_520094341) {
  var result_520094342 = false;

  var F = {procname: "startsWith.startsWith", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((len_520093837(str_520094340) < (((sub_520094341).length) | 0))) {
    F.line = 129;
    F.filename = "strslice.nim";
    result_520094342 = false;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 134;
      var idx_520094343 = 0;
      F.line = 134;
      var c_520094344 = 0;
      F.line = 193;
      F.filename = "iterators.nim";
      var i_520094607 = 0;
      F.line = 194;
      var L_520094608 = (sub_520094341).length;
      Label2: {
        F.line = 195;
          Label3: while (true) {
          if (!(i_520094607 < L_520094608)) break Label3;
            F.line = 134;
            F.filename = "strslice.nim";
            idx_520094343 = i_520094607;
            F.line = 134;
            c_520094344 = sub_520094341[chckIndx(i_520094607, 0, (sub_520094341).length - 1)];
            if (!((str_520094340.buf[0][str_520094340.buf[1]][chckIndx(addInt(((idx_520094343) | 0), str_520094340.start), 0, (str_520094340.buf[0][str_520094340.buf[1]]).length - 1)] == c_520094344))) {
            F.line = 135;
            result_520094342 = false;
            break BeforeRet;
            }
            
            F.line = 197;
            F.filename = "iterators.nim";
            i_520094607 = addInt(i_520094607, 1);
            if (!(((sub_520094341).length == L_520094608))) {
            F.line = 198;
            failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system/iterators.nim(198, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 136;
    F.filename = "strslice.nim";
    result_520094342 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094342;

}

function HEX3DHEX3D_520094333(str_520094335, cmp_520094336) {
  var result_520094337 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((len_520093837(str_520094335) == (((cmp_520094336).length) | 0)))) {
    F.line = 141;
    F.filename = "strslice.nim";
    result_520094337 = false;
    break BeforeRet;
    }
    
    F.line = 147;
    result_520094337 = startsWith_520094338(str_520094335, cmp_520094336);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094337;

}

function str_520093825(str_520093826) {
  var result_520093827 = null;
  var result_520093827_Idx = 0;

  var F = {procname: "strslice.str", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 76;
    F.filename = "strslice.nim";
    result_520093827 = str_520093826.buf[0]; result_520093827_Idx = str_520093826.buf[1];
  framePtr = F.prev;

  return [result_520093827, result_520093827_Idx];

}

function matchLen_520094075(slice_520094076, pattern_520094077, location_520094078) {
    var Temporary1;

  var result_520094079 = 0;

  var F = {procname: "strslice.matchLen", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(((0 <= location_520094078) && (location_520094078 <= addInt(subInt(slice_520094076.stop, slice_520094076.start), 1))))) {
    F.line = 241;
    F.filename = "strslice.nim";
    failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(241, 5) `location >= 0 and location <= slice.stop - slice.start + 1` "));
    }
    
    F.line = 242;
    pattern_520094077.Field0.lastIndex = addInt(location_520094078, slice_520094076.start);
    F.line = 243;
    var m_520094085 = (toJSStr((Temporary1 = str_520093825(slice_520094076), Temporary1)[0][Temporary1[1]]).match(pattern_520094077.Field0) || []);
    if ((0 < (m_520094085).length)) {
    if (!(((m_520094085).length == 1))) {
    F.line = 245;
    failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(245, 7) `m.len == 1` "));
    }
    
    F.line = 246;
    result_520094079 = ((((m_520094085[chckIndx(0, 0, (m_520094085).length - 1)]) == null ? 0 : (m_520094085[chckIndx(0, 0, (m_520094085).length - 1)]).length)) | 0);
    break BeforeRet;
    }
    
    F.line = 247;
    result_520094079 = (-1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094079;

}

function re_520094005(pattern_520094006) {
  var result_520094007 = {Field0: null, Field1: null};

  var F = {procname: "strslice.re", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 214;
    F.filename = "strslice.nim";
    var cleanPattern_520094008 = toJSStr(pattern_520094006).replace(PCREFlag_520094002, "");
    F.line = 215;
    var colontmp__520094610 = new RegExp(cleanPattern_520094008, "uy");
    F.line = 216;
    var colontmp__520094611 = new RegExp(cleanPattern_520094008, "ug");
    F.line = 215;
    result_520094007 = nimCopy(result_520094007, {Field0: colontmp__520094610, Field1: colontmp__520094611}, NTI520093951);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094007;

}

function HEX5BHEX5D_520094382(str_520094384, slc_520094387) {
  var result_520094388 = ({buf: [null, 0], start: 0, stop: 0});

  var F = {procname: "[].[]", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 118;
    F.filename = "strslice.nim";
    result_520094388 = nimCopy(result_520094388, HEX5BHEX5D_520094138(str_520094384, HEX2EHEX2E_520094107(((slc_520094387.a) | 0), slc_520094387.b)), NTI520093699);
  framePtr = F.prev;

  return result_520094388;

}

function HEX2EHEX2E_838860904(a_838860907, b_838860908) {
  var result_838860911 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_838860911 = nimCopy(result_838860911, {a: a_838860907, b: b_838860908}, NTI838860885);
  framePtr = F.prev;

  return result_838860911;

}

function HEX3DHEX3D_520094409(x_520094411, y_520094412) {
  var result_520094413 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((x_520094411["Field0"] == y_520094412["Field0"]))) {
    F.line = 1708;
    F.filename = "system.nim";
    result_520094413 = false;
    break BeforeRet;
    }
    
    if (!((x_520094411["Field1"] == y_520094412["Field1"]))) {
    F.line = 1708;
    result_520094413 = false;
    break BeforeRet;
    }
    
    F.line = 1709;
    result_520094413 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094413;

}

function find_520094037(slice_520094038, pattern_520094039, start_520094040, size_520094041) {
    var Temporary1;

  var result_520094044 = {Field0: 0, Field1: 0};

  var F = {procname: "strslice.find", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(((0 <= start_520094040) && (start_520094040 <= addInt(subInt(slice_520094038.stop, slice_520094038.start), 1))))) {
    F.line = 229;
    F.filename = "strslice.nim";
    failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(229, 5) `start >= 0 and start <= slice.stop - slice.start + 1` "));
    }
    
    F.line = 230;
    pattern_520094039.Field1.lastIndex = addInt(start_520094040, slice_520094038.start);
    F.line = 231;
    var s_520094050 = toJSStr((Temporary1 = str_520093825(slice_520094038), Temporary1)[0][Temporary1[1]]);
    F.line = 232;
    var m_520094051 = (pattern_520094039.Field1.exec(s_520094050) || []);
    if ((0 < (m_520094051).length)) {
    F.line = 234;
    var l_520094056 = ((((m_520094051[chckIndx(0, 0, (m_520094051).length - 1)]) == null ? 0 : (m_520094051[chckIndx(0, 0, (m_520094051).length - 1)]).length)) | 0);
    F.line = 235;
    var a_520094057 = subInt(subInt(pattern_520094039.Field1.lastIndex, slice_520094038.start), l_520094056);
    if (((size_520094041 < 0) || (a_520094057 <= addInt(start_520094040, size_520094041)))) {
    F.line = 237;
    var colontmp__520094612 = a_520094057;
    F.line = 237;
    var colontmp__520094613 = subInt(addInt(a_520094057, l_520094056), 1);
    F.line = 237;
    result_520094044 = nimCopy(result_520094044, {Field0: colontmp__520094612, Field1: colontmp__520094613}, NTI520093968);
    break BeforeRet;
    }
    
    }
    
    F.line = 238;
    var colontmp__520094614 = (-1);
    F.line = 238;
    var colontmp__520094615 = (-2);
    F.line = 238;
    result_520094044 = nimCopy(result_520094044, {Field0: colontmp__520094614, Field1: colontmp__520094615}, NTI520093968);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094044;

}

function replace_520094097(slice_520094098, pattern_520094099, replacement_520094100) {
  var result_520094101 = null;

  var F = {procname: "strslice.replace", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 250;
    F.filename = "strslice.nim";
    result_520094101 = toJSStr(HEX24_520093756(slice_520094098)).replace(pattern_520094099.Field1, toJSStr(replacement_520094100));
  framePtr = F.prev;

  return result_520094101;

}

function HEX5BHEX5D_520093852(str_520093853, slc_520093856) {
  var result_520093857 = ({buf: [null, 0], start: 0, stop: 0});

  var F = {procname: "strslice.[]", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 110;
    F.filename = "strslice.nim";
    result_520093857 = nimCopy(result_520093857, HEX5BHEX5D_520093865(str_520093853, HEX2EHEX2E_520093759(((slc_520093856.a) | 0), ((slc_520093856.b) | 0))), NTI520093699);
  framePtr = F.prev;

  return result_520093857;

}

function HEX2EHEX2E_889192496(a_889192499, b_889192500) {
  var result_889192501 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/home/eckhart/.choosenim/toolchains/nim-2.0.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_889192501 = nimCopy(result_889192501, {a: a_889192499, b: b_889192500}, NTI704643141);
  framePtr = F.prev;

  return result_889192501;

}

function rex_520094028(pattern_520094029) {
  var result_520094030 = {Field0: null, Field1: null};

  var F = {procname: "strslice.rex", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 219;
    F.filename = "strslice.nim";
    var flatPattern_520094031 = toJSStr(pattern_520094029).replace(PCREFlag_520094002, "").replace(comment_520094003, "").replace(whitespace_520094004, "");
    F.line = 222;
    var colontmp__520094616 = new RegExp(flatPattern_520094031, "uy");
    F.line = 223;
    var colontmp__520094617 = new RegExp(flatPattern_520094031, "ug");
    F.line = 222;
    result_520094030 = nimCopy(result_520094030, {Field0: colontmp__520094616, Field1: colontmp__520094617}, NTI520093951);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_520094030;

}
var F = {procname: "module strslice", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
framePtr = F;
F.line = 63;
F.filename = "strslice.nim";
var EmptyStringSlice_520093751 = makeStringSlice_520093708([]);
F.line = 209;
var PCREFlag_520094002 = new RegExp("\\(\\*\\w+\\)", "g");
F.line = 210;
var comment_520094003 = new RegExp("#[^\\n]*", "g");
F.line = 211;
var whitespace_520094004 = new RegExp("(?: *\\n *)|(?:^ *)|(?: *$)", "g");
F.line = 276;
var s1_520094102 = [72,101,108,108,111,32,119,111,114,108,100];
F.line = 277;
var s2_520094106 = makeStringSlice_520093708([72,101,108,108,111,32,119,111,114,108,100]);
F.line = 278;
var s3_520094149 = HEX5BHEX5D_520094138(s2_520094106, HEX2EHEX2E_520094107(6, 1));
F.line = 279;
var s4_520094165 = HEX5BHEX5D_520094138(s2_520094106, HEX2EHEX2E_520094107(2, 1));
F.line = 280;
var s5_520094174 = toStringSlice_520094166([]);
F.line = 281;
var s6_520094178 = toStringSlice_520094166([97]);
F.line = 283;
rawEcho(HEX24_520093756(s2_520094106));
F.line = 284;
rawEcho(HEX24_520093756(s5_520094174));
F.line = 285;
rawEcho(HEX24_369098760(((len_520093837(s5_520094174)) | 0)));
F.line = 286;
rawEcho(HEX24_520093756(s6_520094178));
F.line = 287;
rawEcho(HEX24_369098760(((len_520093837(s6_520094178)) | 0)));
if (!((nsuFindStr(s1_520094102, [119,111,114,108,100], 0, (-1)) == 6))) {
F.line = 289;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(289, 3) `s1.find(\"world\") == 6` "));
}

if (!((find_520093942(s2_520094106, [119,111,114,108,100], 0, 0) == 6))) {
F.line = 290;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(290, 3) `s2.find(\"world\") == 6` "));
}

if (!((find_520093942(s3_520094149, [119,111,114,108,100], 0, 0) == 0))) {
F.line = 291;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(291, 3) `s3.find(\"world\") == 0` "));
}

F.line = 292;
rawEcho([72,69,82,69,58,32], HEX24_369098760(((find_520093948(s2_520094106, s3_520094149, 0, 0)) | 0)));
F.line = 293;
rawEcho(HEX24_520093756(s2_520094106));
F.line = 294;
rawEcho(HEX24_520093756(s3_520094149));
if (!((find_520093948(s2_520094106, s3_520094149, 0, 0) == 6))) {
F.line = 295;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(295, 3) `s2.find(s3) == 6` "));
}

if (!((find_520093948(s2_520094106, s3_520094149, 0, 8) == ((nsuFindStr(s1_520094102, HEX24_520093756(s3_520094149), 0, 8)) | 0)))) {
F.line = 296;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(296, 3) `s2.find(s3, last = 8) == s1.find($s3, last = 8)` "));
}

if (!((find_520093948(s2_520094106, s3_520094149, 8, 0) == ((nsuFindStr(s1_520094102, HEX24_520093756(s3_520094149), 8, (-1))) | 0)))) {
F.line = 297;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(297, 3) `s2.find(s3, start = 8) == s1.find($s3, start = 8)` "));
}

if (!((find_520093948(s3_520094149, s4_520094165, 0, 0) == (-1)))) {
F.line = 298;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(298, 3) `s3.find(s4) == -1` "));
}

F.line = 301;
var s_520094214 = [[48,49,50,51,52,53,54,55,56,57]];
F.line = 302;
var ss_520094218 = [toStringSlice_520094166(s_520094214[0])];
F.line = 303;
var upToFour_520094234 = [HEX5BHEX5D_520093865(ss_520094218[0], HEX2EHEX2E_520093759(0, 4))];
F.line = 304;
var upToFive_520094250 = [HEX5BHEX5D_520093865(ss_520094218[0], HEX2EHEX2E_520093759(0, 5))];
F.line = 305;
var upToSix_520094266 = [HEX5BHEX5D_520093865(ss_520094218[0], HEX2EHEX2E_520093759(0, 6))];
F.line = 306;
var threeToFive_520094282 = [HEX5BHEX5D_520093865(ss_520094218[0], HEX2EHEX2E_520093759(3, 5))];
if (!((((nsuFindStr(s_520094214[0], [49,50,51], 0, 5)) | 0) == find_520093942(ss_520094218[0], [49,50,51], 0, 5)))) {
F.line = 308;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(308, 3) `s.find(\"123\", last = 5) == ss.find(\"123\", last = 5)` "));
}

if (!((((nsuFindStr(s_520094214[0], [52,53,54], 0, 5)) | 0) == find_520093942(ss_520094218[0], [52,53,54], 0, 5)))) {
F.line = 309;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(309, 3) `s.find(\"456\", last = 5) == ss.find(\"456\", last = 5)` "));
}

if (!((nsuFindStr(s_520094214[0], [55,56,57], 0, 5) == nsuFindStr(s_520094214[0], [55,56,57], 0, 5)))) {
F.line = 310;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(310, 3) `s.find(\"789\", last = 5) == s.find(\"789\", last = 5)` "));
}

if (!((((nsuFindStr(s_520094214[0], [49,50,51], 2, (-1))) | 0) == find_520093942(ss_520094218[0], [49,50,51], 2, 0)))) {
F.line = 311;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(311, 3) `s.find(\"123\", start = 2) == ss.find(\"123\", start = 2)` "));
}

if (!((((nsuFindStr(s_520094214[0], [49,50,51], 2, 5)) | 0) == find_520093942(ss_520094218[0], [49,50,51], 2, 5)))) {
F.line = 312;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(312, 3) `s.find(\"123\", start = 2, last = 5) == ss.find(\"123\", start = 2, last = 5)` "));
}

if (!(!((((nsuFindStr(s_520094214[0], [52,53,54], 0, (-1))) | 0) == find_520093942(upToFive_520094250[0], [52,53,54], 0, 0))))) {
F.line = 314;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(314, 3) `s.find(\"456\") != upToFive.find(\"456\")` "));
}

if (!((find_520093942(upToFive_520094250[0], [52,53,54], 0, 0) == (-1)))) {
F.line = 315;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(315, 3) `upToFive.find(\"456\") == -1` "));
}

if (!((((nsuFindStr(s_520094214[0], [52,53,54], 0, (-1))) | 0) == find_520093942(upToSix_520094266[0], [52,53,54], 0, 0)))) {
F.line = 316;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(316, 3) `s.find(\"456\") == upToSix.find(\"456\")` "));
}

if (!((((nsuFindStr(s_520094214[0], [52], 0, (-1))) | 0) == addInt(find_520093942(threeToFive_520094282[0], [52], 0, 0), 3)))) {
F.line = 318;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(318, 3) `s.find(\"4\") == threeToFive.find(\"4\") + 3` "));
}

if (!((find_520093948(upToFour_520094234[0], threeToFive_520094282[0], 0, 0) == (-1)))) {
F.line = 319;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(319, 3) `upToFour.find(threeToFive) == -1` "));
}

F.line = 321;
rawEcho(nimBoolToStr(HEX3DHEX3D_520094333(s2_520094106, s1_520094102)));
F.line = 322;
rawEcho(nimBoolToStr(!(HEX3DHEX3D_520094333(s2_520094106, s1_520094102))));
F.line = 324;
var slice_520094352 = makeStringSlice_520093708([97,98,99,32,49,50,51,32,100,101,102,32,52,53,54,32,103,104,32,55,56,32,105,106,107]);
if (!((matchLen_520094075(slice_520094352, re_520094005([92,119,43]), 0) == 3))) {
F.line = 325;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(325, 3) `slice.matchLen(re\"\\w+\", 0) == 3` "));
}

if (!((matchLen_520094075(slice_520094352, re_520094005([91,48,45,57,93,43]), 0) == (-1)))) {
F.line = 326;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(326, 3) `slice.matchLen(re\"[0-9]+\", 0) == -1` "));
}

if (!((matchLen_520094075(slice_520094352, re_520094005([91,48,45,57,93,43]), 4) == 3))) {
F.line = 327;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(327, 3) `slice.matchLen(re\"[0-9]+\", 4) == 3` "));
}

if (!((matchLen_520094075(slice_520094352, re_520094005([91,48,45,57,93,43]), 19) == 2))) {
F.line = 328;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(328, 3) `slice.matchLen(re\"[0-9]+\", 19) == 2` "));
}

if (!((matchLen_520094075(HEX5BHEX5D_520094382(slice_520094352, HEX2EHEX2E_838860904(19, 1)), re_520094005([91,48,45,57,93,43]), 0) == 2))) {
F.line = 329;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(329, 3) `slice[19 .. ^1].matchLen(re\"[0-9]+\", 0) == 2` "));
}

if (!(HEX3DHEX3D_520094409(find_520094037(slice_520094352, re_520094005([91,48,45,57,93,43]), 0, (-1)), {Field0: 4, Field1: 6}))) {
F.line = 331;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(331, 3) `slice.find(re\"[0-9]+\") == (4\'i32, 6\'i32)` "));
}

if (!(HEX3DHEX3D_520094409(find_520094037(slice_520094352, re_520094005([91,48,45,57,93,43]), 7, (-1)), {Field0: 12, Field1: 14}))) {
F.line = 332;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(332, 3) `slice.find(re\"[0-9]+\", 7) == (12\'i32, 14\'i32)` "));
}

if (!(HEX3DHEX3D_520094409(find_520094037(slice_520094352, re_520094005([91,48,45,57,93,43]), 7, 4), {Field0: (-1), Field1: (-2)}))) {
F.line = 333;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(333, 3) `slice.find(re\"[0-9]+\", 7, 4) == (-1\'i32, -2\'i32)` "));
}

if (!(HEX3DHEX3D_520094409(find_520094037(HEX5BHEX5D_520094382(slice_520094352, HEX2EHEX2E_838860904(19, 1)), re_520094005([91,48,45,57,93,43]), 0, (-1)), {Field0: 0, Field1: 1}))) {
F.line = 334;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(334, 3) `slice[19 .. ^1].find(re\"[0-9]+\") == (0\'i32, 1\'i32)` "));
}

if (!((replace_520094097(HEX5BHEX5D_520093852(slice_520094352, HEX2EHEX2E_889192496(4, 10)), re_520094005([92,100]), [63]) == "??? def"))) {
F.line = 336;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(336, 3) `slice[4 .. 10].replace(re\"\\d\", \"?\") == \"??? def\"` "));
}

F.line = 338;
var trivial_520094483 = makeStringSlice_520093708([65]);
if (!((matchLen_520094075(trivial_520094483, re_520094005([92,119,43]), 0) == 1))) {
F.line = 339;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(339, 3) `trivial.matchLen(re\"\\w+\", 0) == 1` "));
}

if (!((matchLen_520094075(trivial_520094483, re_520094005([92,119,43]), 1) == (-1)))) {
F.line = 340;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(340, 3) `trivial.matchLen(re\"\\w+\", 1) == -1` "));
}

if (!((matchLen_520094075(trivial_520094483, re_520094005([92,119,42]), 1) == 0))) {
F.line = 341;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(341, 3) `trivial.matchLen(re\"\\w*\", 1) == 0` "));
}

if (!((matchLen_520094075(trivial_520094483, re_520094005([36]), 1) == 0))) {
F.line = 342;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(342, 3) `trivial.matchLen(re\"$\", 1) == 0` "));
}

if (!((matchLen_520094075(trivial_520094483, re_520094005([36]), 0) == (-1)))) {
F.line = 344;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(344, 3) `trivial.matchLen(re\"$\", 0) == -1` "));
}

if (!((matchLen_520094075(trivial_520094483, re_520094005([94]), 0) == 0))) {
F.line = 345;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(345, 3) `trivial.matchLen(re\"^\", 0) == 0` "));
}

if (!((matchLen_520094075(trivial_520094483, re_520094005([94]), 1) == (-1)))) {
F.line = 346;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(346, 3) `trivial.matchLen(re\"^\", 1) == -1` "));
}

if (!(HEX3DHEX3D_520094409(find_520094037(trivial_520094483, re_520094005([92,119,43]), 0, (-1)), {Field0: 0, Field1: 0}))) {
F.line = 349;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(349, 3) `trivial.find(re\"\\w+\", 0) == (0\'i32, 0\'i32)` "));
}

if (!(HEX3DHEX3D_520094409(find_520094037(trivial_520094483, re_520094005([92,119,43]), 1, (-1)), {Field0: (-1), Field1: (-2)}))) {
F.line = 350;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(350, 3) `trivial.find(re\"\\w+\", 1) == (-1\'i32, -2\'i32)` "));
}

if (!(eqStrings(cstrToNimstr(re_520094005([40,42,85,84,70,56,41,40,42,85,67,80,41,32,65,32,32,32])["Field0"].toString()), [47,32,65,32,32,32,47,117,121]))) {
F.line = 353;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(353, 5) `$re(\"(*UTF8)(*UCP) A   \")[0].toCString() == r\"/ A   /uy\"` "));
}

if (!(eqStrings(cstrToNimstr(rex_520094028([32,32,32,65,32,66,32,32,32])["Field0"].toString()), [47,65,32,66,47,117,121]))) {
F.line = 354;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(354, 5) `$rex(\"   A B   \")[0].toCString() == r\"/A B/uy\"` "));
}

F.line = 355;
var pattern_520094547 = makeNimstrLit("      ^       # match the beginning of the line\x0A      (\\w+)   # 1st capture group: match one or more word characters\x0A      \\s      # match a whitespace character\x0A      (\\w+)   # 2nd capture group: match one or more word characters\x0A      ");
if (!(eqStrings(cstrToNimstr(rex_520094028(pattern_520094547)["Field0"].toString()), [47,94,40,92,119,43,41,92,115,40,92,119,43,41,47,117,121]))) {
F.line = 361;
failedAssertImpl_268435541(makeNimstrLit("/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(361, 5) `$rex(pattern)[0].toCString() == r\"/^(\\w+)\\s(\\w+)/uy\"` "));
}

F.line = 363;
rawEcho(cstrToNimstr(replace_520094097(makeStringSlice_520093708([97,98,99,10,100,101,102]), re_520094005([92,110]), [92,110])));
framePtr = F.prev;
var F = {procname: "module strslice", prev: framePtr, filename: "/home/eckhart/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
framePtr = F;
framePtr = F.prev;
