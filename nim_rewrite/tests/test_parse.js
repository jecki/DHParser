/* Generated by the Nim Compiler v2.0.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI1375734262 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375734246 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375736327 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375732464 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375734902 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1375734901 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375737788 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI671088643 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33554445 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI671088654 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1023410201 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410199 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410198 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410191 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410190 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410189 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410187 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1023410186 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1023410185 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI671088653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217763 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375734713 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI536871894 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI536871886 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI536871878 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375734551 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375735636 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375735634 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375732514 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375735649 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375736430 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375736444 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375736441 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375736438 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375735955 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375735979 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375734163 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375734152 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375734141 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375735787 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375735793 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375735540 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375735469 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI671088655 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375734862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1275068424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375732657 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375732672 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375732667 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1191182606 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217753 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217750 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375731805 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375731763 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731804 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375731803 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375731817 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1375731760 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1375731762 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731802 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375731769 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375731755 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1375731778 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217747 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375731758 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731777 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1241514002 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375732492 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375732584 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375732898 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275069605 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275069564 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI805306437 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1191182399 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1275069210 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275069004 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275069186 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275069119 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275069113 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275069108 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI922746959 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI922746965 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI503316800 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI922746906 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI754975093 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI754975126 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI671088646 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI671089169 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI671088651 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI671088644 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI671088652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555179 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217746 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375731734 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375731813 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375731812 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275068421 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1375731757 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731800 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731797 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375731794 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731786 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1375731753 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1375731785 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375731775 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554443 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI1375731765 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1375731766 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1375731784 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1375731768 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375731754 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1375731771 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1375731770 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1375731776 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1375731810 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1375731772 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731875 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1241513991 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1241513987 = {size: 0,kind: 42,base: null,node: null,finalizer: null};
var NTI1241513990 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1241513988 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1241514010 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1375731773 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1375731774 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1107296259 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1275068437 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1275068434 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275068431 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1275068442 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1275068420 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1275068441 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1275068440 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1275068422 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI184549387 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI1224736772 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1224736771 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1191182586 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1191182341 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1191182339 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217749 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555835 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555181 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555180 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555178 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555178.node = NNI33555178;
NTI33555180.base = NTI33555177;
NTI33555181.base = NTI33555177;
var NNI33555177 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555180, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555181, name: "up", sons: null}]};
NTI33555177.node = NNI33555177;
var NNI33555173 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555173.node = NNI33555173;
NTI33555177.base = NTI33555173;
NTI33555178.base = NTI33555177;
NTI134217741.base = NTI33555178;
NTI134217743.base = NTI134217741;
var NNI33555835 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554450, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554450, name: "Field2", sons: null}]};
NTI33555835.node = NNI33555835;
var NNI134217751 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555178;
var NNI134217749 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555178;
NTI1191182341.base = NTI33554449;
var NNI1191182339 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1191182341, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554438, name: "Field2", sons: null}]};
NTI1191182339.node = NNI1191182339;
var NNI1224736772 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "flags", len: 0, typ: NTI33554450, name: "flags", sons: null}, 
{kind: 1, offset: "dotAll", len: 0, typ: NTI33554466, name: "dotAll", sons: null}, 
{kind: 1, offset: "global", len: 0, typ: NTI33554466, name: "global", sons: null}, 
{kind: 1, offset: "ignoreCase", len: 0, typ: NTI33554466, name: "ignoreCase", sons: null}, 
{kind: 1, offset: "multiline", len: 0, typ: NTI33554466, name: "multiline", sons: null}, 
{kind: 1, offset: "source", len: 0, typ: NTI33554450, name: "source", sons: null}, 
{kind: 1, offset: "sticky", len: 0, typ: NTI33554466, name: "sticky", sons: null}, 
{kind: 1, offset: "unicode", len: 0, typ: NTI33554466, name: "unicode", sons: null}, 
{kind: 1, offset: "lastIndex", len: 0, typ: NTI184549387, name: "lastIndex", sons: null}, 
{kind: 1, offset: "input", len: 0, typ: NTI33554450, name: "input", sons: null}, 
{kind: 1, offset: "lastMatch", len: 0, typ: NTI33554450, name: "lastMatch", sons: null}, 
{kind: 1, offset: "lastParen", len: 0, typ: NTI33554450, name: "lastParen", sons: null}, 
{kind: 1, offset: "leftContext", len: 0, typ: NTI33554450, name: "leftContext", sons: null}, 
{kind: 1, offset: "rightContext", len: 0, typ: NTI33554450, name: "rightContext", sons: null}, 
{kind: 1, offset: "hasIndices", len: 0, typ: NTI33554466, name: "hasIndices", sons: null}]};
NTI1224736772.node = NNI1224736772;
var NNI33555183 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555183.node = NNI33555183;
NTI33555183.base = NTI33555173;
NTI1224736772.base = NTI33555183;
NTI1224736771.base = NTI1224736772;
var NNI1191182586 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1224736771, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1224736771, name: "Field1", sons: null}]};
NTI1191182586.node = NNI1191182586;
NTI1275068440.base = NTI33554449;
NTI1275068420.base = NTI1275068422;
NTI1275068441.base = NTI1275068420;
var NNI1275068437 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1107296259, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554449, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI33554449, name: "Field3", sons: null}]};
NTI1275068437.node = NNI1275068437;
NTI1275068434.base = NTI1275068437;
var NNI1275068431 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1275068434, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI33554435, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI33554435, name: "last", sons: null}]};
NTI1275068431.node = NNI1275068431;
NTI1275068442.base = NTI1275068431;
var NNI1275068422 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nameRef", len: 0, typ: NTI1275068440, name: "nameRef", sons: null}, 
{kind: 1, offset: "childrenSeq", len: 0, typ: NTI1275068441, name: "childrenSeq", sons: null}, 
{kind: 1, offset: "textSlice", len: 0, typ: NTI1191182339, name: "textSlice", sons: null}, 
{kind: 1, offset: "attributesRef", len: 0, typ: NTI1275068442, name: "attributesRef", sons: null}, 
{kind: 1, offset: "sourcePos", len: 0, typ: NTI33554438, name: "sourcePos", sons: null}]};
NTI1275068422.node = NNI1275068422;
NTI1275068422.base = NTI33555173;
var NNI1375731773 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1375731773, name: "postfixNotation", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1375731773, name: "memoize", len: 0, sons: null}}};
NTI1375731773.node = NNI1375731773;
NTI1375731774.base = NTI1375731773;
NTI1241513991.base = NTI1241513988;
var NNI1241513990 = {kind: 2, len: 9, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "message", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI33554438, name: "pos", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI1241513987, name: "code", sons: null}, 
{kind: 1, offset: "line", len: 0, typ: NTI33554438, name: "line", sons: null}, 
{kind: 1, offset: "column", len: 0, typ: NTI33554438, name: "column", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI33554438, name: "length", sons: null}, 
{kind: 1, offset: "related", len: 0, typ: NTI1241513991, name: "related", sons: null}, 
{kind: 1, offset: "origPos", len: 0, typ: NTI33554438, name: "origPos", sons: null}, 
{kind: 1, offset: "origDoc", len: 0, typ: NTI33554449, name: "origDoc", sons: null}]};
NTI1241513990.node = NNI1241513990;
NTI1241513988.base = NTI1241513990;
NTI1241514010.base = NTI1241513988;
var NNI1375731772 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1375731810, name: "Field1", sons: null}]};
NTI1375731772.node = NNI1375731772;
NTI1375731875.base = NTI1375731772;
NTI1375731784.base = NTI33554449;
var NNI1375731765 = {kind: 2, offset: 0, typ: null, name: null, len: 11, sons: {"0": {kind: 1, offset: 0, typ: NTI1375731765, name: "isLeaf", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1375731765, name: "isNary", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1375731765, name: "isFlowParser", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1375731765, name: "isLookahead", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1375731765, name: "isContextSensitive", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1375731765, name: "isErrorCatching", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1375731765, name: "isForward", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1375731765, name: "isDisposable", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1375731765, name: "noMemoization", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1375731765, name: "dropContent", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1375731765, name: "traversalTracker", len: 0, sons: null}}};
NTI1375731765.node = NNI1375731765;
NTI1375731766.base = NTI1375731765;
NTI1375731775.base = NTI1375731776;
NTI1375731753.base = NTI1375731768;
NTI1375731785.base = NTI1375731753;
NTI1275068421.base = NTI1275068422;
var NNI1375731757 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1275068421, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI1375731757.node = NNI1375731757;
var NNI1375731800 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1107296259, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1375731757, name: "Field2", sons: null}]};
NTI1375731800.node = NNI1375731800;
NTI1375731797.base = NTI1375731800;
var NNI1375731794 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1375731797, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}]};
NTI1375731794.node = NNI1375731794;
var NNI1375731768 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ptype", len: 0, typ: NTI33554449, name: "ptype", sons: null}, 
{kind: 1, offset: "pname", len: 0, typ: NTI33554449, name: "pname", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI1375731784, name: "nodeName", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI1375731766, name: "flags", sons: null}, 
{kind: 1, offset: "uniqueID", len: 0, typ: NTI33554443, name: "uniqueID", sons: null}, 
{kind: 1, offset: "grammarVar", len: 0, typ: NTI1375731775, name: "grammarVar", sons: null}, 
{kind: 1, offset: "symbol", len: 0, typ: NTI1375731754, name: "symbol", sons: null}, 
{kind: 1, offset: "subParsers", len: 0, typ: NTI1375731785, name: "subParsers", sons: null}, 
{kind: 1, offset: "call", len: 0, typ: NTI1375731786, name: "call", sons: null}, 
{kind: 1, offset: "visited", len: 0, typ: NTI1375731794, name: "visited", sons: null}]};
NTI1375731768.node = NNI1375731768;
NTI1375731768.base = NTI33555173;
NTI1375731754.base = NTI1375731768;
NTI1375731812.base = NTI1241513988;
NTI1375731813.base = NTI1375731772;
var NNI1375731776 = {kind: 2, len: 12, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI33554449, name: "name", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI1375731774, name: "flags", sons: null}, 
{kind: 1, offset: "returnItem", len: 0, typ: NTI1375731770, name: "returnItem", sons: null}, 
{kind: 1, offset: "returnSequence", len: 0, typ: NTI1375731771, name: "returnSequence", sons: null}, 
{kind: 1, offset: "document", len: 0, typ: NTI1191182339, name: "document", sons: null}, 
{kind: 1, offset: "root", len: 0, typ: NTI1375731754, name: "root", sons: null}, 
{kind: 1, offset: "commentRe", len: 0, typ: NTI1191182586, name: "commentRe", sons: null}, 
{kind: 1, offset: "errors", len: 0, typ: NTI1375731812, name: "errors", sons: null}, 
{kind: 1, offset: "rollbackStack", len: 0, typ: NTI1375731813, name: "rollbackStack", sons: null}, 
{kind: 1, offset: "rollbackLocation", len: 0, typ: NTI33554438, name: "rollbackLocation", sons: null}, 
{kind: 1, offset: "farthestFail", len: 0, typ: NTI33554438, name: "farthestFail", sons: null}, 
{kind: 1, offset: "farthestParser", len: 0, typ: NTI1375731754, name: "farthestParser", sons: null}]};
NTI1375731776.node = NNI1375731776;
NTI1375731776.base = NTI33555173;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555178;
var NNI1375731734 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554449, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1191182586, name: "Field1", sons: null}]};
NTI1375731734.node = NNI1375731734;
var NNI134217746 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217746.node = NNI134217746;
var NNI33555179 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555179.node = NNI33555179;
NTI33555179.base = NTI33555177;
NTI134217746.base = NTI33555179;
var NNI671088644 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI671088644, name: "PRINT_ALL", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI671088644, name: "PRINT_FAILURES", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI671088644, name: "PRINT_NONE", len: 0, sons: null}}};
NTI671088644.node = NNI671088644;
var NNI671088652 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "colorOutput", len: 0, typ: NTI33554466, name: "colorOutput", sons: null}, 
{kind: 1, offset: "outputLevel", len: 0, typ: NTI671088644, name: "outputLevel", sons: null}, 
{kind: 1, offset: "isInSuite", len: 0, typ: NTI33554466, name: "isInSuite", sons: null}, 
{kind: 1, offset: "isInTest", len: 0, typ: NTI33554466, name: "isInTest", sons: null}]};
NTI671088652.node = NNI671088652;
var NNI671088651 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI671088651.node = NNI671088651;
NTI671088651.base = NTI33555173;
NTI671088652.base = NTI671088651;
NTI671088646.base = NTI671088651;
NTI671089169.base = NTI671088646;
NTI754975126.base = NTI33554449;
NTI754975093.base = NTI33554449;
NTI922746906.base = NTI33554449;
NTI503316800.base = NTI33554449;
var NNI922746965 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI922746959, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI922746965.node = NNI922746965;
NTI1275069108.base = NTI33554449;
NTI1275069113.base = NTI33554449;
NTI1275069119.base = NTI33554449;
NTI1275069004.base = NTI33554449;
NTI1275069186.base = NTI1275069004;
NTI1275069210.base = NTI33554449;
var NNI134217742 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217742.node = NNI134217742;
NTI134217742.base = NTI134217741;
var NNI1191182399 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI1191182399.node = NNI1191182399;
var NNI805306437 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554435, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI805306437.node = NNI805306437;
NTI1275069564.base = NTI33554449;
NTI1275069605.base = NTI33554449;
NTI1375732898.base = NTI1275068420;
NTI1375732584.base = NTI1375731753;
NTI1375732492.base = NTI1375731753;
NTI1241514002.base = NTI1241513988;
NTI1375731777.base = NTI1241513988;
var NNI1375731758 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1275068421, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1375731777, name: "Field1", sons: null}]};
NTI1375731758.node = NNI1375731758;
var NNI134217747 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217747.node = NNI134217747;
NTI134217747.base = NTI134217746;
var NNI1375731760 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1375731760, name: "mkRegex", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1375731760, name: "mkString", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1375731760, name: "mkProc", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1375731760, name: "mkParser", len: 0, sons: null}}};
NTI1375731760.node = NNI1375731760;
var NNI1375731762 = {kind: 3, offset: "kind", len: 4, typ: NTI1375731760, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "rxInfo", len: 0, typ: NTI1375731734, name: "rxInfo", sons: null}], 
[setConstr(1), {kind: 1, offset: "cmpStr", len: 0, typ: NTI33554449, name: "cmpStr", sons: null}], 
[setConstr(2), {kind: 1, offset: "findProc", len: 0, typ: NTI1375731817, name: "findProc", sons: null}], 
[setConstr(3), {kind: 1, offset: "consumeParser", len: 0, typ: NTI1375731753, name: "consumeParser", sons: null}]]};
NTI1375731762.node = NNI1375731762;
NTI1375731802.base = NTI1375731762;
NTI1375731803.base = NTI1375731762;
var NNI1375731763 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1375731762, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554449, name: "Field1", sons: null}]};
NTI1375731763.node = NNI1375731763;
NTI1375731804.base = NTI1375731763;
NTI1375731805.base = NTI1375731753;
var NNI1375731769 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "mandatory", len: 0, typ: NTI33554443, name: "mandatory", sons: null}, 
{kind: 1, offset: "skipList", len: 0, typ: NTI1375731802, name: "skipList", sons: null}, 
{kind: 1, offset: "resumeList", len: 0, typ: NTI1375731803, name: "resumeList", sons: null}, 
{kind: 1, offset: "errorList", len: 0, typ: NTI1375731804, name: "errorList", sons: null}, 
{kind: 1, offset: "referredParsers", len: 0, typ: NTI1375731805, name: "referredParsers", sons: null}]};
NTI1375731769.node = NNI1375731769;
NTI1375731769.base = NTI1375731768;
NTI1375731755.base = NTI1375731769;
var NNI1375731778 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "origin", len: 0, typ: NTI1375731755, name: "origin", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI1275068420, name: "node", sons: null}, 
{kind: 1, offset: "node_orig_len", len: 0, typ: NTI33554438, name: "node_orig_len", sons: null}, 
{kind: 1, offset: "location", len: 0, typ: NTI33554438, name: "location", sons: null}, 
{kind: 1, offset: "error", len: 0, typ: NTI1241513988, name: "error", sons: null}, 
{kind: 1, offset: "first_throw", len: 0, typ: NTI33554466, name: "first_throw", sons: null}]};
NTI1375731778.node = NNI1375731778;
NTI1375731778.base = NTI33555179;
var NNI134217750 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217750.node = NNI134217750;
NTI134217750.base = NTI33555178;
var NNI134217753 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217753.node = NNI134217753;
NTI134217753.base = NTI33555178;
var NNI1191182606 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI1191182606.node = NNI1191182606;
var NNI1375732667 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI1375732667.node = NNI1375732667;
var NNI1375732672 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554438, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI1375732672.node = NNI1375732672;
var NNI1375732657 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1275068421, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI1375732657.node = NNI1375732657;
var NNI1275068424 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1275068424.node = NNI1275068424;
NTI1275068424.base = NTI33555178;
var NNI1375734862 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI33554449, name: "text", sons: null}, 
{kind: 1, offset: "slice", len: 0, typ: NTI1191182339, name: "slice", sons: null}, 
{kind: 1, offset: "empty", len: 0, typ: NTI33554466, name: "empty", sons: null}]};
NTI1375734862.node = NNI1375734862;
NTI1375734862.base = NTI1375731768;
NTI671088655.base = NTI33554449;
var NNI1375735469 = {kind: 1, offset: "reInfo", len: 0, typ: NTI1375731734, name: "reInfo", sons: null};
NTI1375735469.node = NNI1375735469;
NTI1375735469.base = NTI1375731768;
var NNI1375735540 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "combined", len: 0, typ: NTI1375731734, name: "combined", sons: null}, 
{kind: 1, offset: "whitespace", len: 0, typ: NTI1375731734, name: "whitespace", sons: null}, 
{kind: 1, offset: "comment", len: 0, typ: NTI1375731734, name: "comment", sons: null}]};
NTI1375735540.node = NNI1375735540;
NTI1375735540.base = NTI1375731768;
NTI1375735793.base = NTI1375731753;
var NNI1375735787 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1375735787.node = NNI1375735787;
NTI1375735787.base = NTI1375731768;
NTI1375734141.base = NTI1375731762;
NTI1375734152.base = NTI1375731762;
NTI1375734163.base = NTI1375731763;
var NNI1375735979 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1375735979.node = NNI1375735979;
NTI1375735979.base = NTI1375731769;
NTI1375735955.base = NTI1375731753;
var NNI1375736444 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1107296259, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554438, name: "Field2", sons: null}]};
NTI1375736444.node = NNI1375736444;
NTI1375736441.base = NTI1375736444;
var NNI1375736438 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1375736441, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}]};
NTI1375736438.node = NNI1375736438;
var NNI1375736430 = {kind: 1, offset: "recursionCounter", len: 0, typ: NTI1375736438, name: "recursionCounter", sons: null};
NTI1375736430.node = NNI1375736430;
NTI1375736430.base = NTI1375731768;
NTI1375735649.base = NTI1375731753;
NTI1375732514.base = NTI1375731753;
var NNI1375735634 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554443, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554443, name: "Field1", sons: null}]};
NTI1375735634.node = NNI1375735634;
var NNI1375735636 = {kind: 1, offset: "repRange", len: 0, typ: NTI1375735634, name: "repRange", sons: null};
NTI1375735636.node = NNI1375735636;
NTI1375735636.base = NTI1375731768;
NTI1375734551.base = NTI1375731763;
var NNI536871878 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1375731762, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554449, name: "Field1", sons: null}]};
NTI536871878.node = NNI536871878;
var NNI536871886 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1375731762, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554449, name: "Field1", sons: null}]};
NTI536871886.node = NNI536871886;
var NNI536871894 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1375731762, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554449, name: "Field1", sons: null}]};
NTI536871894.node = NNI536871894;
NTI1375734713.base = NTI1375731762;
var NNI134217763 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217763.node = NNI134217763;
NTI134217763.base = NTI33555178;
var NNI1023410186 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "closeImpl", len: 0, typ: NTI1023410187, name: "closeImpl", sons: null}, 
{kind: 1, offset: "atEndImpl", len: 0, typ: NTI1023410188, name: "atEndImpl", sons: null}, 
{kind: 1, offset: "setPositionImpl", len: 0, typ: NTI1023410189, name: "setPositionImpl", sons: null}, 
{kind: 1, offset: "getPositionImpl", len: 0, typ: NTI1023410190, name: "getPositionImpl", sons: null}, 
{kind: 1, offset: "readDataStrImpl", len: 0, typ: NTI1023410191, name: "readDataStrImpl", sons: null}, 
{kind: 1, offset: "readLineImpl", len: 0, typ: NTI1023410196, name: "readLineImpl", sons: null}, 
{kind: 1, offset: "readDataImpl", len: 0, typ: NTI1023410198, name: "readDataImpl", sons: null}, 
{kind: 1, offset: "peekDataImpl", len: 0, typ: NTI1023410199, name: "peekDataImpl", sons: null}, 
{kind: 1, offset: "writeDataImpl", len: 0, typ: NTI1023410200, name: "writeDataImpl", sons: null}, 
{kind: 1, offset: "flushImpl", len: 0, typ: NTI1023410201, name: "flushImpl", sons: null}]};
NTI1023410186.node = NNI1023410186;
NTI1023410186.base = NTI33555173;
NTI1023410185.base = NTI1023410186;
NTI671088654.base = NTI33554449;
var NNI671088653 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "stream", len: 0, typ: NTI1023410185, name: "stream", sons: null}, 
{kind: 1, offset: "testErrors", len: 0, typ: NTI671088654, name: "testErrors", sons: null}, 
{kind: 1, offset: "testStartTime", len: 0, typ: NTI33554445, name: "testStartTime", sons: null}, 
{kind: 1, offset: "testStackTrace", len: 0, typ: NTI33554449, name: "testStackTrace", sons: null}]};
NTI671088653.node = NNI671088653;
NTI671088653.base = NTI671088651;
var NNI671088643 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI671088643, name: "OK", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI671088643, name: "FAILED", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI671088643, name: "SKIPPED", len: 0, sons: null}}};
NTI671088643.node = NNI671088643;
var NNI1375737788 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1375737788.node = NNI1375737788;
NTI1375737788.base = NTI1375731768;
var NNI1375734901 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI33554449, name: "text", sons: null}, 
{kind: 1, offset: "compare", len: 0, typ: NTI1375734902, name: "compare", sons: null}]};
NTI1375734901.node = NNI1375734901;
NTI1375734901.base = NTI1375731768;
NTI1375732464.base = NTI33554449;
var NNI1375736327 = {kind: 1, offset: "positive", len: 0, typ: NTI33554466, name: "positive", sons: null};
NTI1375736327.node = NNI1375736327;
NTI1375736327.base = NTI1375731768;
var NNI1375734246 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1275068420, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI1375734246.node = NNI1375734246;
var NNI1375734262 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1241513988, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554438, name: "Field1", sons: null}]};
NTI1375734262.node = NNI1375734262;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}

function arrayConstr(len_33557314, value_33557315, typ_33557316) {
        var result = new Array(len_33557314);
    for (var i = 0; i < len_33557314; ++i) result[i] = nimCopy(null, value_33557315, typ_33557316);
    return result;
  

  
}

function mnewString(len_33557003) {
        var result = new Array(len_33557003);
    for (var i = 0; i < len_33557003; i++) {result[i] = 0;}
    return result;
  

  
}

function addInt(a_33557050, b_33557051) {
        var result = a_33557050 + b_33557051;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557324, a_33557325, b_33557326) {
  var result_33557327 = 0;

  BeforeRet: {
    if (((a_33557325 <= i_33557324) && (i_33557324 <= b_33557326))) {
    result_33557327 = i_33557324;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  };

  return result_33557327;

}

function chckIndx(i_33557319, a_33557320, b_33557321) {
  var result_33557322 = 0;

  BeforeRet: {
    if (((a_33557320 <= i_33557319) && (i_33557319 <= b_33557321))) {
    result_33557322 = i_33557319;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557319, a_33557320, b_33557321);
    }
    
  };

  return result_33557322;

}

function cstrToNimstr(c_33556898) {
      var ln = c_33556898.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556898.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556898.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function raiseException(e_33556653, ename_33556654) {
    e_33556653.name = ename_33556654;
    if ((excHandler == 0)) {
    unhandledException(e_33556653);
    }
    
    e_33556653.trace = nimCopy(null, rawWriteStackTrace_33556604(), NTI33554449);
    throw e_33556653;

  
}

function subInt(a_33557054, b_33557055) {
        var result = a_33557054 - b_33557055;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet2 = setConstr(1);

function makeNimstrLit(c_33556895) {
      var result = [];
  for (var i = 0; i < c_33556895.length; ++i) {
    result[i] = c_33556895.charCodeAt(i);
  }
  return result;
  

  
}
var ConstSet3 = setConstr([65, 90]);

function eqStrings(a_33557041, b_33557042) {
        if (a_33557041 == b_33557042) return true;
    if (a_33557041 === null && b_33557042.length == 0) return true;
    if (b_33557042 === null && a_33557041.length == 0) return true;
    if ((!a_33557041) || (!b_33557042)) return false;
    var alen = a_33557041.length;
    if (alen != b_33557042.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33557041[i] != b_33557042[i]) return false;
    return true;
  

  
}

function nimMax(a_33557108, b_33557109) {
    var Temporary1;

  var result_33557110 = 0;

  BeforeRet: {
    if ((b_33557109 <= a_33557108)) {
    Temporary1 = a_33557108;
    }
    else {
    Temporary1 = b_33557109;
    }
    
    result_33557110 = Temporary1;
    break BeforeRet;
  };

  return result_33557110;

}

function nimMin(a_33557104, b_33557105) {
    var Temporary1;

  var result_33557106 = 0;

  BeforeRet: {
    if ((a_33557104 <= b_33557105)) {
    Temporary1 = a_33557104;
    }
    else {
    Temporary1 = b_33557105;
    }
    
    result_33557106 = Temporary1;
    break BeforeRet;
  };

  return result_33557106;

}

function mulInt(a_33557058, b_33557059) {
        var result = a_33557058 * b_33557059;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet4 = setConstr(13, 10);
var ConstSet5 = setConstr(60, 62, 94);
var ConstSet6 = setConstr(60, 62, 94);
var ConstSet7 = setConstr(45, 43, 32);
var ConstSet8 = setConstr([48, 57]);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);

function divInt(a_33557062, b_33557063) {
        if (b_33557063 == 0) raiseDivByZero();
    if (b_33557063 == -1 && a_33557062 == 2147483647) raiseOverflow();
    return Math.trunc(a_33557062 / b_33557063);
  

  
}
var ConstSet11 = setConstr([65, 90], [97, 122]);

function addChar(x_33557415, c_33557416) {
    x_33557415.push(c_33557416);

  
}
var ConstSet12 = setConstr(1);
var ConstSet13 = setConstr(7);

function isObj(obj_33557398, subclass_33557399) {
  var result_33557400 = false;

  BeforeRet: {
    var x_33557401 = obj_33557398;
    if ((x_33557401 == subclass_33557399)) {
    result_33557400 = true;
    break BeforeRet;
    }
    
    Label1: {
        Label2: while (true) {
        if (!!((x_33557401 == subclass_33557399))) break Label2;
          if ((x_33557401 == null)) {
          result_33557400 = false;
          break BeforeRet;
          }
          
          x_33557401 = x_33557401.base;
        }
    };
    result_33557400 = true;
    break BeforeRet;
  };

  return result_33557400;

}

function nimCharToStr(x_33556441) {
  var result_33556442 = [];

    result_33556442 = nimCopy(null, mnewString(1), NTI33554449);
    result_33556442[0] = x_33556441;

  return result_33556442;

}

function nimBoolToStr(x_33556438) {
  var result_33556439 = [];

    if (x_33556438) {
    result_33556439 = nimCopy(null, [116,114,117,101], NTI33554449);
    }
    else {
      result_33556439 = nimCopy(null, [102,97,108,115,101], NTI33554449);
    }
    

  return result_33556439;

}
var ConstSet14 = setConstr(3);

function raiseFieldError2(f_33556854, discVal_33556855) {
    raiseException({message: (f_33556854 || []).concat(discVal_33556855 || [],[39] || []), parent: null, m_type: NTI134217750, name: null, trace: [], up: null}, "FieldDefect");

  
}

function reprDiscriminant(e_33557614, typ_33557615) {
    var Temporary1;

  var result_33557616 = [];

  var F = {procname: "system.reprDiscriminant", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/repr_impl.nim", line: 0};
  framePtr = F;
    F.line = 12;
    F.filename = "repr_impl.nim";
    F.line = 12;
    switch (typ_33557615.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557614, typ_33557615);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557614 == 0)));
      break;
    default: 
      Temporary1 = HEX24_369098760(e_33557614);
      break;
    }
    result_33557616 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_33557616;

}

function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: [110,111,32,101,120,99,101,112,116,105,111,110,32,116,111,32,114,101,114,97,105,115,101], parent: null, m_type: NTI134217753, name: null, trace: [], up: null}, "ReraiseDefect");
    }
    else {
      if ((excHandler == 0)) {
      if (isNimException_33556443()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}
var ConstSet15 = setConstr(0);
var ConstSet16 = setConstr(1);
var ConstSet17 = setConstr(1);
var ConstSet18 = setConstr(2);
var ConstSet19 = setConstr(1);

function SetPlus(a_33557025, b_33557026) {
        var result = {};
    for (var elem in a_33557025) { result[elem] = true; }
    for (var elem in b_33557026) { result[elem] = true; }
    return result;
  

  
}
var ConstSet20 = setConstr(9, 7);
var ConstSet21 = setConstr(1);
      var ErrorCatcherListNames_1375736302 = [[101,114,114,111,114,115], [115,107,105,112,45,109,97,116,99,104,101,114,115], [114,101,115,117,109,101,45,109,97,116,99,104,101,114,115]];
var ConstSet22 = setConstr(3);

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet23 = setConstr(1);
var ConstSet24 = setConstr(3);
var ConstSet25 = setConstr([48, 57]);
var ConstSet26 = setConstr(0, 125);
var ConstSet27 = setConstr([48, 57]);
var ConstSet28 = setConstr([65, 90]);
var ConstSet29 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var ConstSet30 = setConstr(46, 44);
      var NaryParsers_1375731962 = [[58,65,108,116,101,114,110,97,116,105,118,101], [58,83,101,114,105,101,115], [58,73,110,116,101,114,108,101,97,118,101]];
var ConstSet31 = setConstr(3);
var ConstSet32 = setConstr(3);
var ConstSet33 = setConstr(3);
var ConstSet34 = setConstr(0);
var ConstSet35 = setConstr(1);
var ConstSet36 = setConstr(1);
var ConstSet37 = setConstr(2);
var ConstSet38 = setConstr(3);
var ConstSet39 = setConstr([48, 57]);
var ConstSet40 = setConstr([48, 57]);

function divInt64(a_33557084, b_33557085) {
        if (b_33557085 == 0n) raiseDivByZero();
    if (b_33557085 == -1n && a_33557084 == 9223372036854775807n) raiseOverflow();
    return a_33557084 / b_33557085;
  

  
}
var F = {procname: "module syslocks", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/syslocks.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module syslocks", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/syslocks.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module locks", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/core/locks.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module locks", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/core/locks.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function initLock_704643079(lock_704643080) {
  
}
var F = {procname: "module exitprocs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/exitprocs.nim", line: 0};
framePtr = F;
F.line = 24;
F.filename = "exitprocs.nim";
var gFunsLock_687865870 = [({})];
F.line = 25;
var gFuns_687865871 = [[]];
F.line = 27;
initLock_704643079(gFunsLock_687865870[0]);
framePtr = F.prev;
var F = {procname: "module exitprocs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/exitprocs.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module streams", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/streams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module streams", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/streams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module options", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/options.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module options", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/options.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jscore", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/js/jscore.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jscore", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/js/jscore.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module times", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/times.nim", line: 0};
framePtr = F;
F.line = 1371;
F.filename = "times.nim";
if (globalThis.utcInstance_1040189045 === undefined) {
  globalThis.utcInstance_1040189045 = [null];
}
F.line = 1372;
if (globalThis.localInstance_1040189046 === undefined) {
  globalThis.localInstance_1040189046 = [null];
}
framePtr = F.prev;
var F = {procname: "module times", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/times.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
framePtr = F;
F.line = 218;
F.filename = "hashes.nim";
var objectID_1107296433 = [0];
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unittest", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
framePtr = F;
F.line = 171;
F.filename = "unittest.nim";
if (globalThis.abortOnError_671088682 === undefined) {
  globalThis.abortOnError_671088682 = [false];
}
F.line = 178;
if (globalThis.checkpoints_671088683 === undefined) {
  globalThis.checkpoints_671088683 = [[]];
}
F.line = 179;
if (globalThis.formatters_671088684 === undefined) {
  globalThis.formatters_671088684 = [[]];
}
F.line = 180;
if (globalThis.testsFilters_671088690 === undefined) {
  globalThis.testsFilters_671088690 = [({data: [], counter: 0})];
}
F.line = 181;
if (globalThis.disabledParamFiltering_671088691 === undefined) {
  globalThis.disabledParamFiltering_671088691 = [false];
}
F.line = 193;
abortOnError_671088682[0] = false;
framePtr = F.prev;
var F = {procname: "module unittest", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jsre", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/js/jsre.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet1[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function add_33556373(x_33556374, x_33556374_Idx, y_33556375) {
          if (x_33556374[x_33556374_Idx] === null) { x_33556374[x_33556374_Idx] = []; }
      var off = x_33556374[x_33556374_Idx].length;
      x_33556374[x_33556374_Idx].length += y_33556375.length;
      for (var i = 0; i < y_33556375.length; ++i) {
        x_33556374[x_33556374_Idx][off+i] = y_33556375.charCodeAt(i);
      }
    

  
}

function raiseRangeError() {
    raiseException({message: [118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101], parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");

  
}

function raiseIndexError(i_33556812, a_33556813, b_33556814) {
    var Temporary1;

    if ((b_33556814 < a_33556813)) {
    Temporary1 = [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,44,32,116,104,101,32,99,111,110,116,97,105,110,101,114,32,105,115,32,101,109,112,116,121];
    }
    else {
    Temporary1 = ([105,110,100,101,120,32] || []).concat(HEX24_369098760(i_33556812) || [],[32,110,111,116,32,105,110,32] || [],HEX24_369098760(a_33556813) || [],[32,46,46,32] || [],HEX24_369098760(b_33556814) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554449), parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addChars_301990090(result_301990092, result_301990092_Idx, x_301990093, start_301990094, n_301990095) {
    var Temporary1;

  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 43;
    F.filename = "digitsutils.nim";
    var old_301990096 = (result_301990092[result_301990092_Idx]).length;
    F.line = 44;
    if (result_301990092[result_301990092_Idx].length < (Temporary1 = chckRange(addInt(old_301990096, n_301990095), 0, 2147483647), Temporary1)) { for (var i = result_301990092[result_301990092_Idx].length; i < Temporary1; ++i) result_301990092[result_301990092_Idx].push(0); }
         else {result_301990092[result_301990092_Idx].length = Temporary1; };
    Label2: {
      F.line = 46;
      var iHEX60gensym4_301990110 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_1191182750 = 0;
      Label3: {
        F.line = 120;
          Label4: while (true) {
          if (!(i_1191182750 < n_301990095)) break Label4;
            F.line = 49;
            F.filename = "digitsutils.nim";
            iHEX60gensym4_301990110 = i_1191182750;
            F.line = 49;
            result_301990092[result_301990092_Idx][chckIndx(addInt(old_301990096, iHEX60gensym4_301990110), 0, (result_301990092[result_301990092_Idx]).length - 1)] = x_301990093.charCodeAt(chckIndx(addInt(start_301990094, iHEX60gensym4_301990110), 0, (x_301990093).length - 1));
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_1191182750 = addInt(i_1191182750, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function addChars_301990086(result_301990088, result_301990088_Idx, x_301990089) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 55;
    F.filename = "digitsutils.nim";
    addChars_301990090(result_301990088, result_301990088_Idx, x_301990089, 0, ((x_301990089) == null ? 0 : (x_301990089).length));
  framePtr = F.prev;

  
}

function addInt_301990111(result_301990112, result_301990112_Idx, x_301990113) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 111;
    F.filename = "digitsutils.nim";
    addChars_301990086(result_301990112, result_301990112_Idx, ((x_301990113) + ""));
  framePtr = F.prev;

  
}

function addInt_301990129(result_301990130, result_301990130_Idx, x_301990131) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 115;
    F.filename = "digitsutils.nim";
    addInt_301990111(result_301990130, result_301990130_Idx, BigInt(x_301990131));
  framePtr = F.prev;

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 18;
    F.filename = "dollars.nim";
    addInt_301990129(result_369098762, 0, x_369098761);
  framePtr = F.prev;

  return result_369098762[0];

}

function auxWriteStackTrace_33556508(f_33556509) {
  var result_33556510 = [[]];

    var it_33556518 = f_33556509;
    var i_33556519 = 0;
    var total_33556520 = 0;
    var tempFrames_33556521 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555835);
    Label1: {
        Label2: while (true) {
        if (!(!((it_33556518 == null)) && (i_33556519 <= 63))) break Label2;
          tempFrames_33556521[i_33556519].Field0 = it_33556518.procname;
          tempFrames_33556521[i_33556519].Field1 = it_33556518.line;
          tempFrames_33556521[i_33556519].Field2 = it_33556518.filename;
          i_33556519 += 1;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    Label3: {
        Label4: while (true) {
        if (!!((it_33556518 == null))) break Label4;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    result_33556510[0] = nimCopy(null, [], NTI33554449);
    if (!((total_33556520 == i_33556519))) {
    result_33556510[0].push.apply(result_33556510[0], [40]);;
    result_33556510[0].push.apply(result_33556510[0], HEX24_369098760((total_33556520 - i_33556519)));;
    result_33556510[0].push.apply(result_33556510[0], [32,99,97,108,108,115,32,111,109,105,116,116,101,100,41,32,46,46,46,10]);;
    }
    
    Label5: {
      var j_33556554 = 0;
      var colontmp__1191182742 = 0;
      colontmp__1191182742 = (i_33556519 - 1);
      var res_1191182744 = colontmp__1191182742;
      Label6: {
          Label7: while (true) {
          if (!(0 <= res_1191182744)) break Label7;
            j_33556554 = res_1191182744;
            result_33556510[0].push.apply(result_33556510[0], cstrToNimstr(tempFrames_33556521[j_33556554].Field2));;
            if ((0 < tempFrames_33556521[j_33556554].Field1)) {
            result_33556510[0].push.apply(result_33556510[0], [40]);;
            addInt_301990129(result_33556510, 0, tempFrames_33556521[j_33556554].Field1);
            if (false) {
            result_33556510[0].push.apply(result_33556510[0], [44,32]);;
            addInt_301990129(result_33556510, 0, 0);
            }
            
            result_33556510[0].push.apply(result_33556510[0], [41]);;
            }
            
            result_33556510[0].push.apply(result_33556510[0], [32,97,116,32]);;
            add_33556373(result_33556510, 0, tempFrames_33556521[j_33556554].Field0);
            result_33556510[0].push.apply(result_33556510[0], [10]);;
            res_1191182744 -= 1;
          }
      };
    };

  return result_33556510[0];

}

function rawWriteStackTrace_33556604() {
  var result_33556605 = [];

    if (!((framePtr == null))) {
    result_33556605 = nimCopy(null, ([84,114,97,99,101,98,97,99,107,32,40,109,111,115,116,32,114,101,99,101,110,116,32,99,97,108,108,32,108,97,115,116,41,10] || []).concat(auxWriteStackTrace_33556508(framePtr) || []), NTI33554449);
    }
    else {
      result_33556605 = nimCopy(null, [78,111,32,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,32,97,118,97,105,108,97,98,108,101,10], NTI33554449);
    }
    

  return result_33556605;

}

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 631;
    F.filename = "system.nim";
    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }  framePtr = F.prev;

  return result_33556922;

}

function unhandledException(e_33556649) {
    var buf_33556650 = [[]];
    if (!(((e_33556649.message).length == 0))) {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556650[0].push.apply(buf_33556650[0], e_33556649.message);;
    }
    else {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556650[0].push.apply(buf_33556650[0], [32,91]);;
    add_33556373(buf_33556650, 0, e_33556649.name);
    buf_33556650[0].push.apply(buf_33556650[0], [93,10]);;
    buf_33556650[0].push.apply(buf_33556650[0], rawWriteStackTrace_33556604());;
    var cbuf_33556651 = toJSStr(buf_33556650[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556651);
  }
  else {
    throw cbuf_33556651;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33557048) {
        if (a_33557048 > 2147483647 || a_33557048 < -2147483648) raiseOverflow();
  

  
}

function makeStringSlice_1191182352(str_1191182354) {
  var result_1191182355 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "makeStringSlice.makeStringSlice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 49;
    F.filename = "strslice.nim";
    F.line = 53;
    var strRef_1191182356 = null;
    var strRef_1191182356_Idx = 0;
    F.line = 57;
    strRef_1191182356 = [[]]; strRef_1191182356_Idx = 0;
    F.line = 58;
    strRef_1191182356[strRef_1191182356_Idx] = nimCopy(null, str_1191182354, NTI33554449);
    result_1191182355 = nimCopy(result_1191182355, {Field0: [strRef_1191182356, strRef_1191182356_Idx], Field1: 0, Field2: subInt((((strRef_1191182356[strRef_1191182356_Idx]).length) | 0), 1)}, NTI1191182339);
  framePtr = F.prev;

  return result_1191182355;

}
var F = {procname: "module strslice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
framePtr = F;
F.line = 62;
F.filename = "strslice.nim";
var EmptyStringSlice_1191182395 = makeStringSlice_1191182352([]);
F.line = 216;
var PCREFlag_1191182657 = new RegExp("\\(\\*\\w+\\)", "g");
F.line = 217;
var comment_1191182658 = new RegExp("#[^\\n]*", "g");
F.line = 218;
var whitespace_1191182659 = new RegExp("(?: *\\n *)|(?:^ *)|(?: *$)", "g");
F.line = 219;
var slashU_1191182660 = new RegExp("\\\\U([0-9a-fA-F]+)", "g");
framePtr = F.prev;
var F = {procname: "module strslice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module error", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module error", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodetree", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodetree", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function ure_1375731737(pattern_1375731739) {
  var result_1375731740 = {Field0: null, Field1: null};

  var F = {procname: "ure.ure", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 222;
    F.filename = "strslice.nim";
    var cleanPattern_1375731741 = toJSStr(pattern_1375731739).replace(PCREFlag_1191182657, "").replace(slashU_1191182660, "\\u{$1}");
    F.line = 223;
    var colontmp__1375741255 = new RegExp(cleanPattern_1375731741, "uy");
    F.line = 224;
    var colontmp__1375741256 = new RegExp(cleanPattern_1375731741, "ug");
    F.line = 223;
    result_1375731740 = nimCopy(result_1375731740, {Field0: colontmp__1375741255, Field1: colontmp__1375741256}, NTI1191182586);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375731740;

}

function toStringSlice_1375731983(str_1375731985) {
  var result_1375731986 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "toStringSlice.toStringSlice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 66;
    F.filename = "strslice.nim";
    result_1375731986 = nimCopy(result_1375731986, makeStringSlice_1191182352(str_1375731985), NTI1191182339);
  framePtr = F.prev;

  return result_1375731986;

}

function init_1375731969(node_1375731972, name_1375731973, data_1375731974, attributes_1375731975) {
  var result_1375731976 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 30;
    F.filename = "nodetree.nim";
    node_1375731972.nameRef[0] = [[]]; node_1375731972.nameRef[1] = 0;
    F.line = 31;
    node_1375731972.nameRef[0][node_1375731972.nameRef[1]] = nimCopy(null, name_1375731973, NTI33554449);
    F.line = 43;
    node_1375731972.textSlice = nimCopy(node_1375731972.textSlice, toStringSlice_1375731983(data_1375731974), NTI1191182339);
    F.line = 44;
    node_1375731972.attributesRef = attributes_1375731975;
    F.line = 45;
    node_1375731972.sourcePos = (-1);
    F.line = 46;
    result_1375731976 = node_1375731972;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375731976;

}

function new_1275069123() {
  var result_1275069126 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_1275069128 = null;
    F.line = 839;
    r_1275069128 = ({m_type: NTI1275068422, nameRef: [null, 0], childrenSeq: [], textSlice: {Field0: [null, 0], Field1: 0, Field2: 0}, attributesRef: null, sourcePos: 0});
    F.line = 840;
    result_1275069126 = r_1275069128;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1275069126;

}

function cleanUp_1375732004(grammar_1375732005) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 171;
    F.filename = "parse.nim";
    delete grammar_1375732005.flags[1];
    F.line = 172;
    grammar_1375732005.errors = nimCopy(null, [], NTI1241514010);
    F.line = 173;
    grammar_1375732005.rollbackStack = nimCopy(null, [], NTI1375731875);
    F.line = 174;
    grammar_1375732005.rollbackLocation = (-2);
    F.line = 175;
    grammar_1375732005.farthestFail = (-1);
    F.line = 176;
    grammar_1375732005.farthestParser = null;
    F.line = 177;
    grammar_1375732005.root = null;
  framePtr = F.prev;

  
}

function init_1375732066(grammar_1375732067, name_1375732068, flags_1375732069, document_1375732070, returnItem_1375732071, returnSequence_1375732072) {
  var result_1375732073 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 184;
    F.filename = "parse.nim";
    grammar_1375732067.name = nimCopy(null, name_1375732068, NTI33554449);
    F.line = 185;
    grammar_1375732067.flags = nimCopy(grammar_1375732067.flags, flags_1375732069, NTI1375731774);
    F.line = 186;
    grammar_1375732067.returnItem = returnItem_1375732071;
    F.line = 187;
    grammar_1375732067.returnSequence = returnSequence_1375732072;
    F.line = 188;
    grammar_1375732067.document = nimCopy(grammar_1375732067.document, document_1375732070, NTI1191182339);
    F.line = 189;
    grammar_1375732067.commentRe = nimCopy(grammar_1375732067.commentRe, NeverMatchRegex_1375731761, NTI1191182586);
    F.line = 190;
    cleanUp_1375732004(grammar_1375732067);
    F.line = 191;
    result_1375732073 = grammar_1375732067;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375732073;

}

function new_1375732140() {
  var result_1375732143 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_1375732145 = null;
    F.line = 839;
    r_1375732145 = ({m_type: NTI1375731776, name: [], flags: {}, returnItem: null, returnSequence: null, document: {Field0: [null, 0], Field1: 0, Field2: 0}, root: null, commentRe: {Field0: null, Field1: null}, errors: [], rollbackStack: [], rollbackLocation: 0, farthestFail: 0, farthestParser: null});
    F.line = 840;
    result_1375732143 = r_1375732145;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375732143;

}

function returnItemPlaceholder_1375731998(parser_1375731999, node_1375732000) {
  var result_1375735834 = null;

  var F = {procname: "parse.returnItemPlaceholder", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 709;
    F.filename = "parse.nim";
    result_1375735834 = EmptyNode_1375731991;
    F.line = 710;
    raiseException({message: [114,101,116,117,114,110,73,116,101,109,32,99,97,108,108,101,100,32,111,110,32,71,114,97,109,109,97,80,108,97,99,104,111,108,100,101,114], parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  return result_1375735834;

}

function returnSeqPlaceholder_1375732001(parser_1375732002, nodes_1375732003) {
  var result_1375735839 = null;

  var F = {procname: "parse.returnSeqPlaceholder", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 713;
    F.filename = "parse.nim";
    result_1375735839 = EmptyNode_1375731991;
    F.line = 714;
    raiseException({message: [114,101,116,117,114,110,73,116,101,109,32,99,97,108,108,101,100,32,111,110,32,71,114,97,109,109,97,80,108,97,99,104,111,108,100,101,114], parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  return result_1375735839;

}
var F = {procname: "module parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
framePtr = F;
F.line = 19;
F.filename = "parse.nim";
var NeverMatchRegex_1375731761 = ure_1375731737([36,46]);
F.line = 160;
var EmptyNode_1375731991 = init_1375731969(new_1275069123(), [58,69,77,80,84,89], [], null);
F.line = 196;
var GrammarPlaceholder_1375732179 = init_1375732066(new_1375732140(), [95,95,80,108,97,99,101,104,111,108,100,101,114,95,95], ConstSet2, EmptyStringSlice_1191182395, returnItemPlaceholder_1375731998, returnSeqPlaceholder_1375732001);
F.line = 745;
var anyPassage_1375735853 = {kind: 1, cmpStr: [], rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, findProc: null, consumeParser: null};
F.line = 1159;
var RxNeverMatch_1375737301 = nimCopy(null, {Field0: [36,46], Field1: nimCopy(null, NeverMatchRegex_1375731761, NTI1191182586)}, NTI1375731734);
framePtr = F.prev;
var F = {procname: "module parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function sysFatal_268435501(message_268435504) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_268435504, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}

function raiseAssert_268435499(msg_268435500) {
  var F = {procname: "assertions.raiseAssert", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 36;
    F.filename = "assertions.nim";
    sysFatal_268435501(msg_268435500);
  framePtr = F.prev;

  
}

function failedAssertImpl_268435541(msg_268435542) {
  var F = {procname: "assertions.failedAssertImpl", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 41;
    F.filename = "assertions.nim";
    raiseAssert_268435499(msg_268435542);
  framePtr = F.prev;

  
}

function colorOutput_671088871() {
  var result_671088872 = false;

  var F = {procname: "unittest.colorOutput", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 231;
    F.filename = "unittest.nim";
    var color_671088873 = [97,117,116,111];
    F.line = 232;
    switch (toJSStr(color_671088873)) {
    case "auto":
      F.line = 235;
      result_671088872 = false;
      break;
    case "on":
      F.line = 236;
      result_671088872 = true;
      break;
    case "off":
      F.line = 237;
      result_671088872 = false;
      break;
    default: 
      if (true) {
      F.line = 238;
      failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim(238, 9) `false` ") || []).concat(color_671088873 || []));
      }
      
      break;
    }
  framePtr = F.prev;

  return result_671088872;

}

function nimIdentNormalize_754974842(s_754974843) {
  var result_754974844 = [];

  var F = {procname: "strutils.nimIdentNormalize", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 298;
    F.filename = "strutils.nim";
    result_754974844 = nimCopy(null, mnewString(chckRange((s_754974843).length, 0, 2147483647)), NTI33554449);
    if (((s_754974843).length == 0)) {
    F.line = 300;
    break BeforeRet;
    }
    
    F.line = 301;
    result_754974844[chckIndx(0, 0, (result_754974844).length - 1)] = s_754974843[chckIndx(0, 0, (s_754974843).length - 1)];
    F.line = 302;
    var j_754974845 = 1;
    Label1: {
      F.line = 303;
      var i_754974850 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__671088924 = 0;
      F.line = 303;
      F.filename = "strutils.nim";
      colontmp__671088924 = subInt((s_754974843).length, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_671088925 = 1;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_671088925 <= colontmp__671088924)) break Label3;
            F.line = 303;
            F.filename = "strutils.nim";
            i_754974850 = res_671088925;
            if ((ConstSet3[s_754974843[chckIndx(i_754974850, 0, (s_754974843).length - 1)]] != undefined)) {
            F.line = 305;
            result_754974844[chckIndx(j_754974845, 0, (result_754974844).length - 1)] = chckRange(addInt(s_754974843[chckIndx(i_754974850, 0, (s_754974843).length - 1)], 32), 0, 255);
            F.line = 306;
            j_754974845 = addInt(j_754974845, 1);
            }
            else {
            if (!((s_754974843[chckIndx(i_754974850, 0, (s_754974843).length - 1)] == 95))) {
            F.line = 308;
            result_754974844[chckIndx(j_754974845, 0, (result_754974844).length - 1)] = s_754974843[chckIndx(i_754974850, 0, (s_754974843).length - 1)];
            F.line = 309;
            j_754974845 = addInt(j_754974845, 1);
            }
            }
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_671088925 = addInt(res_671088925, 1);
          }
      };
    };
    if (!((j_754974845 == (s_754974843).length))) {
    F.line = 310;
    F.filename = "strutils.nim";
    if (result_754974844.length < chckRange(j_754974845, 0, 2147483647)) { for (var i = result_754974844.length; i < chckRange(j_754974845, 0, 2147483647); ++i) result_754974844.push(0); }
         else {result_754974844.length = chckRange(j_754974845, 0, 2147483647); };
    }
    
  };
  framePtr = F.prev;

  return result_754974844;

}

function parseEnum_671088882(s_671088884) {
    var Temporary1;

  var result_671088885 = 0;

  var F = {procname: "parseEnum.parseEnum", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1284;
    F.filename = "strutils.nim";
    F.line = 1301;
    switch (toJSStr(nimIdentNormalize_754974842(s_671088884))) {
    case "Printall":
      Temporary1 = 0;
      break;
    case "Printfailures":
      Temporary1 = 1;
      break;
    case "Printnone":
      Temporary1 = 2;
      break;
    default: 
      F.line = 76;
      F.filename = "enumutils.nim";
      raiseException({message: ([73,110,118,97,108,105,100,32,101,110,117,109,32,118,97,108,117,101,58,32] || []).concat(s_671088884 || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_671088885 = Temporary1;
  framePtr = F.prev;

  return result_671088885;

}

function newConsoleOutputFormatter_671088816(outputLevel_671088817, colorOutput_671088818) {
  var result_671088819 = null;

  var F = {procname: "unittest.newConsoleOutputFormatter", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 225;
    F.filename = "unittest.nim";
    result_671088819 = {outputLevel: outputLevel_671088817, colorOutput: colorOutput_671088818, m_type: NTI671088652, isInSuite: false, isInTest: false};
  framePtr = F.prev;

  return result_671088819;

}

function defaultConsoleFormatter_671088879() {
  var result_671088880 = null;

  var F = {procname: "unittest.defaultConsoleFormatter", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 253;
    F.filename = "unittest.nim";
    var colorOutput_671088881 = colorOutput_671088871();
    F.line = 254;
    var outputLevel_671088956 = parseEnum_671088882([80,82,73,78,84,95,65,76,76]);
    F.line = 260;
    result_671088880 = newConsoleOutputFormatter_671088816(outputLevel_671088956, colorOutput_671088881);
  framePtr = F.prev;

  return result_671088880;

}

function ensureInitialized_671089364() {
  var F = {procname: "unittest.ensureInitialized", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    if (((formatters_671088684[0]).length == 0)) {
    F.line = 450;
    F.filename = "unittest.nim";
    formatters_671088684[0] = nimCopy(null, [defaultConsoleFormatter_671088879()], NTI671089169);
    }
    
    if (!(disabledParamFiltering_671088691[0])) {
    }
    
  framePtr = F.prev;

  
}

function len_671089250(s_671089252) {
  var result_671089253 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 182;
    F.filename = "sets.nim";
    result_671089253 = s_671089252.counter;
  framePtr = F.prev;

  return result_671089253;

}

function isFilled_1090519079(hcode_1090519080) {
  var result_1090519081 = false;

  var F = {procname: "sets.isFilled", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 27;
    F.filename = "hashcommon.nim";
    result_1090519081 = !((hcode_1090519080 == 0));
  framePtr = F.prev;

  return result_1090519081;

}

function substrEq_754974975(s_754974976, pos_754974977, substr_754974978) {
    var Temporary1;

  var result_754974979 = false;

  var F = {procname: "strutils.substrEq", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 370;
    F.filename = "strutils.nim";
    F.line = 370;
    var length_754974980 = (substr_754974978).length;
    if ((0 < length_754974980)) {
    F.line = 372;
    var i_754974981 = 0;
    Label2: {
      F.line = 373;
        Label3: while (true) {
        if (!(((i_754974981 < length_754974980) && (addInt(pos_754974977, i_754974981) < (s_754974976).length)) && (s_754974976[chckIndx(addInt(pos_754974977, i_754974981), 0, (s_754974976).length - 1)] == substr_754974978[chckIndx(i_754974981, 0, (substr_754974978).length - 1)]))) break Label3;
          F.line = 374;
          i_754974981 = addInt(i_754974981, 1);
        }
    };
    Temporary1 = (i_754974981 == length_754974980);
    }
    else {
    Temporary1 = false;
    }
    
    result_754974979 = Temporary1;
  framePtr = F.prev;

  return result_754974979;

}

function substr_33558078(s_33558079, first_33558080, last_33558081) {
  var result_33558082 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2658;
    F.filename = "system.nim";
    var first_33558083 = nimMax(first_33558080, 0);
    F.line = 2659;
    var L_33558084 = nimMax(addInt(subInt(nimMin(last_33558081, (s_33558079).length - 1), first_33558083), 1), 0);
    F.line = 2660;
    result_33558082 = nimCopy(null, mnewString(chckRange(L_33558084, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 2661;
      var i_33558089 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536872794 = 0;
      F.line = 2661;
      F.filename = "system.nim";
      colontmp__536872794 = subInt(L_33558084, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536872795 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536872795 <= colontmp__536872794)) break Label3;
            F.line = 2661;
            F.filename = "system.nim";
            i_33558089 = res_536872795;
            F.line = 2661;
            result_33558082[chckIndx(i_33558089, 0, (result_33558082).length - 1)] = s_33558079[chckIndx(addInt(i_33558089, first_33558083), 0, (s_33558079).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536872795 = addInt(res_536872795, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_33558082;

}

function nsuSplitString(s_754975295, sep_754975296, maxsplit_754975297) {
      var Temporary2;

  var result_754975298 = [];

  var F = {procname: "strutils.split", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 417;
    F.filename = "strutils.nim";
    result_754975298 = nimCopy(null, [], NTI754975126);
    Label1: {
      F.line = 418;
      var xHEX60gensym69_754975304 = [];
      F.line = 529;
      if (((sep_754975296).length == 0)) {
      Temporary2 = 1;
      }
      else {
      Temporary2 = (sep_754975296).length;
      }
      
      var sepLen_536872786 = Temporary2;
      F.line = 389;
      var lastHEX60gensym41_536872787 = 0;
      F.line = 390;
      var splitsHEX60gensym41_536872788 = maxsplit_754975297;
      Label3: {
        F.line = 531;
          Label4: while (true) {
          if (!(lastHEX60gensym41_536872787 <= (s_754975295).length)) break Label4;
            F.line = 393;
            var firstHEX60gensym41_536872790 = lastHEX60gensym41_536872787;
            Label5: {
              F.line = 394;
                Label6: while (true) {
                if (!((lastHEX60gensym41_536872787 < (s_754975295).length) && !(substrEq_754974975(s_754975295, lastHEX60gensym41_536872787, sep_754975296)))) break Label6;
                  F.line = 395;
                  lastHEX60gensym41_536872787 = addInt(lastHEX60gensym41_536872787, 1);
                }
            };
            if ((splitsHEX60gensym41_536872788 == 0)) {
            F.line = 396;
            lastHEX60gensym41_536872787 = (s_754975295).length;
            }
            
            F.line = 787;
            xHEX60gensym69_754975304 = substr_33558078(s_754975295, firstHEX60gensym41_536872790, subInt(lastHEX60gensym41_536872787, 1));
            F.line = 787;
            var Temporary7 = nimCopy(null, xHEX60gensym69_754975304, NTI33554449);
            result_754975298.push(Temporary7);;
            if ((splitsHEX60gensym41_536872788 == 0)) {
            F.line = 398;
            break Label3;
            }
            
            F.line = 399;
            splitsHEX60gensym41_536872788 = subInt(splitsHEX60gensym41_536872788, 1);
            F.line = 400;
            lastHEX60gensym41_536872787 = addInt(lastHEX60gensym41_536872787, sepLen_536872786);
          }
      };
    };
  framePtr = F.prev;

  return result_754975298;

}

function find_671089202(a_671089205, item_671089206) {
  var result_671089207 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1665;
    F.filename = "system.nim";
    result_671089207 = 0;
    Label1: {
      F.line = 1666;
      var i_671089211 = 0;
      F.line = 23;
      F.filename = "iterators.nim";
      var i_536872799 = 0;
      Label2: {
        F.line = 24;
          Label3: while (true) {
          if (!(i_536872799 < (a_671089205).length)) break Label3;
            F.line = 1666;
            F.filename = "system.nim";
            i_671089211 = a_671089205[chckIndx(i_536872799, 0, (a_671089205).length - 1)];
            if ((i_671089211 == item_671089206)) {
            F.line = 1667;
            break BeforeRet;
            }
            
            F.line = 1666;
            result_671089207 = addInt(result_671089207, 1);
            F.line = 26;
            F.filename = "iterators.nim";
            i_536872799 = addInt(i_536872799, 1);
          }
      };
    };
    F.line = 1669;
    F.filename = "system.nim";
    result_671089207 = (-1);
  };
  framePtr = F.prev;

  return result_671089207;

}

function contains_671089197(a_671089199, item_671089200) {
  var result_671089201 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1683;
    F.filename = "system.nim";
    result_671089201 = (0 <= find_671089202(a_671089199, item_671089200));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_671089201;

}

function nsuSplitChar(s_754975265, sep_754975266, maxsplit_754975267) {
  var result_754975268 = [];

  var F = {procname: "strutils.split", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 417;
    F.filename = "strutils.nim";
    result_754975268 = nimCopy(null, [], NTI754975093);
    Label1: {
      F.line = 418;
      var xHEX60gensym67_754975274 = [];
      F.line = 389;
      var lastHEX60gensym34_536872804 = 0;
      F.line = 390;
      var splitsHEX60gensym34_536872805 = maxsplit_754975267;
      Label2: {
        F.line = 450;
          Label3: while (true) {
          if (!(lastHEX60gensym34_536872804 <= (s_754975265).length)) break Label3;
            F.line = 393;
            var firstHEX60gensym34_536872807 = lastHEX60gensym34_536872804;
            Label4: {
              F.line = 394;
                Label5: while (true) {
                if (!((lastHEX60gensym34_536872804 < (s_754975265).length) && !((s_754975265[chckIndx(lastHEX60gensym34_536872804, 0, (s_754975265).length - 1)] == sep_754975266)))) break Label5;
                  F.line = 395;
                  lastHEX60gensym34_536872804 = addInt(lastHEX60gensym34_536872804, 1);
                }
            };
            if ((splitsHEX60gensym34_536872805 == 0)) {
            F.line = 396;
            lastHEX60gensym34_536872804 = (s_754975265).length;
            }
            
            F.line = 743;
            xHEX60gensym67_754975274 = substr_33558078(s_754975265, firstHEX60gensym34_536872807, subInt(lastHEX60gensym34_536872804, 1));
            F.line = 743;
            var Temporary6 = nimCopy(null, xHEX60gensym67_754975274, NTI33554449);
            result_754975268.push(Temporary6);;
            if ((splitsHEX60gensym34_536872805 == 0)) {
            F.line = 398;
            break Label2;
            }
            
            F.line = 399;
            splitsHEX60gensym34_536872805 = subInt(splitsHEX60gensym34_536872805, 1);
            F.line = 400;
            lastHEX60gensym34_536872804 = addInt(lastHEX60gensym34_536872804, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_754975268;

}

function nsuStartsWith(s_754976174, prefix_754976175) {
  var result_754976176 = false;

  var F = {procname: "strutils.startsWith", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 56;
    F.filename = "strimpl.nim";
    var prefixLenHEX60gensym146_754976181 = (prefix_754976175).length;
    F.line = 57;
    var sLenHEX60gensym146_754976182 = (s_754976174).length;
    F.line = 58;
    var iHEX60gensym146_754976183 = 0;
    Label1: {
      F.line = 1624;
      F.filename = "strutils.nim";
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym146_754976181 <= iHEX60gensym146_754976183)) {
          F.line = 60;
          F.filename = "strimpl.nim";
          result_754976176 = true;
          break BeforeRet;
          }
          
          if (((sLenHEX60gensym146_754976182 <= iHEX60gensym146_754976183) || !((s_754976174[chckIndx(iHEX60gensym146_754976183, 0, (s_754976174).length - 1)] == prefix_754976175[chckIndx(iHEX60gensym146_754976183, 0, (prefix_754976175).length - 1)])))) {
          F.line = 61;
          result_754976176 = false;
          break BeforeRet;
          }
          
          F.line = 62;
          iHEX60gensym146_754976183 = addInt(iHEX60gensym146_754976183, 1);
        }
    };
  };
  framePtr = F.prev;

  return result_754976176;

}

function nsuEndsWith(s_754976194, suffix_754976195) {
  var result_754976196 = false;

  var F = {procname: "strutils.endsWith", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 65;
    F.filename = "strimpl.nim";
    var suffixLenHEX60gensym153_754976202 = (suffix_754976195).length;
    F.line = 66;
    var sLenHEX60gensym153_754976203 = (s_754976194).length;
    F.line = 67;
    var iHEX60gensym153_754976204 = 0;
    F.line = 68;
    var jHEX60gensym153_754976205 = subInt(sLenHEX60gensym153_754976203, suffixLenHEX60gensym153_754976202);
    Label1: {
      F.line = 69;
        Label2: while (true) {
        if (!((0 <= addInt(iHEX60gensym153_754976204, jHEX60gensym153_754976205)) && (addInt(iHEX60gensym153_754976204, jHEX60gensym153_754976205) < sLenHEX60gensym153_754976203))) break Label2;
          if (!((s_754976194[chckIndx(addInt(iHEX60gensym153_754976204, jHEX60gensym153_754976205), 0, (s_754976194).length - 1)] == suffix_754976195[chckIndx(iHEX60gensym153_754976204, 0, (suffix_754976195).length - 1)]))) {
          F.line = 70;
          result_754976196 = false;
          break BeforeRet;
          }
          
          F.line = 71;
          iHEX60gensym153_754976204 = addInt(iHEX60gensym153_754976204, 1);
        }
    };
    if ((suffixLenHEX60gensym153_754976202 <= iHEX60gensym153_754976204)) {
    F.line = 72;
    result_754976196 = true;
    break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_754976196;

}

function glob_671089193(matcher_671089194, filter_671089195) {
  var result_671089196 = false;

  var F = {procname: "unittest.glob", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((filter_671089195).length == 0)) {
    F.line = 404;
    F.filename = "unittest.nim";
    result_671089196 = true;
    break BeforeRet;
    }
    
    if (!(contains_671089197(filter_671089195, 42))) {
    F.line = 407;
    result_671089196 = eqStrings(matcher_671089194, filter_671089195);
    break BeforeRet;
    }
    
    F.line = 409;
    var beforeAndAfter_671089217 = nsuSplitChar(filter_671089195, 42, 1);
    if (((beforeAndAfter_671089217).length == 1)) {
    F.line = 412;
    result_671089196 = nsuStartsWith(matcher_671089194, beforeAndAfter_671089217[chckIndx(0, 0, (beforeAndAfter_671089217).length - 1)]);
    break BeforeRet;
    }
    
    if (((matcher_671089194).length < subInt((filter_671089195).length, 1))) {
    F.line = 415;
    result_671089196 = false;
    break BeforeRet;
    }
    
    F.line = 417;
    result_671089196 = (nsuStartsWith(matcher_671089194, beforeAndAfter_671089217[chckIndx(0, 0, (beforeAndAfter_671089217).length - 1)]) && nsuEndsWith(matcher_671089194, beforeAndAfter_671089217[chckIndx(1, 0, (beforeAndAfter_671089217).length - 1)]));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_671089196;

}

function matchFilter_671089221(suiteName_671089222, testName_671089223, filter_671089224) {
  var result_671089225 = false;

  var F = {procname: "unittest.matchFilter", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (eqStrings(filter_671089224, [])) {
    F.line = 422;
    F.filename = "unittest.nim";
    result_671089225 = true;
    break BeforeRet;
    }
    
    if (eqStrings(testName_671089223, filter_671089224)) {
    F.line = 425;
    result_671089225 = true;
    break BeforeRet;
    }
    
    F.line = 426;
    var suiteAndTestFilters_671089226 = nsuSplitString(filter_671089224, [58,58], 1);
    if (((suiteAndTestFilters_671089226).length == 1)) {
    F.line = 430;
    var testFilter_671089230 = nimCopy(null, suiteAndTestFilters_671089226[chckIndx(0, 0, (suiteAndTestFilters_671089226).length - 1)], NTI33554449);
    F.line = 431;
    result_671089225 = glob_671089193(testName_671089223, testFilter_671089230);
    break BeforeRet;
    }
    
    F.line = 433;
    result_671089225 = (glob_671089193(suiteName_671089222, suiteAndTestFilters_671089226[chckIndx(0, 0, (suiteAndTestFilters_671089226).length - 1)]) && glob_671089193(testName_671089223, suiteAndTestFilters_671089226[chckIndx(1, 0, (suiteAndTestFilters_671089226).length - 1)]));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_671089225;

}

function shouldRun_671089231(currentSuiteName_671089232, testName_671089233) {
  var result_671089234 = false;

  var F = {procname: "unittest.shouldRun", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((len_671089250(testsFilters_671088690[0]) == 0)) {
    F.line = 440;
    F.filename = "unittest.nim";
    result_671089234 = true;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 442;
      var f_671089346 = [];
      F.line = 265;
      F.filename = "sets.nim";
      var length_536872777 = len_671089250(testsFilters_671088690[0]);
      Label2: {
        F.line = 266;
        var h_536872779 = 0;
        F.line = 75;
        F.filename = "iterators_1.nim";
        var colontmp__536872780 = 0;
        F.line = 266;
        F.filename = "sets.nim";
        colontmp__536872780 = (testsFilters_671088690[0].data).length - 1;
        F.line = 90;
        F.filename = "iterators_1.nim";
        var res_536872781 = 0;
        Label3: {
          F.line = 91;
            Label4: while (true) {
            if (!(res_536872781 <= colontmp__536872780)) break Label4;
              F.line = 266;
              F.filename = "sets.nim";
              h_536872779 = res_536872781;
              if (isFilled_1090519079(testsFilters_671088690[0].data[chckIndx(h_536872779, 0, (testsFilters_671088690[0].data).length - 1)].Field0)) {
              F.line = 442;
              F.filename = "unittest.nim";
              f_671089346 = testsFilters_671088690[0].data[chckIndx(h_536872779, 0, (testsFilters_671088690[0].data).length - 1)].Field1;
              if (matchFilter_671089221(currentSuiteName_671089232, testName_671089233, f_671089346)) {
              F.line = 444;
              result_671089234 = true;
              break BeforeRet;
              }
              
              if (!((len_671089250(testsFilters_671088690[0]) == length_536872777))) {
              F.line = 269;
              F.filename = "sets.nim";
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sets.nim(269, 13) `len(s) == length` the length of the HashSet changed while iterating over it"));
              }
              
              }
              
              F.line = 93;
              F.filename = "iterators_1.nim";
              res_536872781 = addInt(res_536872781, 1);
            }
        };
      };
    };
    F.line = 446;
    F.filename = "unittest.nim";
    result_671089234 = false;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_671089234;

}

function nsuJoinSep(a_754976299, sep_754976300) {
  var result_754976301 = [];

  var F = {procname: "strutils.join", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    if ((0 < (a_754976299).length)) {
    F.line = 1845;
    F.filename = "strutils.nim";
    var L_754976308 = mulInt((sep_754976300).length, subInt((a_754976299).length, 1));
    Label1: {
      F.line = 1846;
      var i_754976316 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536872812 = 0;
      F.line = 1846;
      F.filename = "strutils.nim";
      colontmp__536872812 = (a_754976299).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536872813 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536872813 <= colontmp__536872812)) break Label3;
            F.line = 1846;
            F.filename = "strutils.nim";
            i_754976316 = res_536872813;
            F.line = 1846;
            L_754976308 = addInt(L_754976308, (a_754976299[chckIndx(i_754976316, 0, (a_754976299).length - 1)]).length);
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536872813 = addInt(res_536872813, 1);
          }
      };
    };
    F.line = 1847;
    F.filename = "strutils.nim";
    result_754976301 = nimCopy(null, mnewString(0), NTI33554449);
    F.line = 1848;
    result_754976301.push.apply(result_754976301, a_754976299[chckIndx(0, 0, (a_754976299).length - 1)]);;
    Label4: {
      F.line = 1849;
      var i_754976329 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536872816 = 0;
      F.line = 1849;
      F.filename = "strutils.nim";
      colontmp__536872816 = (a_754976299).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536872817 = 1;
      Label5: {
        F.line = 91;
          Label6: while (true) {
          if (!(res_536872817 <= colontmp__536872816)) break Label6;
            F.line = 1849;
            F.filename = "strutils.nim";
            i_754976329 = res_536872817;
            F.line = 1849;
            result_754976301.push.apply(result_754976301, sep_754976300);;
            F.line = 1849;
            result_754976301.push.apply(result_754976301, a_754976299[chckIndx(i_754976329, 0, (a_754976299).length - 1)]);;
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536872817 = addInt(res_536872817, 1);
          }
      };
    };
    }
    else {
      F.line = 1853;
      F.filename = "strutils.nim";
      result_754976301 = nimCopy(null, [], NTI33554449);
    }
    
  framePtr = F.prev;

  return result_754976301;

}

function newSeq_503317028(len_503317030) {
  var result_503317031 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 631;
    F.filename = "system.nim";
    result_503317031 = new Array(len_503317030); for (var i = 0 ; i < len_503317030 ; ++i) { result_503317031[i] = []; }  framePtr = F.prev;

  return result_503317031;

}

function nsuIndent(s_754975948, count_754975949, padding_754975950) {
            var Temporary6;

  var result_754975951 = [];

  var F = {procname: "strutils.indent", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1463;
    F.filename = "strutils.nim";
    result_754975951 = nimCopy(null, [], NTI33554449);
    F.line = 1464;
    var i_754975952 = 0;
    Label1: {
      F.line = 1465;
      var line_754975953 = [];
      F.line = 669;
      var first_536872836 = 0;
      F.line = 670;
      var last_536872837 = 0;
      F.line = 671;
      var eolpos_536872838 = 0;
      Label2: {
        F.line = 672;
          Label3: while (true) {
          if (!true) break Label3;
            Label4: {
              F.line = 673;
                Label5: while (true) {
                if (!((last_536872837 < (s_754975948).length) && !((ConstSet4[s_754975948[chckIndx(last_536872837, 0, (s_754975948).length - 1)]] != undefined)))) break Label5;
                  F.line = 673;
                  last_536872837 = addInt(last_536872837, 1);
                }
            };
            F.line = 675;
            eolpos_536872838 = last_536872837;
            if ((last_536872837 < (s_754975948).length)) {
            if ((s_754975948[chckIndx(last_536872837, 0, (s_754975948).length - 1)] == 10)) {
            F.line = 677;
            last_536872837 = addInt(last_536872837, 1);
            }
            else {
            if ((s_754975948[chckIndx(last_536872837, 0, (s_754975948).length - 1)] == 13)) {
            F.line = 679;
            last_536872837 = addInt(last_536872837, 1);
            if (((last_536872837 < (s_754975948).length) && (s_754975948[chckIndx(last_536872837, 0, (s_754975948).length - 1)] == 10))) {
            F.line = 680;
            last_536872837 = addInt(last_536872837, 1);
            }
            
            }
            }
            }
            
            F.line = 1465;
            if (false) {
            Temporary6 = subInt(last_536872837, 1);
            }
            else {
            Temporary6 = subInt(eolpos_536872838, 1);
            }
            
            line_754975953 = substr_33558078(s_754975948, first_536872836, Temporary6);
            if (!((i_754975952 == 0))) {
            F.line = 1467;
            result_754975951.push.apply(result_754975951, [10]);;
            }
            
            Label7: {
              F.line = 1468;
              var j_754975958 = 0;
              F.line = 75;
              F.filename = "iterators_1.nim";
              var colontmp__536872831 = 0;
              F.line = 1468;
              F.filename = "strutils.nim";
              colontmp__536872831 = count_754975949;
              F.line = 90;
              F.filename = "iterators_1.nim";
              var res_536872832 = 1;
              Label8: {
                F.line = 91;
                  Label9: while (true) {
                  if (!(res_536872832 <= colontmp__536872831)) break Label9;
                    F.line = 1468;
                    F.filename = "strutils.nim";
                    j_754975958 = res_536872832;
                    F.line = 1468;
                    result_754975951.push.apply(result_754975951, padding_754975950);;
                    F.line = 93;
                    F.filename = "iterators_1.nim";
                    res_536872832 = addInt(res_536872832, 1);
                  }
              };
            };
            F.line = 1465;
            F.filename = "strutils.nim";
            result_754975951.push.apply(result_754975951, line_754975953);;
            F.line = 1465;
            i_754975952 = addInt(i_754975952, 1);
            if ((eolpos_536872838 == last_536872837)) {
            F.line = 686;
            break Label2;
            }
            
            F.line = 688;
            first_536872836 = last_536872837;
          }
      };
    };
  framePtr = F.prev;

  return result_754975951;

}

function HEX5BHEX5D_754976027(s_754976030, x_754976031) {
  var result_754976032 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_754976034 = x_754976031.a;
    F.line = 84;
    var L_754976036 = addInt(subInt(subInt((s_754976030).length, x_754976031.b), a_754976034), 1);
    F.line = 85;
    result_754976032 = nimCopy(null, mnewString(chckRange(L_754976036, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_754976041 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536872842 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536872842 < L_754976036)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_754976041 = i_536872842;
            F.line = 86;
            result_754976032[chckIndx(i_754976041, 0, (result_754976032).length - 1)] = s_754976030[chckIndx(addInt(i_754976041, a_754976034), 0, (s_754976030).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536872842 = addInt(i_536872842, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_754976032;

}

function HEX2EHEX2E_922746984(a_922746987, b_922746988) {
  var result_922746991 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_922746991 = nimCopy(result_922746991, {a: a_922746987, b: b_922746988}, NTI922746965);
  framePtr = F.prev;

  return result_922746991;

}

function HEX5BHEX5D_671089146(s_671089148, i_671089149) {
  var result_671089150 = null;
  var result_671089150_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_671089150 = s_671089148; result_671089150_Idx = chckIndx(subInt((s_671089148).length, i_671089149), 0, (s_671089148).length - 1);
  framePtr = F.prev;

  return [result_671089150, result_671089150_Idx];

}

function delete_1275069436(x_1275069438, x_1275069438_Idx, i_1275069439) {
  var F = {procname: "delete.delete", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1966;
    F.filename = "system.nim";
    x_1275069438[x_1275069438_Idx].splice(i_1275069439, 1);
  framePtr = F.prev;

  
}

function concat_1275069467(seqs_1275069469) {
  var result_1275069470 = [];

  var F = {procname: "concat.concat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/sequtils.nim", line: 0};
  framePtr = F;
    F.line = 134;
    F.filename = "sequtils.nim";
    var L_1275069471 = 0;
    Label1: {
      F.line = 135;
      var seqitm_1275069485 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_536872851 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_536872851 < (seqs_1275069469).length)) break Label3;
            F.line = 135;
            F.filename = "sequtils.nim";
            seqitm_1275069485 = seqs_1275069469[chckIndx(i_536872851, 0, (seqs_1275069469).length - 1)];
            F.line = 135;
            L_1275069471 = addInt(L_1275069471, (seqitm_1275069485).length);
            F.line = 16;
            F.filename = "iterators.nim";
            i_536872851 = addInt(i_536872851, 1);
          }
      };
    };
    F.line = 136;
    F.filename = "sequtils.nim";
    result_1275069470 = new Array(chckRange(L_1275069471, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1275069471, 0, 2147483647) ; ++i) { result_1275069470[i] = []; }    F.line = 137;
    var i_1275069498 = 0;
    Label4: {
      F.line = 138;
      var s_1275069502 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_536872859 = 0;
      Label5: {
        F.line = 14;
          Label6: while (true) {
          if (!(i_536872859 < (seqs_1275069469).length)) break Label6;
            F.line = 138;
            F.filename = "sequtils.nim";
            s_1275069502 = seqs_1275069469[chckIndx(i_536872859, 0, (seqs_1275069469).length - 1)];
            Label7: {
              F.line = 139;
              var itm_1275069506 = [];
              F.line = 241;
              F.filename = "iterators.nim";
              var i_536872856 = 0;
              F.line = 242;
              var L_536872857 = (s_1275069502).length;
              Label8: {
                F.line = 243;
                  Label9: while (true) {
                  if (!(i_536872856 < L_536872857)) break Label9;
                    F.line = 139;
                    F.filename = "sequtils.nim";
                    itm_1275069506 = s_1275069502[chckIndx(i_536872856, 0, (s_1275069502).length - 1)];
                    F.line = 140;
                    result_1275069470[chckIndx(i_1275069498, 0, (result_1275069470).length - 1)] = nimCopy(null, itm_1275069506, NTI33554449);
                    F.line = 139;
                    i_1275069498 = addInt(i_1275069498, 1);
                    F.line = 245;
                    F.filename = "iterators.nim";
                    i_536872856 = addInt(i_536872856, 1);
                    if (!(((s_1275069502).length == L_536872857))) {
                    F.line = 246;
                    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              };
            };
            F.line = 16;
            i_536872859 = addInt(i_536872859, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1275069470;

}

function serialize_1275069314(node_1275069315, opening_1275069318, closing_1275069319, leafdata_1275069322, ind_1275069323) {
    var Temporary1;
    var Temporary3;
      var Temporary8;
      var Temporary12;
        var Temporary14;

  var result_1275069324 = [];

  var F = {procname: "nodetree.serialize", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 204;
    F.filename = "nodetree.nim";
    result_1275069324 = nimCopy(null, newSeq_503317028(0), NTI503316800);
    F.line = 205;
    var open_1275069332 = opening_1275069318(node_1275069315);
    F.line = 206;
    var close_1275069333 = closing_1275069319(node_1275069315);
    F.line = 207;
    var openLF_1275069334 = nsuEndsWith(open_1275069332, [10]);
    F.line = 208;
    var closeLF_1275069335 = nsuStartsWith(close_1275069333, [10]);
    if ((0 < ind_1275069323)) {
    F.line = 210;
    if (openLF_1275069334) {
    Temporary1 = nsuIndent(HEX5BHEX5D_754976027(open_1275069332, HEX2EHEX2E_922746984(0, 2)), chckRange(ind_1275069323, 0, 2147483647), [32]);
    }
    else {
    Temporary1 = nsuIndent(open_1275069332, chckRange(ind_1275069323, 0, 2147483647), [32]);
    }
    
    open_1275069332 = nimCopy(null, Temporary1, NTI33554449);
    if (closeLF_1275069335) {
    F.line = 211;
    close_1275069333 = nimCopy(null, nsuIndent(HEX5BHEX5D_754976027(close_1275069333, HEX2EHEX2E_922746984(1, 1)), chckRange(ind_1275069323, 0, 2147483647), [32]), NTI33554449);
    }
    
    }
    else {
      if (openLF_1275069334) {
      F.line = 213;
      open_1275069332 = nimCopy(null, HEX5BHEX5D_754976027(open_1275069332, HEX2EHEX2E_922746984(0, 2)), NTI33554449);
      }
      
      if (closeLF_1275069335) {
      F.line = 214;
      close_1275069333 = nimCopy(null, HEX5BHEX5D_754976027(close_1275069333, HEX2EHEX2E_922746984(1, 1)), NTI33554449);
      }
      
    }
    
    F.line = 215;
    var Temporary2 = nimCopy(null, open_1275069332, NTI33554449);
    result_1275069324.push(Temporary2);;
    if (((node_1275069315.childrenSeq).length == 0)) {
    F.line = 218;
    var lines_1275069428 = [leafdata_1275069322(node_1275069315)];
    if ((!(openLF_1275069334) && (0 < (lines_1275069428[0]).length))) {
    F.line = 220;
    (Temporary3 = HEX5BHEX5D_671089146(result_1275069324, 1), Temporary3)[0][Temporary3[1]].push.apply(Temporary3[0][Temporary3[1]], lines_1275069428[0][chckIndx(0, 0, (lines_1275069428[0]).length - 1)]);;
    F.line = 221;
    delete_1275069436(lines_1275069428, 0, 0);
    }
    
    Label4: {
      F.line = 222;
      var i_1275069466 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__536872820 = 0;
      F.line = 222;
      F.filename = "nodetree.nim";
      colontmp__536872820 = subInt((lines_1275069428[0]).length, 1);
      F.line = 65;
      F.filename = "iterators_1.nim";
      var res_536872822 = 0;
      Label5: {
        F.line = 66;
          Label6: while (true) {
          if (!(res_536872822 <= colontmp__536872820)) break Label6;
            F.line = 222;
            F.filename = "nodetree.nim";
            i_1275069466 = res_536872822;
            F.line = 222;
            lines_1275069428[0][chckIndx(i_1275069466, 0, (lines_1275069428[0]).length - 1)] = nimCopy(null, nsuIndent(lines_1275069428[0][chckIndx(i_1275069466, 0, (lines_1275069428[0]).length - 1)], chckRange(addInt(ind_1275069323, 2), 0, 2147483647), [32]), NTI33554449);
            F.line = 68;
            F.filename = "iterators_1.nim";
            res_536872822 = addInt(res_536872822, 1);
          }
      };
    };
    F.line = 224;
    F.filename = "nodetree.nim";
    result_1275069324 = nimCopy(null, concat_1275069467([nimCopy(null, result_1275069324, NTI1275069108), nimCopy(null, lines_1275069428[0], NTI1275069113)]), NTI1275069119);
    if (closeLF_1275069335) {
    F.line = 226;
    var Temporary7 = nimCopy(null, close_1275069333, NTI33554449);
    result_1275069324.push(Temporary7);;
    }
    else {
      F.line = 228;
    (Temporary8 = HEX5BHEX5D_671089146(result_1275069324, 1), Temporary8)[0][Temporary8[1]].push.apply(Temporary8[0][Temporary8[1]], close_1275069333);;
    }
    
    }
    else {
      F.line = 231;
      F.line = 231;
      var collectResult_1275069540 = [];
      Label9: {
        F.line = 232;
        var child_1275069570 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536872826 = 0;
        F.line = 242;
        var L_536872827 = (node_1275069315.childrenSeq).length;
        Label10: {
          F.line = 243;
            Label11: while (true) {
            if (!(i_536872826 < L_536872827)) break Label11;
              F.line = 232;
              F.filename = "nodetree.nim";
              child_1275069570 = node_1275069315.childrenSeq[chckIndx(i_536872826, 0, (node_1275069315.childrenSeq).length - 1)];
              F.line = 232;
              collectResult_1275069540.push(serialize_1275069314(child_1275069570, opening_1275069318, closing_1275069319, leafdata_1275069322, addInt(ind_1275069323, 2)));;
              F.line = 245;
              F.filename = "iterators.nim";
              i_536872826 = addInt(i_536872826, 1);
              if (!(((node_1275069315.childrenSeq).length == L_536872827))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      var childBlocks_1275069575 = [nimCopy(null, collectResult_1275069540, NTI1275069186)];
      if ((!(openLF_1275069334) && (0 < (childBlocks_1275069575[0][chckIndx(0, 0, (childBlocks_1275069575[0]).length - 1)][chckIndx(0, 0, (childBlocks_1275069575[0][chckIndx(0, 0, (childBlocks_1275069575[0]).length - 1)]).length - 1)]).length))) {
      F.line = 235;
      F.filename = "nodetree.nim";
      (Temporary12 = HEX5BHEX5D_671089146(result_1275069324, 1), Temporary12)[0][Temporary12[1]].push.apply(Temporary12[0][Temporary12[1]], childBlocks_1275069575[0][chckIndx(0, 0, (childBlocks_1275069575[0]).length - 1)][chckIndx(0, 0, (childBlocks_1275069575[0][chckIndx(0, 0, (childBlocks_1275069575[0]).length - 1)]).length - 1)]);;
      F.line = 236;
      delete_1275069436(childBlocks_1275069575[0], chckIndx(0, 0, (childBlocks_1275069575[0]).length - 1), 0);
      }
      
      F.line = 237;
      result_1275069324 = nimCopy(null, concat_1275069467([nimCopy(null, result_1275069324, NTI1275069210), concat_1275069467(childBlocks_1275069575[0])]), NTI1275069119);
      if (closeLF_1275069335) {
      F.line = 239;
      var Temporary13 = nimCopy(null, close_1275069333, NTI33554449);
      result_1275069324.push(Temporary13);;
      }
      else {
        F.line = 241;
      (Temporary14 = HEX5BHEX5D_671089146(result_1275069324, 1), Temporary14)[0][Temporary14[1]].push.apply(Temporary14[0][Temporary14[1]], close_1275069333);;
      }
      
    }
    
  framePtr = F.prev;

  return result_1275069324;

}

function len_1275069702(t_1275069705) {
  var result_1275069706 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 1513;
    F.filename = "tables.nim";
    result_1275069706 = t_1275069705.counter;
  framePtr = F.prev;

  return result_1275069706;

}

function attr_1275068604(node_1275068605) {
  var result_1275068606 = ({data: [], counter: 0, first: 0, last: 0});

  var F = {procname: "nodetree.attr", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((node_1275068605.attributesRef == null)) {
    F.line = 125;
    F.filename = "nodetree.nim";
    node_1275068605.attributesRef = ({data: [], counter: 0, first: 0, last: 0});
    }
    
    F.line = 126;
    result_1275068606 = node_1275068605.attributesRef;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1275068606;

}

function high_1191182478(str_1191182479) {
  var result_1191182480 = 0;

  var F = {procname: "strslice.high", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 82;
    F.filename = "strslice.nim";
    result_1191182480 = subInt(str_1191182479.Field2, str_1191182479.Field1);
  framePtr = F.prev;

  return result_1191182480;

}

function len_1191182481(str_1191182482) {
  var result_1191182483 = 0;

  var F = {procname: "strslice.len", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 86;
    F.filename = "strslice.nim";
    result_1191182483 = addInt(high_1191182478(str_1191182482), 1);
  framePtr = F.prev;

  return result_1191182483;

}

function last_1191182475(str_1191182476) {
  var result_1191182477 = 0;

  var F = {procname: "strslice.last", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 79;
    F.filename = "strslice.nim";
    result_1191182477 = str_1191182476.Field2;
  framePtr = F.prev;

  return result_1191182477;

}

function first_1191182472(str_1191182473) {
  var result_1191182474 = 0;

  var F = {procname: "strslice.first", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 77;
    F.filename = "strslice.nim";
    result_1191182474 = str_1191182473.Field1;
  framePtr = F.prev;

  return result_1191182474;

}

function runeLenAt_956301406(s_956301407, i_956301408) {
  var result_956301409 = 0;

  var F = {procname: "unicode.runeLenAt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    if ((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] <= 127)) {
    F.line = 74;
    F.filename = "unicode.nim";
    result_956301409 = 1;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 5) == 6)) {
    F.line = 75;
    result_956301409 = 2;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 4) == 14)) {
    F.line = 76;
    result_956301409 = 3;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 3) == 30)) {
    F.line = 77;
    result_956301409 = 4;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 2) == 62)) {
    F.line = 78;
    result_956301409 = 5;
    }
    else {
    if (((s_956301407[chckIndx(i_956301408, 0, (s_956301407).length - 1)] >>> 1) == 126)) {
    F.line = 79;
    result_956301409 = 6;
    }
    else {
      F.line = 80;
      result_956301409 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_956301409;

}

function runeLenAt_956308504(s_956308505, i_956308506) {
  var result_956308507 = 0;

  var F = {procname: "unicode.runeLenAt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1161;
    F.filename = "unicode.nim";
    result_956308507 = runeLenAt_956301406((s_956308505.slice(0, (s_956308505).length - 1 + 1)), i_956308506);
  framePtr = F.prev;

  return result_956308507;

}

function str_1191182469(str_1191182470) {
  var result_1191182471 = null;
  var result_1191182471_Idx = 0;

  var F = {procname: "strslice.str", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 75;
    F.filename = "strslice.nim";
    result_1191182471 = str_1191182470.Field0[0]; result_1191182471_Idx = str_1191182470.Field0[1];
  framePtr = F.prev;

  return [result_1191182471, result_1191182471_Idx];

}

function runeLen_1275068975(node_1275068976) {
          var Temporary3;

  var result_1275068977 = 0;

  var F = {procname: "nodetree.runeLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 138;
    F.filename = "nodetree.nim";
    result_1275068977 = 0;
    if ((((node_1275068976.childrenSeq).length == 0) && (0 < len_1191182481(node_1275068976.textSlice)))) {
    F.line = 140;
    var last_1275068981 = last_1191182475(node_1275068976.textSlice);
    F.line = 141;
    var i_1275068982 = first_1191182472(node_1275068976.textSlice);
    Label1: {
      F.line = 142;
        Label2: while (true) {
        if (!(i_1275068982 <= last_1275068981)) break Label2;
          F.line = 143;
          i_1275068982 = addInt(i_1275068982, runeLenAt_956308504((Temporary3 = str_1191182469(node_1275068976.textSlice), Temporary3)[0][Temporary3[1]], chckRange(i_1275068982, 0, 2147483647)));
          F.line = 144;
          result_1275068977 = addInt(result_1275068977, 1);
        }
    };
    }
    else {
      Label4: {
        F.line = 146;
        var child_1275068996 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536872866 = 0;
        F.line = 242;
        var L_536872867 = (node_1275068976.childrenSeq).length;
        Label5: {
          F.line = 243;
            Label6: while (true) {
            if (!(i_536872866 < L_536872867)) break Label6;
              F.line = 146;
              F.filename = "nodetree.nim";
              child_1275068996 = node_1275068976.childrenSeq[chckIndx(i_536872866, 0, (node_1275068976.childrenSeq).length - 1)];
              F.line = 146;
              result_1275068977 = addInt(result_1275068977, runeLen_1275068975(child_1275068996));
              F.line = 245;
              F.filename = "iterators.nim";
              i_536872866 = addInt(i_536872866, 1);
              if (!(((node_1275068976.childrenSeq).length == L_536872867))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
  framePtr = F.prev;

  return result_1275068977;

}

function raiseDivByZero() {
    raiseException({message: [100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111], parent: null, m_type: NTI134217742, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function parseSaturatedNatural_771752342(s_771752343, b_771752344, b_771752344_Idx) {
      var Temporary1;
          var Temporary4;

  var result_771752345 = 0;

  var F = {procname: "parseutils.parseSaturatedNatural", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 500;
    F.filename = "parseutils.nim";
    var i_771752346 = 0;
    if (((i_771752346 < (s_771752343).length) && (s_771752343[chckIndx(i_771752346, 0, (s_771752343).length - 1)] == 43))) {
    F.line = 501;
    i_771752346 = addInt(i_771752346, 1);
    }
    
      if (!(i_771752346 < (s_771752343).length)) Temporary1 = false; else {        Temporary1 = (ConstSet9[s_771752343[chckIndx(i_771752346, 0, (s_771752343).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 503;
    b_771752344[b_771752344_Idx] = 0;
    Label2: {
      F.line = 504;
        Label3: while (true) {
          if (!(i_771752346 < (s_771752343).length)) Temporary4 = false; else {            Temporary4 = (ConstSet10[s_771752343[chckIndx(i_771752346, 0, (s_771752343).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          F.line = 505;
          var c_771752375 = subInt(s_771752343[chckIndx(i_771752346, 0, (s_771752343).length - 1)], 48);
          if ((b_771752344[b_771752344_Idx] <= divInt(subInt(2147483647, c_771752375), 10))) {
          F.line = 507;
          b_771752344[b_771752344_Idx] = addInt(mulInt(b_771752344[b_771752344_Idx], 10), c_771752375);
          }
          else {
            F.line = 509;
            b_771752344[b_771752344_Idx] = 2147483647;
          }
          
          F.line = 510;
          i_771752346 = addInt(i_771752346, 1);
          Label5: {
            F.line = 511;
              Label6: while (true) {
              if (!((i_771752346 < (s_771752343).length) && (s_771752343[chckIndx(i_771752346, 0, (s_771752343).length - 1)] == 95))) break Label6;
                F.line = 511;
                i_771752346 = addInt(i_771752346, 1);
              }
          };
        }
    };
    F.line = 512;
    result_771752345 = i_771752346;
    }
    
  framePtr = F.prev;

  return result_771752345;

}

function parseSaturatedNatural_771752848(s_771752849, b_771752850, b_771752850_Idx, start_771752851) {
  var result_771752852 = 0;

  var F = {procname: "parseutils.parseSaturatedNatural", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 1013;
    F.filename = "parseutils.nim";
    result_771752852 = parseSaturatedNatural_771752342((s_771752849.slice(start_771752851, (s_771752849).length - 1 + 1)), b_771752850, b_771752850_Idx);
  framePtr = F.prev;

  return result_771752852;

}

function parseStandardFormatSpecifier_1207959610(s_1207959611, start_1207959612, ignoreUnknownSuffix_1207959613) {
      var Temporary1;
      var Temporary2;

  var result_1207959614 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

  var F = {procname: "strformat.parseStandardFormatSpecifier", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 434;
    F.filename = "strformat.nim";
    result_1207959614.fill = 32;
    F.line = 435;
    result_1207959614.align = 0;
    F.line = 436;
    result_1207959614.sign = 45;
    F.line = 437;
    var i_1207959616 = start_1207959612;
    if (((addInt(i_1207959616, 1) < (s_1207959611).length) && (ConstSet5[s_1207959611[chckIndx(addInt(i_1207959616, 1), 0, (s_1207959611).length - 1)]] != undefined))) {
    F.line = 439;
    result_1207959614.fill = s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)];
    F.line = 440;
    result_1207959614.align = s_1207959611[chckIndx(addInt(i_1207959616, 1), 0, (s_1207959611).length - 1)];
    F.line = 441;
    i_1207959616 = addInt(i_1207959616, 2);
    }
    else {
    if (((i_1207959616 < (s_1207959611).length) && (ConstSet6[s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)]] != undefined))) {
    F.line = 443;
    result_1207959614.align = s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)];
    F.line = 444;
    i_1207959616 = addInt(i_1207959616, 1);
    }
    }
    if (((i_1207959616 < (s_1207959611).length) && (ConstSet7[s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)]] != undefined))) {
    F.line = 447;
    result_1207959614.sign = s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)];
    F.line = 448;
    i_1207959616 = addInt(i_1207959616, 1);
    }
    
    if (((i_1207959616 < (s_1207959611).length) && (s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)] == 35))) {
    F.line = 451;
    result_1207959614.alternateForm = true;
    F.line = 452;
    i_1207959616 = addInt(i_1207959616, 1);
    }
    
      if (!((addInt(i_1207959616, 1) < (s_1207959611).length) && (s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet8[s_1207959611[chckIndx(addInt(i_1207959616, 1), 0, (s_1207959611).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 455;
    result_1207959614.padWithZero = true;
    F.line = 456;
    i_1207959616 = addInt(i_1207959616, 1);
    }
    
    F.line = 458;
    var parsedLength_1207959658 = parseSaturatedNatural_771752848(s_1207959611, result_1207959614, "minimumWidth", i_1207959616);
    F.line = 459;
    i_1207959616 = addInt(i_1207959616, parsedLength_1207959658);
    if (((i_1207959616 < (s_1207959611).length) && (s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)] == 46))) {
    F.line = 461;
    i_1207959616 = addInt(i_1207959616, 1);
    F.line = 462;
    var parsedLengthB_1207959669 = parseSaturatedNatural_771752848(s_1207959611, result_1207959614, "precision", i_1207959616);
    F.line = 463;
    i_1207959616 = addInt(i_1207959616, parsedLengthB_1207959669);
    }
    else {
      F.line = 465;
      result_1207959614.precision = (-1);
    }
    
      if (!(i_1207959616 < (s_1207959611).length)) Temporary2 = false; else {        Temporary2 = (ConstSet11[s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)]] != undefined);      }    if (Temporary2) {
    F.line = 468;
    result_1207959614.typ = s_1207959611[chckIndx(i_1207959616, 0, (s_1207959611).length - 1)];
    F.line = 469;
    i_1207959616 = addInt(i_1207959616, 1);
    }
    
    F.line = 470;
    result_1207959614.endPosition = i_1207959616;
    if ((!((i_1207959616 == (s_1207959611).length)) && !(ignoreUnknownSuffix_1207959613))) {
    F.line = 472;
    raiseException({message: ([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,44,32,99,97,110,110,111,116,32,112,97,114,115,101,58,32] || []).concat(HEX5BHEX5D_754976027(s_1207959611, HEX2EHEX2E_922746984(i_1207959616, 1)) || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_1207959614;

}

function nucruneLen(s_956301340) {
  var result_956301341 = 0;

  var F = {procname: "unicode.runeLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 52;
    F.filename = "unicode.nim";
    result_956301341 = 0;
    F.line = 53;
    var i_956301342 = 0;
    Label1: {
      F.line = 54;
        Label2: while (true) {
        if (!(i_956301342 < (s_956301340).length)) break Label2;
          if ((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] <= 127)) {
          F.line = 55;
          i_956301342 = addInt(i_956301342, 1);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 5) == 6)) {
          F.line = 56;
          i_956301342 = addInt(i_956301342, 2);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 4) == 14)) {
          F.line = 57;
          i_956301342 = addInt(i_956301342, 3);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 3) == 30)) {
          F.line = 58;
          i_956301342 = addInt(i_956301342, 4);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 2) == 62)) {
          F.line = 59;
          i_956301342 = addInt(i_956301342, 5);
          }
          else {
          if (((s_956301340[chckIndx(i_956301342, 0, (s_956301340).length - 1)] >>> 1) == 126)) {
          F.line = 60;
          i_956301342 = addInt(i_956301342, 6);
          }
          else {
            F.line = 61;
          i_956301342 = addInt(i_956301342, 1);
          }
          }}}}}
          F.line = 62;
          result_956301341 = addInt(result_956301341, 1);
        }
    };
  framePtr = F.prev;

  return result_956301341;

}

function runeLen_956308501(s_956308502) {
  var result_956308503 = 0;

  var F = {procname: "unicode.runeLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1153;
    F.filename = "unicode.nim";
    result_956308503 = nucruneLen((s_956308502.slice(0, (s_956308502).length - 1 + 1)));
  framePtr = F.prev;

  return result_956308503;

}

function runeOffset_956302030(s_956302031, pos_956302032, start_956302033) {
  var result_956302034 = 0;

  var F = {procname: "unicode.runeOffset", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 331;
    F.filename = "unicode.nim";
    var i_956302035 = 0;
    F.line = 332;
    var o_956302036 = start_956302033;
    Label1: {
      F.line = 333;
        Label2: while (true) {
        if (!(i_956302035 < pos_956302032)) break Label2;
          F.line = 334;
          o_956302036 = addInt(o_956302036, chckRange(runeLenAt_956301406(s_956302031, o_956302036), 0, 2147483647));
          if (((s_956302031).length <= o_956302036)) {
          F.line = 336;
          result_956302034 = (-1);
          break BeforeRet;
          }
          
          F.line = 337;
          i_956302035 = addInt(i_956302035, 1);
        }
    };
    F.line = 338;
    result_956302034 = o_956302036;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_956302034;

}

function runeOffset_956308676(s_956308677, pos_956308678, start_956308679) {
  var result_956308680 = 0;

  var F = {procname: "unicode.runeOffset", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1196;
    F.filename = "unicode.nim";
    result_956308680 = runeOffset_956302030((s_956308677.slice(0, (s_956308677).length - 1 + 1)), pos_956308678, start_956308679);
  framePtr = F.prev;

  return result_956308680;

}

function validateUtf8_956301648(s_956301649) {
  var result_956301650 = 0;

  var F = {procname: "unicode.validateUtf8", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 184;
    F.filename = "unicode.nim";
    var i_956301651 = 0;
    F.line = 185;
    var L_956301655 = (s_956301649).length;
    Label1: {
      F.line = 186;
        Label2: while (true) {
        if (!(i_956301651 < L_956301655)) break Label2;
          if ((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] <= 127)) {
          F.line = 188;
          i_956301651 = addInt(i_956301651, 1);
          }
          else {
          if (((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] >>> 5) == 6)) {
          if ((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] < 194)) {
          F.line = 190;
          result_956301650 = i_956301651;
          break BeforeRet;
          }
          
          if (((addInt(i_956301651, 1) < L_956301655) && ((s_956301649[chckIndx(addInt(i_956301651, 1), 0, (s_956301649).length - 1)] >>> 6) == 2))) {
          F.line = 191;
          i_956301651 = addInt(i_956301651, 2);
          }
          else {
            F.line = 192;
            result_956301650 = i_956301651;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] >>> 4) == 14)) {
          if ((((addInt(i_956301651, 2) < L_956301655) && ((s_956301649[chckIndx(addInt(i_956301651, 1), 0, (s_956301649).length - 1)] >>> 6) == 2)) && ((s_956301649[chckIndx(addInt(i_956301651, 2), 0, (s_956301649).length - 1)] >>> 6) == 2))) {
          F.line = 195;
          i_956301651 = addInt(i_956301651, 3);
          }
          else {
            F.line = 196;
            result_956301650 = i_956301651;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_956301649[chckIndx(i_956301651, 0, (s_956301649).length - 1)] >>> 3) == 30)) {
          if (((((addInt(i_956301651, 3) < L_956301655) && ((s_956301649[chckIndx(addInt(i_956301651, 1), 0, (s_956301649).length - 1)] >>> 6) == 2)) && ((s_956301649[chckIndx(addInt(i_956301651, 2), 0, (s_956301649).length - 1)] >>> 6) == 2)) && ((s_956301649[chckIndx(addInt(i_956301651, 3), 0, (s_956301649).length - 1)] >>> 6) == 2))) {
          F.line = 201;
          i_956301651 = addInt(i_956301651, 4);
          }
          else {
            F.line = 202;
            result_956301650 = i_956301651;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 204;
            result_956301650 = i_956301651;
            break BeforeRet;
          }
          }}}
        }
    };
    F.line = 205;
    result_956301650 = (-1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_956301650;

}

function validateUtf8_956308673(s_956308674) {
  var result_956308675 = 0;

  var F = {procname: "unicode.validateUtf8", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 1186;
    F.filename = "unicode.nim";
    result_956308675 = validateUtf8_956301648((s_956308674.slice(0, (s_956308674).length - 1 + 1)));
  framePtr = F.prev;

  return result_956308675;

}

function nsuRepeatChar(c_754975841, count_754975842) {
  var result_754975843 = [];

  var F = {procname: "strutils.repeat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1328;
    F.filename = "strutils.nim";
    result_754975843 = nimCopy(null, mnewString(count_754975842), NTI33554449);
    Label1: {
      F.line = 1329;
      var i_754975848 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536872875 = 0;
      F.line = 1329;
      F.filename = "strutils.nim";
      colontmp__536872875 = subInt(count_754975842, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536872876 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536872876 <= colontmp__536872875)) break Label3;
            F.line = 1329;
            F.filename = "strutils.nim";
            i_754975848 = res_536872876;
            F.line = 1329;
            result_754975843[chckIndx(i_754975848, 0, (result_754975843).length - 1)] = c_754975841;
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536872876 = addInt(res_536872876, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_754975843;

}

function alignString_1207959572(s_1207959573, minimumWidth_1207959574, align_1207959575, fill_1207959576) {
      var Temporary1;

  var result_1207959577 = [];

  var F = {procname: "strformat.alignString", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    if ((minimumWidth_1207959574 == 0)) {
    F.line = 335;
    F.filename = "strformat.nim";
    result_1207959577 = nimCopy(null, s_1207959573, NTI33554449);
    }
    else {
      F.line = 337;
      if ((validateUtf8_956308673(s_1207959573) == (-1))) {
      Temporary1 = runeLen_956308501(s_1207959573);
      }
      else {
      Temporary1 = (s_1207959573).length;
      }
      
      var sRuneLen_1207959578 = Temporary1;
      F.line = 338;
      var toFill_1207959579 = subInt(minimumWidth_1207959574, sRuneLen_1207959578);
      if ((toFill_1207959579 <= 0)) {
      F.line = 340;
      result_1207959577 = nimCopy(null, s_1207959573, NTI33554449);
      }
      else {
      if (((align_1207959575 == 60) || (align_1207959575 == 0))) {
      F.line = 342;
      result_1207959577 = nimCopy(null, (s_1207959573 || []).concat(nsuRepeatChar(fill_1207959576, chckRange(toFill_1207959579, 0, 2147483647)) || []), NTI33554449);
      }
      else {
      if ((align_1207959575 == 94)) {
      F.line = 344;
      var half_1207959580 = divInt(toFill_1207959579, 2);
      F.line = 345;
      result_1207959577 = nimCopy(null, (nsuRepeatChar(fill_1207959576, chckRange(half_1207959580, 0, 2147483647)) || []).concat(s_1207959573 || [],nsuRepeatChar(fill_1207959576, chckRange(subInt(toFill_1207959579, half_1207959580), 0, 2147483647)) || []), NTI33554449);
      }
      else {
        F.line = 347;
        result_1207959577 = nimCopy(null, (nsuRepeatChar(fill_1207959576, chckRange(toFill_1207959579, 0, 2147483647)) || []).concat(s_1207959573 || []), NTI33554449);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_1207959577;

}

function formatValue_1207959723(result_1207959724, result_1207959724_Idx, value_1207959725, specifier_1207959726) {
    var Temporary1;

  var F = {procname: "strformat.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 557;
    F.filename = "strformat.nim";
    var spec_1207959727 = parseStandardFormatSpecifier_1207959610(specifier_1207959726, 0, false);
    F.line = 558;
    var value_1207959728 = nimCopy(null, value_1207959725, NTI33554449);
    F.line = 559;
    switch (spec_1207959727.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 562;
      raiseException({message: ([105,110,118,97,108,105,100,32,116,121,112,101,32,105,110,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,102,111,114,32,115,116,114,105,110,103,44,32,101,120,112,101,99,116,101,100,32,39,115,39,44,32,98,117,116,32,103,111,116,32] || []).concat([spec_1207959727.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_1207959727.precision == (-1)))) {
    if ((spec_1207959727.precision < runeLen_956308501(value_1207959728))) {
    F.line = 567;
    if (value_1207959728.length < (Temporary1 = chckRange(runeOffset_956308676(value_1207959728, chckRange(spec_1207959727.precision, 0, 2147483647), 0), 0, 2147483647), Temporary1)) { for (var i = value_1207959728.length; i < Temporary1; ++i) value_1207959728.push(0); }
         else {value_1207959728.length = Temporary1; };
    }
    
    }
    
    F.line = 568;
    result_1207959724[result_1207959724_Idx].push.apply(result_1207959724[result_1207959724_Idx], alignString_1207959572(value_1207959728, spec_1207959727.minimumWidth, spec_1207959727.align, spec_1207959727.fill));;
  framePtr = F.prev;

  
}

function isFilled_1342177311(hcode_1342177312) {
  var result_1342177313 = false;

  var F = {procname: "tables.isFilled", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 27;
    F.filename = "hashcommon.nim";
    result_1342177313 = !((hcode_1342177312 == 0));
  framePtr = F.prev;

  return result_1342177313;

}

function HEX5BHEX5D_1191182454(s_1191182457, x_1191182458) {
  var result_1191182459 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_1191182461 = ((x_1191182458.a) | 0);
    F.line = 84;
    var L_1191182463 = addInt(subInt(((x_1191182458.b) | 0), a_1191182461), 1);
    F.line = 85;
    result_1191182459 = nimCopy(null, mnewString(chckRange(L_1191182463, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_1191182468 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536872893 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536872893 < L_1191182463)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_1191182468 = i_536872893;
            F.line = 86;
            result_1191182459[chckIndx(i_1191182468, 0, (result_1191182459).length - 1)] = s_1191182457[chckIndx(addInt(i_1191182468, a_1191182461), 0, (s_1191182457).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536872893 = addInt(i_536872893, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1191182459;

}

function HEX2EHEX2E_1191182403(a_1191182406, b_1191182407) {
  var result_1191182410 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_1191182410 = nimCopy(result_1191182410, {a: a_1191182406, b: b_1191182407}, NTI1191182399);
  framePtr = F.prev;

  return result_1191182410;

}

function HEX24_1191182400(str_1191182401) {
  var result_1191182402 = [];

  var F = {procname: "strslice.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((str_1191182401.Field2 < 0)) {
    F.line = 72;
    F.filename = "strslice.nim";
    result_1191182402 = nimCopy(null, [], NTI33554449);
    break BeforeRet;
    }
    
    F.line = 73;
    result_1191182402 = nimCopy(null, HEX5BHEX5D_1191182454(str_1191182401.Field0[0][str_1191182401.Field0[1]], HEX2EHEX2E_1191182403(str_1191182401.Field1, str_1191182401.Field2)), NTI33554449);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1191182402;

}

function content_1275068478(node_1275068479) {
  var result_1275068480 = [];

  var F = {procname: "nodetree.content", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((node_1275068479.childrenSeq).length == 0)) {
    F.line = 77;
    F.filename = "nodetree.nim";
    result_1275068480 = nimCopy(null, HEX24_1191182400(node_1275068479.textSlice), NTI33554449);
    break BeforeRet;
    }
    else {
      F.line = 79;
      result_1275068480 = nimCopy(null, [], NTI33554449);
      Label1: {
        F.line = 80;
        var child_1275068506 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536872889 = 0;
        F.line = 242;
        var L_536872890 = (node_1275068479.childrenSeq).length;
        Label2: {
          F.line = 243;
            Label3: while (true) {
            if (!(i_536872889 < L_536872890)) break Label3;
              F.line = 80;
              F.filename = "nodetree.nim";
              child_1275068506 = node_1275068479.childrenSeq[chckIndx(i_536872889, 0, (node_1275068479.childrenSeq).length - 1)];
              F.line = 80;
              result_1275068480.push.apply(result_1275068480, content_1275068478(child_1275068506));;
              F.line = 245;
              F.filename = "iterators.nim";
              i_536872889 = addInt(i_536872889, 1);
              if (!(((node_1275068479.childrenSeq).length == L_536872890))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
  };
  framePtr = F.prev;

  return result_1275068480;

}

function nsuFindChar(s_754976404, sub_754976405, start_754976406, last_754976407) {
    var Temporary1;

  var result_754976408 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1945;
    F.filename = "strutils.nim";
    result_754976408 = (-1);
    F.line = 1946;
    if ((last_754976407 < 0)) {
    Temporary1 = (s_754976404).length - 1;
    }
    else {
    Temporary1 = last_754976407;
    }
    
    var last_754976409 = Temporary1;
    Label2: {
      F.line = 1949;
      var iHEX60gensym176_754976423 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536872902 = 0;
      F.line = 1949;
      F.filename = "strutils.nim";
      colontmp__536872902 = start_754976406;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536872903 = colontmp__536872902;
      Label3: {
        F.line = 91;
          Label4: while (true) {
          if (!(res_536872903 <= last_754976409)) break Label4;
            F.line = 1963;
            F.filename = "strutils.nim";
            iHEX60gensym176_754976423 = res_536872903;
            if ((s_754976404[chckIndx(iHEX60gensym176_754976423, 0, (s_754976404).length - 1)] == sub_754976405)) {
            F.line = 1951;
            result_754976408 = iHEX60gensym176_754976423;
            break BeforeRet;
            }
            
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536872903 = addInt(res_536872903, 1);
          }
      };
    };
  };
  framePtr = F.prev;

  return result_754976408;

}

function substr_33558090(s_33558091, first_33558092) {
  var result_33558093 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2665;
    F.filename = "system.nim";
    result_33558093 = nimCopy(null, substr_33558078(s_33558091, first_33558092, (s_33558091).length - 1), NTI33554449);
  framePtr = F.prev;

  return result_33558093;

}

function fill_754976342(a_754976344, value_754976345) {
  var F = {procname: "fill.fill", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 72;
    F.filename = "algorithm.nim";
    var xHEX60gensym172_754976351 = 0;
    Label1: {
      F.line = 98;
        Label2: while (true) {
        if (!(xHEX60gensym172_754976351 <= (a_754976344).length - 1)) break Label2;
          F.line = 98;
          a_754976344[chckIndx(xHEX60gensym172_754976351, 0, (a_754976344).length - 1)] = value_754976345;
          F.line = 75;
          xHEX60gensym172_754976351 = addInt(xHEX60gensym172_754976351, 1);
        }
    };
  framePtr = F.prev;

  
}

function nsuInitSkipTable(a_754976339, sub_754976340) {
  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1878;
    F.filename = "strutils.nim";
    var m_754976341 = (sub_754976340).length;
    F.line = 1879;
    fill_754976342(a_754976339, m_754976341);
    Label1: {
      F.line = 1881;
      var i_754976361 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__536872906 = 0;
      F.line = 1881;
      F.filename = "strutils.nim";
      colontmp__536872906 = subInt(m_754976341, 1);
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536872907 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536872907 < colontmp__536872906)) break Label3;
            F.line = 1881;
            F.filename = "strutils.nim";
            i_754976361 = i_536872907;
            F.line = 1881;
            a_754976339[chckIndx(sub_754976340[chckIndx(i_754976361, 0, (sub_754976340).length - 1)], 0, (a_754976339).length - 1)] = subInt(subInt(m_754976341, 1), i_754976361);
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536872907 = addInt(i_536872907, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function nsuInitNewSkipTable(sub_754976379) {
  var result_754976380 = [new Int32Array(256)];

  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1891;
    F.filename = "strutils.nim";
    nsuInitSkipTable(result_754976380[0], sub_754976379);
  framePtr = F.prev;

  return result_754976380[0];

}

function nsuFindStrA(a_754976382, s_754976383, sub_754976384, start_754976385, last_754976386) {
    var Temporary1;

  var result_754976387 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1905;
    F.filename = "strutils.nim";
    if ((last_754976386 < 0)) {
    Temporary1 = (s_754976383).length - 1;
    }
    else {
    Temporary1 = last_754976386;
    }
    
    var last_754976388 = Temporary1;
    F.line = 1906;
    var subLast_754976389 = subInt((sub_754976384).length, 1);
    if ((subLast_754976389 == (-1))) {
    F.line = 1911;
    result_754976387 = start_754976385;
    break BeforeRet;
    }
    
    F.line = 1915;
    result_754976387 = (-1);
    F.line = 1916;
    var skip_754976390 = start_754976385;
    Label2: {
      F.line = 1918;
        Label3: while (true) {
        if (!(subLast_754976389 <= subInt(last_754976388, skip_754976390))) break Label3;
          F.line = 1919;
          var i_754976391 = subLast_754976389;
          Label4: {
            F.line = 1920;
              Label5: while (true) {
              if (!(s_754976383[chckIndx(addInt(skip_754976390, i_754976391), 0, (s_754976383).length - 1)] == sub_754976384[chckIndx(i_754976391, 0, (sub_754976384).length - 1)])) break Label5;
                if ((i_754976391 == 0)) {
                F.line = 1922;
                result_754976387 = skip_754976390;
                break BeforeRet;
                }
                
                F.line = 1923;
                i_754976391 = subInt(i_754976391, 1);
              }
          };
          F.line = 1924;
          skip_754976390 = addInt(skip_754976390, a_754976382[chckIndx(s_754976383[chckIndx(addInt(skip_754976390, subLast_754976389), 0, (s_754976383).length - 1)], 0, (a_754976382).length - 1)]);
        }
    };
  };
  framePtr = F.prev;

  return result_754976387;

}

function nsuReplaceStr(s_754976592, sub_754976593, by_754976594) {
  var result_754976595 = [];

  var F = {procname: "strutils.replace", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2180;
    F.filename = "strutils.nim";
    result_754976595 = nimCopy(null, [], NTI33554449);
    F.line = 2181;
    var subLen_754976596 = (sub_754976593).length;
    if ((subLen_754976596 == 0)) {
    F.line = 2183;
    result_754976595 = nimCopy(null, s_754976592, NTI33554449);
    }
    else {
    if ((subLen_754976596 == 1)) {
    F.line = 2187;
    var c_754976597 = sub_754976593[chckIndx(0, 0, (sub_754976593).length - 1)];
    F.line = 2188;
    var last_754976598 = (s_754976592).length - 1;
    F.line = 2189;
    var i_754976599 = 0;
    Label1: {
      F.line = 2190;
        Label2: while (true) {
        if (!true) break Label2;
          F.line = 2191;
          var j_754976600 = nsuFindChar(s_754976592, c_754976597, chckRange(i_754976599, 0, 2147483647), last_754976598);
          if ((j_754976600 < 0)) {
          F.line = 2192;
          break Label1;
          }
          
          F.line = 2193;
          result_754976595.push.apply(result_754976595, substr_33558078(s_754976592, i_754976599, subInt(j_754976600, 1)));;
          F.line = 2194;
          result_754976595.push.apply(result_754976595, by_754976594);;
          F.line = 2195;
          i_754976599 = addInt(j_754976600, subLen_754976596);
        }
    };
    F.line = 2197;
    result_754976595.push.apply(result_754976595, substr_33558090(s_754976592, i_754976599));;
    }
    else {
      F.line = 2199;
      var a_754976601 = nsuInitNewSkipTable(sub_754976593);
      F.line = 2200;
      var last_754976602 = (s_754976592).length - 1;
      F.line = 2201;
      var i_754976603 = 0;
      Label3: {
        F.line = 2202;
          Label4: while (true) {
          if (!true) break Label4;
            F.line = 2203;
            var j_754976604 = nsuFindStrA(a_754976601, s_754976592, sub_754976593, chckRange(i_754976603, 0, 2147483647), last_754976602);
            if ((j_754976604 < 0)) {
            F.line = 2204;
            break Label3;
            }
            
            F.line = 2205;
            result_754976595.push.apply(result_754976595, substr_33558078(s_754976592, i_754976603, subInt(j_754976604, 1)));;
            F.line = 2206;
            result_754976595.push.apply(result_754976595, by_754976594);;
            F.line = 2207;
            i_754976603 = addInt(j_754976604, subLen_754976596);
          }
      };
      F.line = 2209;
      result_754976595.push.apply(result_754976595, substr_33558090(s_754976592, i_754976603));;
    }
    }
  framePtr = F.prev;

  return result_754976595;

}

function HEX5BHEX5D_754975999(s_754976002, x_754976003) {
  var result_754976004 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_754976006 = x_754976003.a;
    F.line = 84;
    var L_754976008 = addInt(subInt(x_754976003.b, a_754976006), 1);
    F.line = 85;
    result_754976004 = nimCopy(null, mnewString(chckRange(L_754976008, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_754976013 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536872913 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536872913 < L_754976008)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_754976013 = i_536872913;
            F.line = 86;
            result_754976004[chckIndx(i_754976013, 0, (result_754976004).length - 1)] = s_754976002[chckIndx(addInt(i_754976013, a_754976006), 0, (s_754976002).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536872913 = addInt(i_536872913, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_754976004;

}

function HEX2EHEX2E_973078576(a_973078579, b_973078580) {
  var result_973078581 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_973078581 = nimCopy(result_973078581, {a: a_973078579, b: b_973078580}, NTI805306437);
  framePtr = F.prev;

  return result_973078581;

}

function asSxpr_1275069001(node_1275069002) {

function renderAttrs_1275069648(node_1275069649) {
  var result_1275069650 = [];

  var F = {procname: "asSxpr.renderAttrs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 247;
    F.filename = "nodetree.nim";
    F.line = 247;
    var attrStrs_1275069707 = newSeq_503317028(chckRange(len_1275069702(attr_1275068604(node_1275069649)), 0, 2147483647));
    Label1: {
      F.line = 249;
      var i_1275069725 = (-1);
      Label2: {
        F.line = 248;
        var attr_1275070063 = [];
        F.line = 248;
        var value_1275070064 = [];
        F.line = 1695;
        F.filename = "tables.nim";
        var colontmp__536872881 = ({data: [], counter: 0, first: 0, last: 0});
        F.line = 248;
        F.filename = "nodetree.nim";
        colontmp__536872881 = nimCopy(colontmp__536872881, attr_1275068604(node_1275069649), NTI1275068431);
        F.line = 1721;
        F.filename = "tables.nim";
        var L_536872883 = len_1275069702(colontmp__536872881);
        if ((0 < colontmp__536872881.counter)) {
        F.line = 1303;
        var h_536872884 = colontmp__536872881.first;
        Label3: {
          F.line = 1304;
            Label4: while (true) {
            if (!(0 <= h_536872884)) break Label4;
              F.line = 1305;
              var nxt_536872886 = colontmp__536872881.data[chckIndx(h_536872884, 0, (colontmp__536872881.data).length - 1)].Field1;
              if (isFilled_1342177311(colontmp__536872881.data[chckIndx(h_536872884, 0, (colontmp__536872881.data).length - 1)].Field0)) {
              F.line = 249;
              F.filename = "nodetree.nim";
              attr_1275070063 = colontmp__536872881.data[chckIndx(h_536872884, 0, (colontmp__536872881.data).length - 1)].Field2;
              F.line = 249;
              value_1275070064 = colontmp__536872881.data[chckIndx(h_536872884, 0, (colontmp__536872881.data).length - 1)].Field3;
              F.line = 249;
              i_1275069725 = addInt(i_1275069725, 1);
              F.line = 249;
              Label5: {
                F.line = 249;
                var fmtRes_1275070074 = [mnewString(0)];
                F.line = 249;
                fmtRes_1275070074[0].push.apply(fmtRes_1275070074[0], [96,40]);;
                F.line = 249;
                formatValue_1207959723(fmtRes_1275070074, 0, attr_1275070063, []);
                F.line = 249;
                fmtRes_1275070074[0].push.apply(fmtRes_1275070074[0], [32,34]);;
                F.line = 249;
                formatValue_1207959723(fmtRes_1275070074, 0, value_1275070064, []);
                F.line = 249;
                fmtRes_1275070074[0].push.apply(fmtRes_1275070074[0], [34,41]);;
              };
              attrStrs_1275069707[chckIndx(i_1275069725, 0, (attrStrs_1275069707).length - 1)] = nimCopy(null, fmtRes_1275070074[0], NTI33554449);
              if (!((len_1275069702(colontmp__536872881) == L_536872883))) {
              F.line = 1724;
              F.filename = "tables.nim";
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim(1724, 11) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 1308;
              h_536872884 = nxt_536872886;
            }
        };
        }
        
      };
    };
    result_1275069650 = nimCopy(null, nsuJoinSep(attrStrs_1275069707, [32]), NTI33554449);
  framePtr = F.prev;

  return result_1275069650;

}
      
function opening_1275070075(node_1275070076) {
          var Temporary1;
          var Temporary2;

        var result_1275070077 = [];

        var F = {procname: "asSxpr.opening", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
          F.line = 253;
          F.filename = "nodetree.nim";
          if ((len_1275069702(attr_1275068604(node_1275070076)) == 0)) {
          if ((((node_1275070076.childrenSeq).length == 0) && (runeLen_1275068975(node_1275070076) < 60))) {
          Label3: {
            F.line = 255;
            var fmtRes_1275070133 = [mnewString(0)];
            F.line = 255;
            fmtRes_1275070133[0].push.apply(fmtRes_1275070133[0], [40]);;
            F.line = 255;
            formatValue_1207959723(fmtRes_1275070133, 0, node_1275070076.nameRef[0][node_1275070076.nameRef[1]], []);
            F.line = 255;
            fmtRes_1275070133[0].push.apply(fmtRes_1275070133[0], [32]);;
          };
          Temporary2 = fmtRes_1275070133[0];
          }
          else {
            Label4: {
              F.line = 257;
              var fmtRes_1275070138 = [mnewString(0)];
              F.line = 257;
              fmtRes_1275070138[0].push.apply(fmtRes_1275070138[0], [40]);;
              F.line = 257;
              formatValue_1207959723(fmtRes_1275070138, 0, node_1275070076.nameRef[0][node_1275070076.nameRef[1]], []);
              F.line = 649;
              F.filename = "strformat.nim";
              addChar(fmtRes_1275070138[0], 10);;
            };
          Temporary2 = fmtRes_1275070138[0];
          }
          
          Temporary1 = Temporary2;
          }
          else {
            Label5: {
              F.line = 259;
              F.filename = "nodetree.nim";
              var fmtRes_1275070143 = [mnewString(0)];
              F.line = 259;
              fmtRes_1275070143[0].push.apply(fmtRes_1275070143[0], [40]);;
              F.line = 259;
              formatValue_1207959723(fmtRes_1275070143, 0, node_1275070076.nameRef[0][node_1275070076.nameRef[1]], []);
              F.line = 259;
              fmtRes_1275070143[0].push.apply(fmtRes_1275070143[0], [32]);;
              F.line = 259;
              formatValue_1207959723(fmtRes_1275070143, 0, renderAttrs_1275069648(node_1275070076), []);
              F.line = 649;
              F.filename = "strformat.nim";
              addChar(fmtRes_1275070143[0], 10);;
            };
          Temporary1 = fmtRes_1275070143[0];
          }
          
          result_1275070077 = nimCopy(null, Temporary1, NTI33554449);
        framePtr = F.prev;

        return result_1275070077;

      }
      
function closing_1275070144(node_1275070145) {
        var result_1275070146 = [];

        var F = {procname: "asSxpr.closing", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
          F.line = 261;
          F.filename = "nodetree.nim";
          result_1275070146 = nimCopy(null, [41], NTI33554449);
        framePtr = F.prev;

        return result_1275070146;

      }
      
function leafdata_1275070147(node_1275070148) {
                var Temporary3;
                
function esc_1275070150(s_1275070151) {
                  var result_1275070152 = [];

                  var F = {procname: "leafdata.esc", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
                  framePtr = F;
                    F.line = 265;
                    F.filename = "nodetree.nim";
                    result_1275070152 = nimCopy(null, nsuReplaceStr(nsuReplaceStr(s_1275070151, [92], [92,92]), [34], [92,34]), NTI33554449);
                  framePtr = F.prev;

                  return result_1275070152;

                }

        var result_1275070149 = [];

        var F = {procname: "asSxpr.leafdata", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
        framePtr = F;
        BeforeRet: {
          if (!(((node_1275070148.childrenSeq).length == 0))) {
          F.line = 267;
          F.filename = "nodetree.nim";
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim(267, 5) `node.isLeaf` "));
          }
          
          F.line = 268;
          var L_1275070161 = runeLen_1275068975(node_1275070148);
          if ((60 <= L_1275070161)) {
          F.line = 270;
          var s_1275070162 = content_1275068478(node_1275070148);
          F.line = 272;
          var lines_1275070167 = [];
          F.line = 273;
          var i_1275070168 = 0;
          F.line = 274;
          var k_1275070169 = 0;
          Label1: {
            F.line = 275;
              Label2: while (true) {
              if (!(0 < L_1275070161)) break Label2;
                F.line = 276;
                if ((L_1275070161 < 60)) {
                Temporary3 = L_1275070161;
                }
                else {
                Temporary3 = 60;
                }
                
                k_1275070169 = runeOffset_956308676(s_1275070162, chckRange(addInt(((i_1275070168) | 0), Temporary3), 0, 2147483647), chckRange(i_1275070168, 0, 2147483647));
                if ((k_1275070169 <= i_1275070168)) {
                F.line = 277;
                break Label1;
                }
                
                F.line = 278;
                lines_1275070167.push([34].concat(esc_1275070150(HEX5BHEX5D_754975999(s_1275070162, HEX2EHEX2E_973078576(i_1275070168, subInt(k_1275070169, 1)))) || [],[34]));;
                F.line = 279;
                i_1275070168 = k_1275070169;
                F.line = 280;
                L_1275070161 = subInt(L_1275070161, 60);
              }
          };
          F.line = 281;
          result_1275070149 = nimCopy(null, lines_1275070167, NTI1275069564);
          break BeforeRet;
          }
          else {
            F.line = 283;
            result_1275070149 = nimCopy(null, [[34].concat(esc_1275070150(content_1275068478(node_1275070148)) || [],[34])], NTI1275069605);
            break BeforeRet;
          }
          
        };
        framePtr = F.prev;

        return result_1275070149;

      }

  var result_1275069647 = [];

  var F = {procname: "nodetree.asSxpr", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((node_1275069002 == null)) {
    F.line = 286;
    F.filename = "nodetree.nim";
    result_1275069647 = nimCopy(null, [110,105,108], NTI33554449);
    break BeforeRet;
    }
    else {
      F.line = 288;
      result_1275069647 = nimCopy(null, nsuJoinSep(serialize_1275069314(node_1275069002, opening_1275070075, closing_1275070144, leafdata_1275070147, 0), [10]), NTI33554449);
      break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_1275069647;

}

function toStringSlice_1275069181(str_1275069183) {
  var result_1275069184 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "toStringSlice.toStringSlice", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 66;
    F.filename = "strslice.nim";
    result_1275069184 = nimCopy(result_1275069184, str_1275069183, NTI1191182339);
  framePtr = F.prev;

  return result_1275069184;

}

function init_1275069170(node_1275069173, name_1275069174, name_1275069174_Idx, data_1275069175, attributes_1275069176) {
  var result_1275069177 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 28;
    F.filename = "nodetree.nim";
    node_1275069173.nameRef[0] = name_1275069174; node_1275069173.nameRef[1] = name_1275069174_Idx;
    F.line = 43;
    node_1275069173.textSlice = nimCopy(node_1275069173.textSlice, toStringSlice_1275069181(data_1275069175), NTI1191182339);
    F.line = 44;
    node_1275069173.attributesRef = attributes_1275069176;
    F.line = 45;
    node_1275069173.sourcePos = (-1);
    F.line = 46;
    result_1275069177 = node_1275069173;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1275069177;

}

function init_1275069234(node_1275069237, name_1275069238, name_1275069238_Idx, data_1275069239, attributes_1275069240) {
  var result_1275069241 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 28;
    F.filename = "nodetree.nim";
    node_1275069237.nameRef[0] = name_1275069238; node_1275069237.nameRef[1] = name_1275069238_Idx;
    F.line = 33;
    node_1275069237.childrenSeq = nimCopy(null, data_1275069239, NTI1275068441);
    F.line = 34;
    node_1275069237.textSlice = nimCopy(node_1275069237.textSlice, EmptyStringSlice_1191182395, NTI1191182339);
    F.line = 44;
    node_1275069237.attributesRef = attributes_1275069240;
    F.line = 45;
    node_1275069237.sourcePos = (-1);
    F.line = 46;
    result_1275069241 = node_1275069237;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1275069241;

}

function clone_1275069286(node_1275069287, newName_1275069288, newName_1275069288_Idx) {
    var Temporary1;

  var result_1275069289 = null;

  var F = {procname: "nodetree.clone", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    F.line = 194;
    F.filename = "nodetree.nim";
    if (((node_1275069287.childrenSeq).length == 0)) {
    Temporary1 = init_1275069170(new_1275069123(), newName_1275069288, newName_1275069288_Idx, node_1275069287.textSlice, null);
    }
    else {
    Temporary1 = init_1275069234(new_1275069123(), newName_1275069288, newName_1275069288_Idx, node_1275069287.childrenSeq, null);
    }
    
    result_1275069289 = Temporary1;
  framePtr = F.prev;

  return result_1275069289;

}

function init_1375735725(node_1375735728, name_1375735729, name_1375735729_Idx, data_1375735730, attributes_1375735731) {
  var result_1375735732 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 28;
    F.filename = "nodetree.nim";
    node_1375735728.nameRef[0] = name_1375735729; node_1375735728.nameRef[1] = name_1375735729_Idx;
    if (!((data_1375735730 == null))) {
    F.line = 37;
    var nonNilData_1375735739 = data_1375735730;
    F.line = 38;
    node_1375735728.childrenSeq = nimCopy(null, [nonNilData_1375735739], NTI1375732898);
    }
    
    F.line = 40;
    node_1375735728.textSlice = nimCopy(node_1375735728.textSlice, EmptyStringSlice_1191182395, NTI1191182339);
    F.line = 44;
    node_1375735728.attributesRef = attributes_1375735731;
    F.line = 45;
    node_1375735728.sourcePos = (-1);
    F.line = 46;
    result_1375735732 = node_1375735728;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375735732;

}

function init_1375735661(node_1375735664, name_1375735665, name_1375735665_Idx, data_1375735666, attributes_1375735667) {
  var result_1375735668 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 28;
    F.filename = "nodetree.nim";
    node_1375735664.nameRef[0] = name_1375735665; node_1375735664.nameRef[1] = name_1375735665_Idx;
    F.line = 43;
    node_1375735664.textSlice = nimCopy(node_1375735664.textSlice, toStringSlice_1375731983(data_1375735666), NTI1191182339);
    F.line = 44;
    node_1375735664.attributesRef = attributes_1375735667;
    F.line = 45;
    node_1375735664.sourcePos = (-1);
    F.line = 46;
    result_1375735668 = node_1375735664;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375735668;

}

function returnItemFlatten_1375731992(parser_1375731993, node_1375731994) {
  var result_1375735710 = null;

  var F = {procname: "parse.returnItemFlatten", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((node_1375731994 == null))) {
    if ((parser_1375731993.flags[7] != undefined)) {
    if ((parser_1375731993.flags[9] != undefined)) {
    F.line = 676;
    F.filename = "parse.nim";
    result_1375735710 = EmptyNode_1375731991;
    break BeforeRet;
    }
    
    F.line = 677;
    result_1375735710 = node_1375731994;
    break BeforeRet;
    }
    
    if ((((node_1375731994.nameRef[0][node_1375731994.nameRef[1]]).length == 0) || (node_1375731994.nameRef[0][node_1375731994.nameRef[1]][chckIndx(0, 0, (node_1375731994.nameRef[0][node_1375731994.nameRef[1]]).length - 1)] == 58))) {
    F.line = 679;
    result_1375735710 = clone_1275069286(node_1375731994, parser_1375731993.nodeName[0], parser_1375731993.nodeName[1]);
    break BeforeRet;
    }
    
    F.line = 680;
    result_1375735710 = init_1375735725(new_1275069123(), parser_1375731993.nodeName[0], parser_1375731993.nodeName[1], node_1375731994, null);
    break BeforeRet;
    }
    else {
    if ((parser_1375731993.flags[7] != undefined)) {
    F.line = 682;
    result_1375735710 = EmptyNode_1375731991;
    break BeforeRet;
    }
    }
    F.line = 683;
    result_1375735710 = init_1375735661(new_1275069123(), parser_1375731993.nodeName[0], parser_1375731993.nodeName[1], [], null);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375735710;

}

function returnSeqFlatten_1375731995(parser_1375731996, nodes_1375731997) {
  var result_1375735761 = null;

  var F = {procname: "parse.returnSeqFlatten", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((parser_1375731996.flags[9] != undefined)) {
    F.line = 687;
    F.filename = "parse.nim";
    result_1375735761 = EmptyNode_1375731991;
    break BeforeRet;
    }
    
    F.line = 688;
    var N_1375735769 = (nodes_1375731997).length;
    if ((1 < N_1375735769)) {
    F.line = 690;
    var res_1375735774 = [];
    Label1: {
      F.line = 691;
      var child_1375735778 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872928 = 0;
      F.line = 242;
      var L_536872929 = (nodes_1375731997).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536872928 < L_536872929)) break Label3;
            F.line = 691;
            F.filename = "parse.nim";
            child_1375735778 = nodes_1375731997[chckIndx(i_536872928, 0, (nodes_1375731997).length - 1)];
            F.line = 692;
            var anonymous_1375735779 = (((child_1375735778.nameRef[0][child_1375735778.nameRef[1]]).length == 0) || (child_1375735778.nameRef[0][child_1375735778.nameRef[1]][chckIndx(0, 0, (child_1375735778.nameRef[0][child_1375735778.nameRef[1]]).length - 1)] == 58));
            if ((!(((child_1375735778.childrenSeq).length == 0)) && anonymous_1375735779)) {
            Label4: {
              F.line = 694;
              var item_1375735786 = null;
              F.line = 241;
              F.filename = "iterators.nim";
              var i_536872925 = 0;
              F.line = 242;
              var L_536872926 = (child_1375735778.childrenSeq).length;
              Label5: {
                F.line = 243;
                  Label6: while (true) {
                  if (!(i_536872925 < L_536872926)) break Label6;
                    F.line = 694;
                    F.filename = "parse.nim";
                    item_1375735786 = child_1375735778.childrenSeq[chckIndx(i_536872925, 0, (child_1375735778.childrenSeq).length - 1)];
                    F.line = 694;
                    res_1375735774.push(item_1375735786);;
                    F.line = 245;
                    F.filename = "iterators.nim";
                    i_536872925 = addInt(i_536872925, 1);
                    if (!(((child_1375735778.childrenSeq).length == L_536872926))) {
                    F.line = 246;
                    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              };
            };
            }
            else {
            if ((!((((child_1375735778.childrenSeq).length == 0) && (len_1191182481(child_1375735778.textSlice) == 0))) || !(anonymous_1375735779))) {
            F.line = 697;
            F.filename = "parse.nim";
            res_1375735774.push(child_1375735778);;
            }
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872928 = addInt(i_536872928, 1);
            if (!(((nodes_1375731997).length == L_536872929))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (((0 < (res_1375735774).length) || !((parser_1375731996.flags[7] != undefined)))) {
    F.line = 699;
    F.filename = "parse.nim";
    result_1375735761 = init_1275069234(new_1275069123(), parser_1375731996.nodeName[0], parser_1375731996.nodeName[1], res_1375735774, null);
    break BeforeRet;
    }
    else {
      F.line = 701;
      result_1375735761 = EmptyNode_1375731991;
      break BeforeRet;
    }
    
    }
    else {
    if ((N_1375735769 == 1)) {
    F.line = 703;
    result_1375735761 = parser_1375731996.grammarVar.returnItem(parser_1375731996, nodes_1375731997[chckIndx(0, 0, (nodes_1375731997).length - 1)]);
    break BeforeRet;
    }
    }
    if ((parser_1375731996.flags[7] != undefined)) {
    F.line = 705;
    result_1375735761 = EmptyNode_1375731991;
    break BeforeRet;
    }
    
    F.line = 706;
    result_1375735761 = init_1375735661(new_1275069123(), parser_1375731996.nodeName[0], parser_1375731996.nodeName[1], [], null);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375735761;

}

function grammar_1375733213(parser_1375733214) {
  var result_1375733215 = null;

  var F = {procname: "parse.grammar", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 405;
    F.filename = "parse.nim";
    if (!(!((parser_1375733214.grammarVar == GrammarPlaceholder_1375732179)))) {
    F.line = 405;
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(405, 3) `parser.grammarVar != GrammarPlaceholder` ") || []).concat(HEX24_1375733037(parser_1375733214) || []));
    }
    
    result_1375733215 = parser_1375733214.grammarVar;
  framePtr = F.prev;

  return result_1375733215;

}

function collect_descendants_1375733121(parser_1375733122, selector_1375733123, descs_1375733124, descs_1375733124_Idx) {
  var F = {procname: "parse.collect_descendants", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!((!((parser_1375733122.flags[6] != undefined)) || (0 < (parser_1375733122.subParsers).length)))) {
    F.line = 331;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(331, 5) `isForward notin parser.flags or parser.subParsers.len > 0` "));
    }
    
    if (!((parser_1375733122.flags[10] != undefined))) {
    F.line = 333;
    parser_1375733122.flags[10] = true;
    F.line = 334;
    descs_1375733124[descs_1375733124_Idx].push(parser_1375733122);;
    F.line = 335;
    var subIter_1375733149 = selector_1375733123;
    Label1: {
      F.line = 336;
      var p_1375733153 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__536872932 = [];
      F.line = 336;
      F.filename = "parse.nim";
      colontmp__536872932 = subIter_1375733149(parser_1375733122);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872933 = 0;
      F.line = 242;
      var L_536872934 = (colontmp__536872932).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536872933 < L_536872934)) break Label3;
            F.line = 336;
            F.filename = "parse.nim";
            p_1375733153 = colontmp__536872932[chckIndx(i_536872933, 0, (colontmp__536872932).length - 1)];
            F.line = 336;
            collect_descendants_1375733121(p_1375733153, selector_1375733123, descs_1375733124, descs_1375733124_Idx);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872933 = addInt(i_536872933, 1);
            if (!(((colontmp__536872932).length == L_536872934))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  framePtr = F.prev;

  
}

function descendants_1375733169(parser_1375733170, selector_1375733171) {
  var result_1375733172 = [];

  var F = {procname: "parse.descendants", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 340;
    F.filename = "parse.nim";
    var descs_1375733177 = [[]];
    F.line = 341;
    collect_descendants_1375733121(parser_1375733170, selector_1375733171, descs_1375733177, 0);
    F.line = 342;
    result_1375733172 = nimCopy(null, descs_1375733177[0], NTI1375732584);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733172;

}

function refdSubs_1375733088(parser_1375733089) {
  var result_1375733090 = [];

  var F = {procname: "parse.refdSubs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 321;
    F.filename = "parse.nim";
    result_1375733090 = nimCopy(null, refdParsers_1375733060(parser_1375733089), NTI1375732492);
  framePtr = F.prev;

  return result_1375733090;

}

function resetTraversalTracker_1375733194(parser_1375733195) {
  var F = {procname: "parse.resetTraversalTracker", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if ((parser_1375733195.flags[10] != undefined)) {
    F.line = 369;
    F.filename = "parse.nim";
    delete parser_1375733195.flags[10];
    Label1: {
      F.line = 370;
      var p_1375733207 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__536872937 = [];
      F.line = 370;
      F.filename = "parse.nim";
      colontmp__536872937 = refdParsers_1375733060(parser_1375733195);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872938 = 0;
      F.line = 242;
      var L_536872939 = (colontmp__536872937).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536872938 < L_536872939)) break Label3;
            F.line = 370;
            F.filename = "parse.nim";
            p_1375733207 = colontmp__536872937[chckIndx(i_536872938, 0, (colontmp__536872937).length - 1)];
            F.line = 370;
            resetTraversalTracker_1375733194(p_1375733207);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872938 = addInt(i_536872938, 1);
            if (!(((colontmp__536872937).length == L_536872939))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  framePtr = F.prev;

  
}

function replace_1191182734(slice_1191182735, pattern_1191182736, replacement_1191182737) {
  var result_1191182738 = null;

  var F = {procname: "strslice.replace", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 259;
    F.filename = "strslice.nim";
    result_1191182738 = toJSStr(HEX24_1191182400(slice_1191182735)).replace(pattern_1191182736.Field1, toJSStr(replacement_1191182737));
  framePtr = F.prev;

  return result_1191182738;

}

function cut_1191182492(str_1191182493, start_1191182494, stop_1191182495) {
    var Temporary1;

  var result_1191182496 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "strslice.cut", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 94;
    F.filename = "strslice.nim";
    if ((((stop_1191182495 < start_1191182494) || (stop_1191182495 < 0)) || (str_1191182493.Field2 < start_1191182494))) {
    Temporary1 = {Field0: [EmptyStringSlice_1191182395.Field0[0], EmptyStringSlice_1191182395.Field0[1]], Field1: 0, Field2: (-1)};
    }
    else {
    Temporary1 = {Field0: [str_1191182493.Field0[0], str_1191182493.Field0[1]], Field1: nimMax(start_1191182494, 0), Field2: nimMin(stop_1191182495, str_1191182493.Field2)};
    }
    
    result_1191182496 = nimCopy(result_1191182496, Temporary1, NTI1191182339);
  framePtr = F.prev;

  return result_1191182496;

}

function index_1191182488(str_1191182489, i_1191182490) {
  var result_1191182491 = 0;

  var F = {procname: "strslice.index", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 91;
    F.filename = "strslice.nim";
    result_1191182491 = addInt(str_1191182489.Field1, i_1191182490);
  framePtr = F.prev;

  return result_1191182491;

}

function cut_1191182497(str_1191182498, slc_1191182501) {
  var result_1191182502 = {Field0: [null, 0], Field1: 0, Field2: 0};

  var F = {procname: "strslice.cut", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
    F.line = 100;
    F.filename = "strslice.nim";
    result_1191182502 = nimCopy(result_1191182502, cut_1191182492(str_1191182498, index_1191182488(str_1191182498, slc_1191182501.a), index_1191182488(str_1191182498, slc_1191182501.b)), NTI1191182339);
  framePtr = F.prev;

  return result_1191182502;

}

function name_1375732769(parser_1375732770) {
    var Temporary1;

  var result_1375732771 = [];

  var F = {procname: "parse.name", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 238;
    F.filename = "parse.nim";
    if (((parser_1375732770.flags[6] != undefined) && (0 < (parser_1375732770.subParsers).length))) {
    Temporary1 = parser_1375732770.subParsers[chckIndx(0, 0, (parser_1375732770.subParsers).length - 1)].pname;
    }
    else {
    Temporary1 = parser_1375732770.pname;
    }
    
    result_1375732771 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_1375732771;

}

function init_1241514008(error_1241514009, message_1241514010, pos_1241514011, code_1241514012, line_1241514013, column_1241514014, length_1241514015, related_1241514020, origPos_1241514021, origDoc_1241514022) {
  var result_1241514023 = null;

  var F = {procname: "error.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((0 <= pos_1241514011))) {
    F.line = 43;
    F.filename = "error.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim(43, 5) `pos >= 0` "));
    }
    
    F.line = 44;
    error_1241514009.message = nimCopy(null, message_1241514010, NTI33554449);
    F.line = 45;
    error_1241514009.pos = pos_1241514011;
    F.line = 46;
    error_1241514009.code = code_1241514012;
    F.line = 47;
    error_1241514009.line = line_1241514013;
    F.line = 48;
    error_1241514009.column = column_1241514014;
    F.line = 49;
    error_1241514009.length = length_1241514015;
    F.line = 50;
    error_1241514009.related = nimCopy(null, related_1241514020, NTI1241514002);
    F.line = 51;
    error_1241514009.origPos = origPos_1241514021;
    F.line = 52;
    error_1241514009.origDoc = nimCopy(null, origDoc_1241514022, NTI33554449);
    F.line = 53;
    result_1241514023 = error_1241514009;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1241514023;

}

function new_1375733368() {
  var result_1375733371 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_1375733373 = null;
    F.line = 839;
    r_1375733373 = ({message: [], pos: 0, code: 0, line: 0, column: 0, length: 0, related: [], origPos: 0, origDoc: []});
    F.line = 840;
    result_1375733371 = r_1375733373;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733371;

}

function HEX28HEX29_536870978(parser_536870980, document_536870981, location_536870982) {
  var result_536870983 = {Field0: null, Field1: []};

  var F = {procname: "().()", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((parser_536870980.grammarVar == GrammarPlaceholder_1375732179)) {
    F.line = 642;
    F.filename = "parse.nim";
    grammarHEX3D_1375733262(parser_536870980, init_1375732066(new_1375732140(), [97,100,104,111,99], ConstSet12, toStringSlice_1375731983(document_536870981), returnItemFlatten_1375731992, returnSeqFlatten_1375731995));
    }
    else {
      F.line = 644;
      grammar_1375733213(parser_536870980).document = nimCopy(grammar_1375733213(parser_536870980).document, toStringSlice_1375731983(document_536870981), NTI1191182339);
      F.line = 645;
      cleanUp_1375732004(grammar_1375733213(parser_536870980));
    }
    
    F.line = 646;
    grammar_1375733213(parser_536870980).root = parser_536870980;
    Label1: {
      F.line = 647;
      var p_536871000 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__536872916 = [];
      F.line = 376;
      F.filename = "parse.nim";
      colontmp__536872916 = descendants_1375733169(parser_536870980, refdSubs_1375733088);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872917 = 0;
      F.line = 242;
      var L_536872918 = (colontmp__536872916).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536872917 < L_536872918)) break Label3;
            F.line = 376;
            F.filename = "parse.nim";
            p_536871000 = colontmp__536872916[chckIndx(i_536872917, 0, (colontmp__536872916).length - 1)];
            F.line = 376;
            cleanUp_1375732673(p_536871000);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872917 = addInt(i_536872917, 1);
            if (!(((colontmp__536872916).length == L_536872918))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 378;
    F.filename = "parse.nim";
    resetTraversalTracker_1375733194(parser_536870980);
    F.line = 649;
    var tmpTuple_536871001 = parser_536870980.call(parser_536870980, location_536870982);
    F.line = 649;
    var root_536871002 = tmpTuple_536871001["Field0"];
    F.line = 649;
    var loc_536871003 = tmpTuple_536871001["Field1"];
    if (((root_536871002 == null) || (loc_536871003 < (((document_536870981).length) | 0)))) {
    F.line = 651;
    var snippet_536871015 = cstrToNimstr(replace_1191182734(cut_1191182497(grammar_1375733213(parser_536870980).document, HEX2EHEX2E_1191182403(loc_536871003, addInt(loc_536871003, 9))), ure_1375731737([92,110]), [92,110]));
    F.line = 652;
    Label4: {
      F.line = 652;
      var fmtRes_536871020 = [mnewString(0)];
      F.line = 652;
      fmtRes_536871020[0].push.apply(fmtRes_536871020[0], [80,97,114,115,101,114,32]);;
      F.line = 652;
      formatValue_1207959723(fmtRes_536871020, 0, name_1375732769(parser_536870980), []);
      F.line = 652;
      fmtRes_536871020[0].push.apply(fmtRes_536871020[0], [32,115,116,111,112,112,101,100,32,98,101,102,111,114,101,32,101,110,100,32,97,116,32,194,187]);;
      F.line = 652;
      formatValue_1207959723(fmtRes_536871020, 0, snippet_536871015, []);
      F.line = 652;
      fmtRes_536871020[0].push.apply(fmtRes_536871020[0], [194,171]);;
    };
    var msg_536871021 = nimCopy(null, fmtRes_536871020[0], NTI33554449);
    F.line = 653;
    grammar_1375733213(parser_536870980).errors.push(init_1241514008(new_1375733368(), msg_536871021, loc_536871003, 1040, (-1), (-1), (-1), [], (-1), []));;
    }
    
    F.line = 654;
    var colontmp__536872921 = root_536871002;
    F.line = 654;
    var colontmp__536872922 = nimCopy(null, grammar_1375733213(parser_536870980).errors, NTI1375731777);
    F.line = 654;
    result_536870983 = nimCopy(result_536870983, {Field0: colontmp__536872921, Field1: nimCopy(null, colontmp__536872922, NTI1375731777)}, NTI1375731758);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_536870983;

}

function HEX5BHEX5D_1375733823(s_1375733825, i_1375733826) {
  var result_1375733827 = null;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_1375733827 = s_1375733825[chckIndx(subInt((s_1375733825).length, i_1375733826), 0, (s_1375733825).length - 1)];
  framePtr = F.prev;

  return result_1375733827;

}

function pop_1375733848(s_1375733850, s_1375733850_Idx) {
  var result_1375733851 = {Field0: 0, Field1: null};

  var F = {procname: "pop.pop", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1696;
    F.filename = "system.nim";
    var L_1375733855 = subInt((s_1375733850[s_1375733850_Idx]).length, 1);
    F.line = 1701;
    result_1375733851 = nimCopy(result_1375733851, s_1375733850[s_1375733850_Idx][chckIndx(L_1375733855, 0, (s_1375733850[s_1375733850_Idx]).length - 1)], NTI1375731772);
    F.line = 1702;
    if (s_1375733850[s_1375733850_Idx].length < chckRange(L_1375733855, 0, 2147483647)) { for (var i = s_1375733850[s_1375733850_Idx].length ; i < chckRange(L_1375733855, 0, 2147483647) ; ++i) s_1375733850[s_1375733850_Idx].push({Field0: 0, Field1: null}); }
               else { s_1375733850[s_1375733850_Idx].length = chckRange(L_1375733855, 0, 2147483647); };
  framePtr = F.prev;

  return result_1375733851;

}

function rollback_1375733815(grammar_1375733816, location_1375733817) {
  var F = {procname: "parse.rollback", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 586;
    F.filename = "parse.nim";
    var rb_1375733818 = {Field0: 0, Field1: null};
    if (((0 < (grammar_1375733816.rollbackStack).length) && (location_1375733817 <= HEX5BHEX5D_1375733823(grammar_1375733816.rollbackStack, 1).Field0))) {
    F.line = 588;
    rb_1375733818 = nimCopy(rb_1375733818, pop_1375733848(grammar_1375733816, "rollbackStack"), NTI1375731772);
    F.line = 589;
    rb_1375733818.Field1();
    if ((0 < (grammar_1375733816.rollbackStack).length)) {
    F.line = 591;
    grammar_1375733816.rollbackLocation = HEX5BHEX5D_1375733823(grammar_1375733816.rollbackStack, 1).Field0;
    }
    else {
      F.line = 593;
      grammar_1375733816.rollbackLocation = (-2);
    }
    
    }
    
  framePtr = F.prev;

  
}

function hasJsBigInt_872415275() {
  var result_872415276 = false;

    result_872415276 = typeof BigInt != 'undefined'

  return result_872415276;

}

function hiXorLoJs_1107296341(a_1107296342, b_1107296343) {
  var result_1107296344 = 0n;

  var F = {procname: "hashes.hiXorLoJs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 140;
    F.filename = "hashes.nim";
    var prod_1107296345 = (a_1107296342 * b_1107296343);
    F.line = 141;
    var mask_1107296346 = BigInt("0xffffffffffffffff");
    F.line = 142;
    result_1107296344 = ((prod_1107296345 >> BigInt("64")) ^ (prod_1107296345 & mask_1107296346));
  framePtr = F.prev;

  return result_1107296344;

}

function hashWangYi1_1107296449(x_1107296451) {
  var result_1107296452 = 0;

  var F = {procname: "hashWangYi1.hashWangYi1", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    if (hasJsBigInt_872415275()) {
    F.line = 182;
    F.filename = "hashes.nim";
    F.line = 146;
    var P0HEX60gensym6_1107296471 = BigInt("0xa0761d6478bd642f");
    F.line = 147;
    var P1HEX60gensym6_1107296472 = BigInt("0xe7037ed1a0b428db");
    F.line = 148;
    var P58HEX60gensym6_1107296473 = BigInt("0xeb44accab455d16d");
    F.line = 149;
    var resHEX60gensym6_1107296474 = hiXorLoJs_1107296341(hiXorLoJs_1107296341(P0HEX60gensym6_1107296471, (BigInt(x_1107296451) ^ P1HEX60gensym6_1107296472)), P58HEX60gensym6_1107296473);
    result_1107296452 = Number((() => { const i = resHEX60gensym6_1107296474, b = 32; return BigInt.asIntN(b, i) })());
    }
    else {
      F.line = 184;
      result_1107296452 = (Number(BigInt.asIntN(32, x_1107296451)) & Number(BigInt.asIntN(32, 4294967295n)));
    }
    
  framePtr = F.prev;

  return result_1107296452;

}

function hash_1107296441(x_1107296443) {
  var result_1107296444 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 214;
    F.filename = "hashes.nim";
    result_1107296444 = hashWangYi1_1107296449(BigInt.asUintN(64, BigInt(x_1107296443)));
  framePtr = F.prev;

  return result_1107296444;

}

function nextTry_1342177314(h_1342177315, maxHash_1342177316) {
  var result_1342177317 = 0;

  var F = {procname: "tables.nextTry", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "hashcommon.nim";
    result_1342177317 = (addInt(h_1342177315, 1) & maxHash_1342177316);
  framePtr = F.prev;

  return result_1342177317;

}

function rawGet_1375733955(t_1375733958, key_1375733959, hc_1375733960, hc_1375733960_Idx) {
  var result_1375733961 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 59;
    F.filename = "hashcommon.nim";
    hc_1375733960[hc_1375733960_Idx] = hash_1107296441(key_1375733959);
    if ((hc_1375733960[hc_1375733960_Idx] == 0)) {
    F.line = 61;
    hc_1375733960[hc_1375733960_Idx] = 314159265;
    }
    
    if (((t_1375733958.data).length == 0)) {
    F.line = 43;
    result_1375733961 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_1375734026 = (hc_1375733960[hc_1375733960_Idx] & (t_1375733958.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1342177311(t_1375733958.data[chckIndx(h_1375734026, 0, (t_1375733958.data).length - 1)].Field0)) break Label2;
          if (((t_1375733958.data[chckIndx(h_1375734026, 0, (t_1375733958.data).length - 1)].Field0 == hc_1375733960[hc_1375733960_Idx]) && (t_1375733958.data[chckIndx(h_1375734026, 0, (t_1375733958.data).length - 1)].Field1 == key_1375733959))) {
          F.line = 51;
          result_1375733961 = h_1375734026;
          break BeforeRet;
          }
          
          F.line = 52;
          h_1375734026 = nextTry_1342177314(h_1375734026, (t_1375733958.data).length - 1);
        }
    };
    F.line = 53;
    result_1375733961 = subInt((-1), h_1375734026);
  };
  framePtr = F.prev;

  return result_1375733961;

}

function hasKey_1375733948(t_1375733951, key_1375733952) {
  var result_1375733953 = false;

  var F = {procname: "hasKey.hasKey", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 372;
    F.filename = "tables.nim";
    var hc_1375733954 = [0];
    F.line = 373;
    result_1375733953 = (0 <= rawGet_1375733955(t_1375733951, key_1375733952, hc_1375733954, 0));
  framePtr = F.prev;

  return result_1375733953;

}

function contains_1375733942(t_1375733945, key_1375733946) {
  var result_1375733947 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 383;
    F.filename = "tables.nim";
    result_1375733947 = hasKey_1375733948(t_1375733945, key_1375733946);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733947;

}

function raiseKeyError_1375734344(key_1375734346) {
  var F = {procname: "raiseKeyError.raiseKeyError", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 235;
    F.filename = "tables.nim";
    raiseException({message: ([107,101,121,32,110,111,116,32,102,111,117,110,100,58,32] || []).concat(HEX24_369098760(key_1375734346) || []), parent: null, m_type: NTI134217747, name: null, trace: [], up: null}, "KeyError");
  framePtr = F.prev;

  
}

function HEX5BHEX5D_1375734273(t_1375734276, key_1375734277) {
  var result_1375734278 = null;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 243;
    F.filename = "tables.nim";
    var hcHEX60gensym22_1375734279 = [0];
    F.line = 244;
    var indexHEX60gensym22_1375734286 = rawGet_1375733955(t_1375734276, key_1375734277, hcHEX60gensym22_1375734279, 0);
    if ((0 <= indexHEX60gensym22_1375734286)) {
    F.line = 245;
    result_1375734278 = t_1375734276.data[chckIndx(indexHEX60gensym22_1375734286, 0, (t_1375734276.data).length - 1)].Field2;
    }
    else {
      F.line = 247;
    raiseKeyError_1375734344(key_1375734277);
    }
    
  framePtr = F.prev;

  return result_1375734278;

}

function isNimException_33556443() {
    return lastJSError && lastJSError.m_type;

  
}

function getCurrentException() {
  var result_33556446 = null;

    if (isNimException_33556443()) {
    result_33556446 = lastJSError;
    }
    

  return result_33556446;

}

function mkDigit_1207959557(v_1207959558, typ_1207959559) {
      var Temporary1;

  var result_1207959560 = [];

  var F = {procname: "strformat.mkDigit", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    if (!((v_1207959558 < 26))) {
    F.line = 324;
    F.filename = "strformat.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim(324, 9) `v < 26` "));
    }
    
    if ((v_1207959558 < 10)) {
    F.line = 326;
    result_1207959560 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_1207959558), 0, 255)), NTI33554449);
    }
    else {
      F.line = 328;
      if ((typ_1207959559 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_1207959560 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Temporary1, v_1207959558), 10), 0, 255)), NTI33554449);
    }
    
  framePtr = F.prev;

  return result_1207959560;

}

function formatInt_1241514088(n_1241514090, radix_1241514091, spec_1241514092) {
    var Temporary1;

  var result_1241514093 = [];

  var F = {procname: "formatInt.formatInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 370;
    F.filename = "strformat.nim";
    var n_1241514096 = BigInt(n_1241514090);
    F.line = 371;
    var negative_1241514097 = (n_1241514096 < 0n);
    F.line = 372;
    if (negative_1241514097) {
    Temporary1 = BigInt.asUintN(64, (BigInt.asUintN(64, ~(n_1241514096)) + 1n));
    }
    else {
    Temporary1 = BigInt.asUintN(64, n_1241514096);
    }
    
    var v_1241514098 = Temporary1;
    F.line = 379;
    var xx_1241514099 = [];
    if (spec_1241514092.alternateForm) {
    F.line = 381;
    switch (spec_1241514092.typ) {
    case 88:
      F.line = 382;
      xx_1241514099 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 120:
      F.line = 383;
      xx_1241514099 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 98:
      F.line = 384;
      xx_1241514099 = nimCopy(null, [48,98], NTI33554449);
      break;
    case 111:
      F.line = 385;
      xx_1241514099 = nimCopy(null, [48,111], NTI33554449);
      break;
    default: 
      break;
    }
    }
    
    if ((v_1241514098 == 0n)) {
    F.line = 389;
    result_1241514093 = nimCopy(null, [48], NTI33554449);
    }
    else {
      F.line = 391;
      result_1241514093 = nimCopy(null, [], NTI33554449);
      Label2: {
        F.line = 392;
          Label3: while (true) {
          if (!(0n < v_1241514098)) break Label3;
            F.line = 393;
            var d_1241514100 = (v_1241514098 % BigInt.asUintN(64, BigInt(radix_1241514091)));
            F.line = 394;
            v_1241514098 = BigInt.asUintN(64, (v_1241514098 / BigInt.asUintN(64, BigInt(radix_1241514091))));
            F.line = 395;
            result_1241514093.push.apply(result_1241514093, mkDigit_1207959557(chckRange(Number(d_1241514100), (-2147483648), 2147483647), spec_1241514092.typ));;
          }
      };
      Label4: {
        F.line = 396;
        var idx_1241514105 = 0;
        F.line = 117;
        F.filename = "iterators_1.nim";
        var colontmp__536872952 = 0;
        F.line = 396;
        F.filename = "strformat.nim";
        colontmp__536872952 = divInt((result_1241514093).length, 2);
        F.line = 119;
        F.filename = "iterators_1.nim";
        var i_536872953 = 0;
        Label5: {
          F.line = 120;
            Label6: while (true) {
            if (!(i_536872953 < colontmp__536872952)) break Label6;
              F.line = 396;
              F.filename = "strformat.nim";
              idx_1241514105 = i_536872953;
              F.line = 396;
              var Temporary7 = result_1241514093[chckIndx(idx_1241514105, 0, (result_1241514093).length - 1)]; result_1241514093[chckIndx(idx_1241514105, 0, (result_1241514093).length - 1)] = result_1241514093[chckIndx(subInt(subInt((result_1241514093).length, idx_1241514105), 1), 0, (result_1241514093).length - 1)]; result_1241514093[chckIndx(subInt(subInt((result_1241514093).length, idx_1241514105), 1), 0, (result_1241514093).length - 1)] = Temporary7;              F.line = 122;
              F.filename = "iterators_1.nim";
              i_536872953 = addInt(i_536872953, 1);
            }
        };
      };
    }
    
    if (spec_1241514092.padWithZero) {
    F.line = 399;
    F.filename = "strformat.nim";
    var sign_1241514110 = (negative_1241514097 || !((spec_1241514092.sign == 45)));
    F.line = 400;
    var toFill_1241514114 = subInt(subInt(subInt(spec_1241514092.minimumWidth, (result_1241514093).length), (xx_1241514099).length), (sign_1241514110 ? 1 : 0));
    if ((0 < toFill_1241514114)) {
    F.line = 402;
    result_1241514093 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_1241514114, 0, 2147483647)) || []).concat(result_1241514093 || []), NTI33554449);
    }
    
    }
    
    if (negative_1241514097) {
    F.line = 405;
    result_1241514093 = nimCopy(null, ([45] || []).concat(xx_1241514099 || [],result_1241514093 || []), NTI33554449);
    }
    else {
    if (!((spec_1241514092.sign == 45))) {
    F.line = 407;
    result_1241514093 = nimCopy(null, [spec_1241514092.sign].concat(xx_1241514099 || [],result_1241514093 || []), NTI33554449);
    }
    else {
      F.line = 409;
      result_1241514093 = nimCopy(null, (xx_1241514099 || []).concat(result_1241514093 || []), NTI33554449);
    }
    }
    if ((spec_1241514092.align == 60)) {
    Label8: {
      F.line = 412;
      var i_1241514119 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__536872956 = 0;
      F.line = 412;
      F.filename = "strformat.nim";
      colontmp__536872956 = (result_1241514093).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536872957 = colontmp__536872956;
      Label9: {
        F.line = 120;
          Label10: while (true) {
          if (!(i_536872957 < spec_1241514092.minimumWidth)) break Label10;
            F.line = 412;
            F.filename = "strformat.nim";
            i_1241514119 = i_536872957;
            F.line = 412;
            addChar(result_1241514093, spec_1241514092.fill);;
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536872957 = addInt(i_536872957, 1);
          }
      };
    };
    }
    else {
      F.line = 415;
      F.filename = "strformat.nim";
      var toFill_1241514120 = subInt(spec_1241514092.minimumWidth, (result_1241514093).length);
      if ((spec_1241514092.align == 94)) {
      F.line = 417;
      var half_1241514121 = divInt(toFill_1241514120, 2);
      F.line = 418;
      result_1241514093 = nimCopy(null, (nsuRepeatChar(spec_1241514092.fill, chckRange(half_1241514121, 0, 2147483647)) || []).concat(result_1241514093 || [],nsuRepeatChar(spec_1241514092.fill, chckRange(subInt(toFill_1241514120, half_1241514121), 0, 2147483647)) || []), NTI33554449);
      }
      else {
        if ((0 < toFill_1241514120)) {
        F.line = 421;
        result_1241514093 = nimCopy(null, (nsuRepeatChar(spec_1241514092.fill, chckRange(toFill_1241514120, 0, 2147483647)) || []).concat(result_1241514093 || []), NTI33554449);
        }
        
      }
      
    }
    
  framePtr = F.prev;

  return result_1241514093;

}

function formatValue_1241514080(result_1241514082, result_1241514082_Idx, value_1241514083, specifier_1241514084) {
  var F = {procname: "formatValue.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((specifier_1241514084).length == 0)) {
    F.line = 481;
    F.filename = "strformat.nim";
    result_1241514082[result_1241514082_Idx].push.apply(result_1241514082[result_1241514082_Idx], HEX24_369098760(((value_1241514083) | 0)));;
    F.line = 482;
    break BeforeRet;
    }
    
    F.line = 483;
    var spec_1241514085 = parseStandardFormatSpecifier_1207959610(specifier_1241514084, 0, false);
    F.line = 484;
    var radix_1241514086 = 10;
    F.line = 485;
    switch (spec_1241514085.typ) {
    case 120:
    case 88:
      F.line = 486;
      radix_1241514086 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      F.line = 488;
      radix_1241514086 = 2;
      break;
    case 111:
      F.line = 489;
      radix_1241514086 = 8;
      break;
    default: 
      F.line = 491;
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_1241514085.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    F.line = 494;
    result_1241514082[result_1241514082_Idx].push.apply(result_1241514082[result_1241514082_Idx], formatInt_1241514088(value_1241514083, radix_1241514086, spec_1241514085));;
  };
  framePtr = F.prev;

  
}

function addInt_301990080(result_301990081, result_301990081_Idx, x_301990082) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 89;
    F.filename = "digitsutils.nim";
    addChars_301990086(result_301990081, result_301990081_Idx, ((x_301990082) + ""));
  framePtr = F.prev;

  
}

function HEX24_369098766(x_369098767) {
  var result_369098768 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 26;
    F.filename = "dollars.nim";
    addInt_301990080(result_369098768, 0, x_369098767);
  framePtr = F.prev;

  return result_369098768[0];

}

function formatInt_1241514151(n_1241514153, radix_1241514154, spec_1241514155) {
  var result_1241514156 = [];

  var F = {procname: "formatInt.formatInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 367;
    F.filename = "strformat.nim";
    var v_1241514159 = BigInt(n_1241514153);
    F.line = 368;
    var negative_1241514160 = false;
    F.line = 379;
    var xx_1241514161 = [];
    if (spec_1241514155.alternateForm) {
    F.line = 381;
    switch (spec_1241514155.typ) {
    case 88:
      F.line = 382;
      xx_1241514161 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 120:
      F.line = 383;
      xx_1241514161 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 98:
      F.line = 384;
      xx_1241514161 = nimCopy(null, [48,98], NTI33554449);
      break;
    case 111:
      F.line = 385;
      xx_1241514161 = nimCopy(null, [48,111], NTI33554449);
      break;
    default: 
      break;
    }
    }
    
    if ((v_1241514159 == 0n)) {
    F.line = 389;
    result_1241514156 = nimCopy(null, [48], NTI33554449);
    }
    else {
      F.line = 391;
      result_1241514156 = nimCopy(null, [], NTI33554449);
      Label1: {
        F.line = 392;
          Label2: while (true) {
          if (!(0n < v_1241514159)) break Label2;
            F.line = 393;
            var d_1241514162 = (v_1241514159 % BigInt.asUintN(64, BigInt(radix_1241514154)));
            F.line = 394;
            v_1241514159 = BigInt.asUintN(64, (v_1241514159 / BigInt.asUintN(64, BigInt(radix_1241514154))));
            F.line = 395;
            result_1241514156.push.apply(result_1241514156, mkDigit_1207959557(chckRange(Number(d_1241514162), (-2147483648), 2147483647), spec_1241514155.typ));;
          }
      };
      Label3: {
        F.line = 396;
        var idx_1241514167 = 0;
        F.line = 117;
        F.filename = "iterators_1.nim";
        var colontmp__536872964 = 0;
        F.line = 396;
        F.filename = "strformat.nim";
        colontmp__536872964 = divInt((result_1241514156).length, 2);
        F.line = 119;
        F.filename = "iterators_1.nim";
        var i_536872965 = 0;
        Label4: {
          F.line = 120;
            Label5: while (true) {
            if (!(i_536872965 < colontmp__536872964)) break Label5;
              F.line = 396;
              F.filename = "strformat.nim";
              idx_1241514167 = i_536872965;
              F.line = 396;
              var Temporary6 = result_1241514156[chckIndx(idx_1241514167, 0, (result_1241514156).length - 1)]; result_1241514156[chckIndx(idx_1241514167, 0, (result_1241514156).length - 1)] = result_1241514156[chckIndx(subInt(subInt((result_1241514156).length, idx_1241514167), 1), 0, (result_1241514156).length - 1)]; result_1241514156[chckIndx(subInt(subInt((result_1241514156).length, idx_1241514167), 1), 0, (result_1241514156).length - 1)] = Temporary6;              F.line = 122;
              F.filename = "iterators_1.nim";
              i_536872965 = addInt(i_536872965, 1);
            }
        };
      };
    }
    
    if (spec_1241514155.padWithZero) {
    F.line = 399;
    F.filename = "strformat.nim";
    var sign_1241514172 = (negative_1241514160 || !((spec_1241514155.sign == 45)));
    F.line = 400;
    var toFill_1241514176 = subInt(subInt(subInt(spec_1241514155.minimumWidth, (result_1241514156).length), (xx_1241514161).length), (sign_1241514172 ? 1 : 0));
    if ((0 < toFill_1241514176)) {
    F.line = 402;
    result_1241514156 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_1241514176, 0, 2147483647)) || []).concat(result_1241514156 || []), NTI33554449);
    }
    
    }
    
    if (negative_1241514160) {
    F.line = 405;
    result_1241514156 = nimCopy(null, ([45] || []).concat(xx_1241514161 || [],result_1241514156 || []), NTI33554449);
    }
    else {
    if (!((spec_1241514155.sign == 45))) {
    F.line = 407;
    result_1241514156 = nimCopy(null, [spec_1241514155.sign].concat(xx_1241514161 || [],result_1241514156 || []), NTI33554449);
    }
    else {
      F.line = 409;
      result_1241514156 = nimCopy(null, (xx_1241514161 || []).concat(result_1241514156 || []), NTI33554449);
    }
    }
    if ((spec_1241514155.align == 60)) {
    Label7: {
      F.line = 412;
      var i_1241514181 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__536872968 = 0;
      F.line = 412;
      F.filename = "strformat.nim";
      colontmp__536872968 = (result_1241514156).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536872969 = colontmp__536872968;
      Label8: {
        F.line = 120;
          Label9: while (true) {
          if (!(i_536872969 < spec_1241514155.minimumWidth)) break Label9;
            F.line = 412;
            F.filename = "strformat.nim";
            i_1241514181 = i_536872969;
            F.line = 412;
            addChar(result_1241514156, spec_1241514155.fill);;
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536872969 = addInt(i_536872969, 1);
          }
      };
    };
    }
    else {
      F.line = 415;
      F.filename = "strformat.nim";
      var toFill_1241514182 = subInt(spec_1241514155.minimumWidth, (result_1241514156).length);
      if ((spec_1241514155.align == 94)) {
      F.line = 417;
      var half_1241514183 = divInt(toFill_1241514182, 2);
      F.line = 418;
      result_1241514156 = nimCopy(null, (nsuRepeatChar(spec_1241514155.fill, chckRange(half_1241514183, 0, 2147483647)) || []).concat(result_1241514156 || [],nsuRepeatChar(spec_1241514155.fill, chckRange(subInt(toFill_1241514182, half_1241514183), 0, 2147483647)) || []), NTI33554449);
      }
      else {
        if ((0 < toFill_1241514182)) {
        F.line = 421;
        result_1241514156 = nimCopy(null, (nsuRepeatChar(spec_1241514155.fill, chckRange(toFill_1241514182, 0, 2147483647)) || []).concat(result_1241514156 || []), NTI33554449);
        }
        
      }
      
    }
    
  framePtr = F.prev;

  return result_1241514156;

}

function formatValue_1241514143(result_1241514145, result_1241514145_Idx, value_1241514146, specifier_1241514147) {
  var F = {procname: "formatValue.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((specifier_1241514147).length == 0)) {
    F.line = 481;
    F.filename = "strformat.nim";
    result_1241514145[result_1241514145_Idx].push.apply(result_1241514145[result_1241514145_Idx], HEX24_369098766(BigInt(value_1241514146)));;
    F.line = 482;
    break BeforeRet;
    }
    
    F.line = 483;
    var spec_1241514148 = parseStandardFormatSpecifier_1207959610(specifier_1241514147, 0, false);
    F.line = 484;
    var radix_1241514149 = 10;
    F.line = 485;
    switch (spec_1241514148.typ) {
    case 120:
    case 88:
      F.line = 486;
      radix_1241514149 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      F.line = 488;
      radix_1241514149 = 2;
      break;
    case 111:
      F.line = 489;
      radix_1241514149 = 8;
      break;
    default: 
      F.line = 491;
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_1241514148.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    F.line = 494;
    result_1241514145[result_1241514145_Idx].push.apply(result_1241514145[result_1241514145_Idx], formatInt_1241514151(value_1241514146, radix_1241514149, spec_1241514148));;
  };
  framePtr = F.prev;

  
}

function HEX24_1241514063(error_1241514064) {
    var Temporary1;

  var result_1241514065 = [];

  var F = {procname: "error.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/error.nim", line: 0};
  framePtr = F;
    F.line = 61;
    F.filename = "error.nim";
    F.line = 61;
    var code_1241514066 = error_1241514064.code;
    if ((0 <= error_1241514064.line)) {
    Label2: {
      F.line = 63;
      var fmtRes_1241514075 = [mnewString(0)];
      F.line = 63;
      formatValue_1241514080(fmtRes_1241514075, 0, error_1241514064.line, []);
      F.line = 63;
      fmtRes_1241514075[0].push.apply(fmtRes_1241514075[0], [58]);;
      F.line = 63;
      formatValue_1241514080(fmtRes_1241514075, 0, error_1241514064.column, []);
      F.line = 63;
      fmtRes_1241514075[0].push.apply(fmtRes_1241514075[0], [58]);;
      F.line = 63;
      formatValue_1241514143(fmtRes_1241514075, 0, code_1241514066, []);
      F.line = 63;
      fmtRes_1241514075[0].push.apply(fmtRes_1241514075[0], [58]);;
      F.line = 63;
      formatValue_1207959723(fmtRes_1241514075, 0, error_1241514064.message, []);
    };
    Temporary1 = fmtRes_1241514075[0];
    }
    else {
    if ((0 <= error_1241514064.origPos)) {
    Label3: {
      F.line = 65;
      var fmtRes_1241514204 = [mnewString(0)];
      F.line = 65;
      formatValue_1241514080(fmtRes_1241514204, 0, error_1241514064.origPos, []);
      F.line = 65;
      fmtRes_1241514204[0].push.apply(fmtRes_1241514204[0], [58]);;
      F.line = 65;
      formatValue_1241514143(fmtRes_1241514204, 0, code_1241514066, []);
      F.line = 65;
      fmtRes_1241514204[0].push.apply(fmtRes_1241514204[0], [58]);;
      F.line = 65;
      formatValue_1207959723(fmtRes_1241514204, 0, error_1241514064.message, []);
    };
    Temporary1 = fmtRes_1241514204[0];
    }
    else {
      Label4: {
        F.line = 67;
        var fmtRes_1241514219 = [mnewString(0)];
        F.line = 67;
        fmtRes_1241514219[0].push.apply(fmtRes_1241514219[0], [63,58]);;
        F.line = 67;
        formatValue_1241514080(fmtRes_1241514219, 0, error_1241514064.pos, []);
        F.line = 67;
        fmtRes_1241514219[0].push.apply(fmtRes_1241514219[0], [58]);;
        F.line = 67;
        formatValue_1241514143(fmtRes_1241514219, 0, code_1241514066, []);
        F.line = 67;
        fmtRes_1241514219[0].push.apply(fmtRes_1241514219[0], [58]);;
        F.line = 67;
        formatValue_1207959723(fmtRes_1241514219, 0, error_1241514064.message, []);
      };
    Temporary1 = fmtRes_1241514219[0];
    }
    }
    result_1241514065 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_1241514065;

}

function formatValue_1375732989(result_1375732991, result_1375732991_Idx, value_1375732992, specifier_1375732993) {
  var F = {procname: "formatValue.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 572;
    F.filename = "strformat.nim";
    formatValue_1207959723(result_1375732991, result_1375732991_Idx, HEX24_1241514063(value_1375732992), specifier_1375732993);
  framePtr = F.prev;

  
}

function formatValue_1375732994(result_1375732996, result_1375732996_Idx, value_1375732997, specifier_1375732998) {
  var F = {procname: "formatValue.formatValue", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 572;
    F.filename = "strformat.nim";
    formatValue_1207959723(result_1375732996, result_1375732996_Idx, nimBoolToStr(value_1375732997), specifier_1375732998);
  framePtr = F.prev;

  
}

function HEX24_1375732971(pe_1375732972) {
  var result_1375732973 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 290;
    F.filename = "parse.nim";
    Label1: {
      F.line = 291;
      var fmtRes_1375732978 = [mnewString(0)];
      F.line = 291;
      fmtRes_1375732978[0].push.apply(fmtRes_1375732978[0], [80,97,114,115,105,110,103,69,120,99,101,112,116,105,111,110,40,111,114,105,103,105,110,58,32]);;
      F.line = 649;
      F.filename = "strformat.nim";
      add_33556373(fmtRes_1375732978, 0, pe_1375732972.name);
      F.line = 291;
      F.filename = "parse.nim";
      fmtRes_1375732978[0].push.apply(fmtRes_1375732978[0], [44,32,110,111,100,101,95,111,114,105,103,110,95,108,101,110,58,32]);;
      F.line = 291;
      formatValue_1241514080(fmtRes_1375732978, 0, pe_1375732972.node_orig_len, []);
      F.line = 291;
      fmtRes_1375732978[0].push.apply(fmtRes_1375732978[0], [32,108,111,99,97,116,105,111,110,58,32]);;
      F.line = 291;
      formatValue_1241514080(fmtRes_1375732978, 0, pe_1375732972.location, []);
      F.line = 291;
      fmtRes_1375732978[0].push.apply(fmtRes_1375732978[0], [44,32,101,114,114,111,114,58,32,34]);;
      F.line = 291;
      formatValue_1375732989(fmtRes_1375732978, 0, pe_1375732972.error, []);
      F.line = 291;
      fmtRes_1375732978[0].push.apply(fmtRes_1375732978[0], [34,44,32,102,105,114,115,116,95,116,104,114,111,119,58,32]);;
      F.line = 291;
      formatValue_1375732994(fmtRes_1375732978, 0, pe_1375732972.first_throw, []);
    };
    result_1375732973 = nimCopy(null, fmtRes_1375732978[0], NTI33554449);
  framePtr = F.prev;

  return result_1375732973;

}

function HEX3DHEX3D_1375733287(x_1375733289, y_1375733290) {
  var result_1375733291 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((x_1375733289["Field0"] == y_1375733290["Field0"]))) {
    F.line = 1708;
    F.filename = "system.nim";
    result_1375733291 = false;
    break BeforeRet;
    }
    
    if (!((x_1375733289["Field1"] == y_1375733290["Field1"]))) {
    F.line = 1708;
    result_1375733291 = false;
    break BeforeRet;
    }
    
    F.line = 1709;
    result_1375733291 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733291;

}

function reprEnum(e_33557576, typ_33557577) {
  var result_33557578 = [];

  var F = {procname: "system.reprEnum", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "reprjs.nim";
    var tmp_33557579 = false;
    F.line = 31;
    var item_33557580 = typ_33557577.node.sons[e_33557576];
    F.line = 32;
    tmp_33557579 = item_33557580 !== undefined
    if (tmp_33557579) {
    F.line = 34;
    result_33557578 = nimCopy(null, makeNimstrLit(item_33557580.name), NTI33554449);
    }
    else {
      F.line = 36;
      result_33557578 = nimCopy(null, (HEX24_369098760(e_33557576) || []).concat([32,40,105,110,118,97,108,105,100,32,100,97,116,97,33,41] || []), NTI33554449);
    }
    
  framePtr = F.prev;

  return result_33557578;

}

function find_1191182674(slice_1191182675, pattern_1191182676, start_1191182677, size_1191182678) {
    var Temporary1;

  var result_1191182681 = {Field0: 0, Field1: 0};

  var F = {procname: "strslice.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(((0 <= start_1191182677) && (start_1191182677 <= addInt(subInt(slice_1191182675.Field2, slice_1191182675.Field1), 1))))) {
    F.line = 238;
    F.filename = "strslice.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(238, 5) `start >= 0 and start <= slice.stop - slice.start + 1` "));
    }
    
    F.line = 239;
    pattern_1191182676.Field1.lastIndex = addInt(start_1191182677, slice_1191182675.Field1);
    F.line = 240;
    var s_1191182687 = toJSStr((Temporary1 = str_1191182469(slice_1191182675), Temporary1)[0][Temporary1[1]]);
    F.line = 241;
    var m_1191182688 = (pattern_1191182676.Field1.exec(s_1191182687) || []);
    if ((0 < (m_1191182688).length)) {
    F.line = 243;
    var l_1191182693 = (((cstrToNimstr(m_1191182688[chckIndx(0, 0, (m_1191182688).length - 1)])).length) | 0);
    F.line = 244;
    var a_1191182694 = subInt(subInt(pattern_1191182676.Field1.lastIndex, slice_1191182675.Field1), ((((m_1191182688[chckIndx(0, 0, (m_1191182688).length - 1)]) == null ? 0 : (m_1191182688[chckIndx(0, 0, (m_1191182688).length - 1)]).length)) | 0));
    if (((size_1191182678 < 0) || (a_1191182694 <= addInt(start_1191182677, size_1191182678)))) {
    F.line = 246;
    var colontmp__536872985 = a_1191182694;
    F.line = 246;
    var colontmp__536872986 = subInt(addInt(a_1191182694, l_1191182693), 1);
    F.line = 246;
    result_1191182681 = nimCopy(result_1191182681, {Field0: colontmp__536872985, Field1: colontmp__536872986}, NTI1191182606);
    break BeforeRet;
    }
    
    }
    
    F.line = 247;
    var colontmp__536872987 = (-1);
    F.line = 247;
    var colontmp__536872988 = (-2);
    F.line = 247;
    result_1191182681 = nimCopy(result_1191182681, {Field0: colontmp__536872987, Field1: colontmp__536872988}, NTI1191182606);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1191182681;

}

function nsuFindStr(s_754976441, sub_754976442, start_754976443, last_754976444) {
  var result_754976445 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((subInt((s_754976441).length, start_754976443) < (sub_754976442).length)) {
    F.line = 2003;
    F.filename = "strutils.nim";
    result_754976445 = (-1);
    break BeforeRet;
    }
    
    if (((sub_754976442).length == 1)) {
    F.line = 2004;
    result_754976445 = nsuFindChar(s_754976441, sub_754976442[chckIndx(0, 0, (sub_754976442).length - 1)], start_754976443, last_754976444);
    break BeforeRet;
    }
    
    F.line = 2007;
    result_754976445 = nsuFindStrA(nsuInitNewSkipTable(sub_754976442), s_754976441, sub_754976442, start_754976443, last_754976444);
  };
  framePtr = F.prev;

  return result_754976445;

}

function init_1375733428(node_1375733431, name_1375733432, data_1375733433, attributes_1375733434) {
  var result_1375733435 = null;

  var F = {procname: "init.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 30;
    F.filename = "nodetree.nim";
    node_1375733431.nameRef[0] = [[]]; node_1375733431.nameRef[1] = 0;
    F.line = 31;
    node_1375733431.nameRef[0][node_1375733431.nameRef[1]] = nimCopy(null, name_1375733432, NTI33554449);
    F.line = 43;
    node_1375733431.textSlice = nimCopy(node_1375733431.textSlice, toStringSlice_1275069181(data_1375733433), NTI1191182339);
    F.line = 44;
    node_1375733431.attributesRef = attributes_1375733434;
    F.line = 45;
    node_1375733431.sourcePos = (-1);
    F.line = 46;
    result_1375733435 = node_1375733431;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733435;

}

function reentry_point_1375733273(document_1375733274, location_1375733275, rules_1375733276, commentRe_1375733277, searchWindowSize_1375733278) {
    var Temporary1;
    var Temporary2;
              var Temporary6;
              document_1375733274 = nimCopy(null, document_1375733274, NTI1191182339);
              commentRe_1375733277 = nimCopy(null, commentRe_1375733277, NTI1191182586);

function nextComment_1375733306() {
  var result_1375733309 = {Field0: 0, Field1: 0};

  var F = {procname: "reentry_point.nextComment", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((commentPointer_1375733305 < upperLimit_1375733282)) {
    F.line = 456;
    F.filename = "parse.nim";
    var tmpTuple_1375733310 = find_1191182674(document_1375733274, commentRe_1375733277, commentPointer_1375733305, (-1));
    F.line = 456;
    var a_1375733311 = tmpTuple_1375733310["Field0"];
    F.line = 456;
    var b_1375733312 = tmpTuple_1375733310["Field1"];
    if ((0 <= a_1375733311)) {
    F.line = 458;
    commentPointer_1375733305 = addInt(b_1375733312, 1);
    F.line = 459;
    var colontmp__536872972 = a_1375733311;
    F.line = 459;
    var colontmp__536872973 = addInt(b_1375733312, 1);
    F.line = 459;
    result_1375733309 = nimCopy(result_1375733309, {Field0: colontmp__536872972, Field1: colontmp__536872973}, NTI1375732667);
    break BeforeRet;
    }
    else {
      F.line = 461;
      commentPointer_1375733305 = upperLimit_1375733282;
    }
    
    }
    
    F.line = 462;
    var colontmp__536872974 = (-1);
    F.line = 462;
    var colontmp__536872975 = (-2);
    F.line = 462;
    result_1375733309 = nimCopy(result_1375733309, {Field0: colontmp__536872974, Field1: colontmp__536872975}, NTI1375732667);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733309;

}
              
function entry_point_1375733313(m_1375733314) {
                  m_1375733314 = nimCopy(null, m_1375733314, NTI1375731762);
                  
function searchFunc_1375733316(start_1375733317) {
                      var Temporary1;
                        var Temporary2;
                        var Temporary3;
                        var Temporary4;
                        var Temporary5;
                        var Temporary6;

                    var result_1375733320 = {Field0: 0, Field1: 0};

                    var F = {procname: "entry_point.searchFunc", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
                    framePtr = F;
                      F.line = 466;
                      F.filename = "parse.nim";
                      F.line = 466;
                      switch (m_1375733314.kind) {
                      case 0:
                        F.line = 468;
                        var Temporary2 = m_1375733314;
                        if (ConstSet15[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'rxInfo\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1375731760)); }
                        var tmpTuple_1375733321 = find_1191182674(document_1375733274, Temporary2.rxInfo.Field1, start_1375733317, searchWindow_1375733285);
                        F.line = 468;
                        var a_1375733322 = tmpTuple_1375733321["Field0"];
                        F.line = 468;
                        var b_1375733323 = tmpTuple_1375733321["Field1"];
                        Temporary1 = {Field0: a_1375733322, Field1: addInt(subInt(b_1375733323, a_1375733322), 1)};
                        break;
                      case 1:
                        var Temporary4 = m_1375733314;
                        if (ConstSet16[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'cmpStr\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1375731760)); }
                        var Temporary5 = m_1375733314;
                        if (ConstSet17[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'cmpStr\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1375731760)); }
                        Temporary1 = {Field0: ((nsuFindStr((Temporary3 = str_1191182469(document_1375733274), Temporary3)[0][Temporary3[1]], Temporary4.cmpStr, chckRange(start_1375733317, 0, 2147483647), ((addInt(start_1375733317, searchWindow_1375733285)) | 0))) | 0), Field1: (((Temporary5.cmpStr).length) | 0)};
                        break;
                      case 2:
                        var Temporary6 = m_1375733314;
                        if (ConstSet18[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'findProc\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1375731760)); }
                        Temporary1 = Temporary6.findProc(document_1375733274, start_1375733317, addInt(start_1375733317, searchWindow_1375733285));
                        break;
                      default: 
                        Temporary1 = {Field0: (-1), Field1: 0};
                        break;
                      }
                      result_1375733320 = nimCopy(result_1375733320, Temporary1, NTI1375732672);
                    framePtr = F.prev;

                    return result_1375733320;

                  }
                  var Temporary7;

                var result_1375733315 = 0;

                var F = {procname: "reentry_point.entry_point", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
                framePtr = F;
                BeforeRet: {
                  F.line = 479;
                  F.filename = "parse.nim";
                  var tmpTuple_1375733332 = nextComment_1375733306();
                  F.line = 479;
                  var a_1375733333 = tmpTuple_1375733332["Field0"];
                  F.line = 479;
                  var b_1375733334 = tmpTuple_1375733332["Field1"];
                  F.line = 480;
                  var tmpTuple_1375733335 = searchFunc_1375733316(location_1375733275);
                  F.line = 480;
                  var k_1375733336 = tmpTuple_1375733335["Field0"];
                  F.line = 480;
                  var length_1375733337 = tmpTuple_1375733335["Field1"];
                  Label1: {
                    F.line = 482;
                      Label2: while (true) {
                      if (!((a_1375733333 < b_1375733334) && (b_1375733334 <= addInt(k_1375733336, length_1375733337)))) break Label2;
                        F.line = 483;
                        var __1375733338 = nimCopy(null, nextComment_1375733306(), NTI1375732667);
                        F.line = 483;
                        a_1375733333 = __1375733338["Field0"];
                        F.line = 483;
                        b_1375733334 = __1375733338["Field1"];
                      }
                  };
                  Label3: {
                    F.line = 484;
                      Label4: while (true) {
                      if (!(((a_1375733333 < k_1375733336) && (k_1375733336 < b_1375733334)) || ((a_1375733333 < addInt(k_1375733336, length_1375733337)) && (addInt(k_1375733336, length_1375733337) < b_1375733334)))) break Label4;
                        F.line = 485;
                        var __1375733339 = nimCopy(null, searchFunc_1375733316(b_1375733334), NTI1375732672);
                        F.line = 485;
                        k_1375733336 = __1375733339["Field0"];
                        F.line = 485;
                        length_1375733337 = __1375733339["Field1"];
                        Label5: {
                          F.line = 486;
                            Label6: while (true) {
                            if (!((a_1375733333 < b_1375733334) && (b_1375733334 <= addInt(k_1375733336, length_1375733337)))) break Label6;
                              F.line = 487;
                              var __1375733340 = nimCopy(null, nextComment_1375733306(), NTI1375732667);
                              F.line = 487;
                              a_1375733333 = __1375733340["Field0"];
                              F.line = 487;
                              b_1375733334 = __1375733340["Field1"];
                            }
                        };
                      }
                  };
                  F.line = 488;
                  if ((0 <= k_1375733336)) {
                  Temporary7 = addInt(k_1375733336, length_1375733337);
                  }
                  else {
                  Temporary7 = upperLimit_1375733282;
                  }
                  
                  result_1375733315 = Temporary7;
                  break BeforeRet;
                };
                framePtr = F.prev;

                return result_1375733315;

              }

  var result_1375733281 = {Field0: null, Field1: 0};

  var F = {procname: "parse.reentry_point", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 444;
    F.filename = "parse.nim";
    var upperLimit_1375733282 = addInt(len_1191182481(document_1375733274), 1);
    F.line = 446;
    var pos_1375733283 = location_1375733275;
    F.line = 447;
    var closestMatch_1375733284 = upperLimit_1375733282;
    F.line = 448;
    if ((searchWindowSize_1375733278 < 0)) {
    Temporary1 = subInt(len_1191182481(document_1375733274), location_1375733275);
    }
    else {
    Temporary1 = searchWindowSize_1375733278;
    }
    
    var searchWindow_1375733285 = Temporary1;
    F.line = 450;
    var skipNode_1375733286 = null;
    F.line = 451;
    if (!(HEX3DHEX3D_1375733287(commentRe_1375733277, NeverMatchRegex_1375731761))) {
    Temporary2 = location_1375733275;
    }
    else {
    Temporary2 = upperLimit_1375733282;
    }
    
    var commentPointer_1375733305 = Temporary2;
    Label3: {
      F.line = 490;
      var rule_1375733363 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872980 = 0;
      F.line = 242;
      var L_536872981 = (rules_1375733276).length;
      Label4: {
        F.line = 243;
          Label5: while (true) {
          if (!(i_536872980 < L_536872981)) break Label5;
            F.line = 490;
            F.filename = "parse.nim";
            rule_1375733363 = rules_1375733276[chckIndx(i_536872980, 0, (rules_1375733276).length - 1)];
            F.line = 490;
            switch (rule_1375733363.kind) {
            case 3:
              F.line = 493;
              var Temporary6 = rule_1375733363;
              if (ConstSet14[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1375731760)); }
              var parser_1375733364 = Temporary6.consumeParser;
              F.line = 494;
              skipNode_1375733286 = null;
              F.line = 495;
++excHandler;
              try {
              F.line = 496;
              var __1375733365 = nimCopy(null, parser_1375733364.call(parser_1375733364, location_1375733275), NTI1375731757);
              F.line = 496;
              skipNode_1375733286 = __1375733365["Field0"];
              F.line = 496;
              pos_1375733283 = __1375733365["Field1"];
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
              framePtr = F;
              if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
              F.line = 498;
              var pe_1375733366 = getCurrentException();
              F.line = 498;
              var msg_1375733367 = ([69,114,114,111,114,32,119,104,105,108,101,32,115,101,97,114,99,104,105,110,103,32,114,101,45,101,110,116,114,121,32,112,111,105,110,116,32,119,105,116,104,32,112,97,114,115,101,114] || []).concat(HEX24_1375733037(parser_1375733364) || [],[58,32] || [],pe_1375733366.message || []);
              F.line = 499;
              var error_1375733401 = init_1241514008(new_1375733368(), msg_1375733367, location_1375733275, 1301, (-1), (-1), (-1), [], (-1), []);
              F.line = 500;
              grammar_1375733213(parser_1375733364).errors.push(error_1375733401);;
              F.line = 502;
              pos_1375733283 = upperLimit_1375733282;
              }
              else {
              	reraiseException();
              }
              lastJSError = prevJSError;
              } finally {
              framePtr = F;
              }
              if (!((skipNode_1375733286 == null))) {
              if ((pos_1375733283 < closestMatch_1375733284)) {
              F.line = 505;
              closestMatch_1375733284 = pos_1375733283;
              }
              
              }
              
              break;
            default: 
              F.line = 507;
              pos_1375733283 = entry_point_1375733313(rule_1375733363);
              if ((pos_1375733283 < closestMatch_1375733284)) {
              F.line = 509;
              skipNode_1375733286 = null;
              F.line = 510;
              closestMatch_1375733284 = pos_1375733283;
              }
              
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872980 = addInt(i_536872980, 1);
            if (!(((rules_1375733276).length == L_536872981))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if ((upperLimit_1375733282 <= closestMatch_1375733284)) {
    F.line = 512;
    F.filename = "parse.nim";
    closestMatch_1375733284 = (-1);
    }
    
    if ((skipNode_1375733286 == null)) {
    F.line = 514;
    var skipSlice_1375733424 = cut_1191182497(document_1375733274, HEX2EHEX2E_1191182403(location_1375733275, subInt(nimMax(closestMatch_1375733284, location_1375733275), 1)));
    F.line = 516;
    skipNode_1375733286 = init_1375733428(new_1275069123(), [95,95,90,79,77,66,73,69], skipSlice_1375733424, null);
    }
    
    F.line = 517;
    var colontmp__536872983 = skipNode_1375733286;
    F.line = 517;
    var colontmp__536872984 = subInt(closestMatch_1375733284, location_1375733275);
    F.line = 517;
    result_1375733281 = nimCopy(result_1375733281, {Field0: colontmp__536872983, Field1: colontmp__536872984}, NTI1375732657);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733281;

}

function HEX3DHEX3D_1375733573(str_1375733575, cmp_1375733576) {
  var result_1375733577 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((len_1191182481(str_1375733575) == len_1191182481(cmp_1375733576)))) {
    F.line = 147;
    F.filename = "strslice.nim";
    result_1375733577 = false;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 149;
      var i_1375733578 = 0;
      F.line = 107;
      F.filename = "iterators_1.nim";
      var res_536872991 = cmp_1375733576.Field1;
      Label2: {
        F.line = 108;
          Label3: while (true) {
          if (!(res_536872991 <= cmp_1375733576.Field2)) break Label3;
            F.line = 149;
            F.filename = "strslice.nim";
            i_1375733578 = res_536872991;
            if (!((str_1375733575.Field0[0][str_1375733575.Field0[1]][chckIndx(subInt(addInt(i_1375733578, str_1375733575.Field1), cmp_1375733576.Field1), 0, (str_1375733575.Field0[0][str_1375733575.Field0[1]]).length - 1)] == cmp_1375733576.Field0[0][cmp_1375733576.Field0[1]][chckIndx(i_1375733578, 0, (cmp_1375733576.Field0[0][cmp_1375733576.Field0[1]]).length - 1)]))) {
            F.line = 150;
            result_1375733577 = false;
            break BeforeRet;
            }
            
            F.line = 110;
            F.filename = "iterators_1.nim";
            res_536872991 = addInt(res_536872991, 1);
          }
      };
    };
    F.line = 151;
    F.filename = "strslice.nim";
    result_1375733577 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733577;

}

function textHEX3D_1375733562(node_1375733564, text_1375733565) {
  var F = {procname: "text=.text=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
    if ((0 < (node_1375733564.childrenSeq).length)) {
    F.line = 88;
    F.filename = "nodetree.nim";
    node_1375733564.childrenSeq = nimCopy(null, [], NTI1275068441);
    }
    
    if (HEX3DHEX3D_1375733573(node_1375733564.textSlice, EmptyStringSlice_1191182395)) {
    F.line = 90;
    node_1375733564.textSlice = nimCopy(node_1375733564.textSlice, toStringSlice_1275069181(text_1375733565), NTI1191182339);
    }
    else {
      F.line = 93;
      node_1375733564.textSlice = nimCopy(node_1375733564.textSlice, text_1375733565, NTI1191182339);
    }
    
  framePtr = F.prev;

  
}

function assignSourcePos_1275069043(node_1275069044, sourcePos_1275069045) {
  var result_1275069046 = 0;

  var F = {procname: "nodetree.assignSourcePos", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((0 <= sourcePos_1275069045))) {
    F.line = 157;
    F.filename = "nodetree.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim(157, 3) `sourcePos >= 0` "));
    }
    
    if (((0 <= node_1275069044.sourcePos) && !((node_1275069044.sourcePos == sourcePos_1275069045)))) {
    F.line = 159;
    raiseException({message: [115,111,117,114,99,101,32,112,111,115,105,116,105,111,110,32,109,117,115,116,32,110,111,116,32,98,101,32,114,101,97,115,115,105,103,110,101,100,33], parent: null, m_type: NTI1275068424, name: null, trace: [], up: null}, "SourcePosReAssigmentDefect");
    }
    
    F.line = 160;
    node_1275069044.sourcePos = sourcePos_1275069045;
    F.line = 161;
    var pos_1275069053 = sourcePos_1275069045;
    if (((node_1275069044.childrenSeq).length == 0)) {
    F.line = 163;
    result_1275069046 = addInt(pos_1275069053, runeLen_1275068975(node_1275069044));
    break BeforeRet;
    }
    else {
      Label1: {
        F.line = 165;
        var child_1275069060 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536872994 = 0;
        F.line = 242;
        var L_536872995 = (node_1275069044.childrenSeq).length;
        Label2: {
          F.line = 243;
            Label3: while (true) {
            if (!(i_536872994 < L_536872995)) break Label3;
              F.line = 165;
              F.filename = "nodetree.nim";
              child_1275069060 = node_1275069044.childrenSeq[chckIndx(i_536872994, 0, (node_1275069044.childrenSeq).length - 1)];
              if (!((child_1275069060 == null))) {
              if ((child_1275069060.sourcePos < 0)) {
              F.line = 168;
              pos_1275069053 = addInt(pos_1275069053, assignSourcePos_1275069043(child_1275069060, pos_1275069053));
              }
              else {
                F.line = 170;
              pos_1275069053 = addInt(pos_1275069053, runeLen_1275068975(child_1275069060));
              }
              
              }
              
              F.line = 245;
              F.filename = "iterators.nim";
              i_536872994 = addInt(i_536872994, 1);
              if (!(((node_1275069044.childrenSeq).length == L_536872995))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    }
    
    F.line = 171;
    F.filename = "nodetree.nim";
    result_1275069046 = pos_1275069053;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1275069046;

}

function HEX5BHEX5D_1375733626(s_1375733628, i_1375733629) {
  var result_1375733630 = null;
  var result_1375733630_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_1375733630 = s_1375733628; result_1375733630_Idx = chckIndx(subInt((s_1375733628).length, i_1375733629), 0, (s_1375733628).length - 1);
  framePtr = F.prev;

  return [result_1375733630, result_1375733630_Idx];

}

function handle_error_1375733499(parser_1375733500, pe_1375733501, location_1375733502) {
      var Temporary4;

  var result_1375733503 = {Field0: null, Field1: 0};

  var F = {procname: "parse.handle_error", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((0 <= pe_1375733501.node_orig_len))) {
    F.line = 521;
    F.filename = "parse.nim";
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(521, 3) `pe.node_orig_len >= 0` ") || []).concat(HEX24_1375732971(pe_1375733501) || []));
    }
    
    if (!((0 <= pe_1375733501.location))) {
    F.line = 522;
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(522, 3) `pe.location >= 0` ") || []).concat(HEX24_1375732971(pe_1375733501) || []));
    }
    
    F.line = 525;
    var grammar_1375733514 = grammar_1375733213(pe_1375733501.origin);
    F.line = 526;
    var gap_1375733515 = subInt(pe_1375733501.location, location_1375733502);
    F.line = 527;
    var cut_1375733527 = cut_1191182497(grammar_1375733514.document, HEX2EHEX2E_1191182403(location_1375733502, subInt(addInt(location_1375733502, gap_1375733515), 1)));
    F.line = 528;
    var rules_1375733528 = nimCopy(null, pe_1375733501.origin.resumeList, NTI1375731803);
    F.line = 530;
    var node_1375733529 = EmptyNode_1375731991;
    F.line = 531;
    var tail_1375733530 = false;
    F.line = 532;
    var nextLoc_1375733531 = addInt(pe_1375733501.location, pe_1375733501.node_orig_len);
    F.line = 533;
    var tmpTuple_1375733532 = reentry_point_1375733273(grammar_1375733514.document, nextLoc_1375733531, rules_1375733528, grammar_1375733514.commentRe, 10000);
    F.line = 533;
    var skipNode_1375733533 = tmpTuple_1375733532["Field0"];
    F.line = 533;
    var i_1375733534 = tmpTuple_1375733532["Field1"];
    if (((0 <= i_1375733534) || (parser_1375733500 == grammar_1375733514.root))) {
    F.line = 536;
    var zombie_1375733539 = null;
    if ((i_1375733534 < 0)) {
    F.line = 537;
    i_1375733534 = 0;
    }
    
    Label1: {
      F.line = 538;
      var child_1375733543 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872944 = 0;
      F.line = 242;
      var L_536872945 = (pe_1375733501.node.childrenSeq).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536872944 < L_536872945)) break Label3;
            F.line = 538;
            F.filename = "parse.nim";
            child_1375733543 = pe_1375733501.node.childrenSeq[chckIndx(i_536872944, 0, (pe_1375733501.node.childrenSeq).length - 1)];
            if (eqStrings(child_1375733543.nameRef[0][child_1375733543.nameRef[1]], [95,95,90,79,77,66,73,69])) {
            F.line = 540;
            zombie_1375733539 = child_1375733543;
            F.line = 541;
            break Label1;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872944 = addInt(i_536872944, 1);
            if (!(((pe_1375733501.node.childrenSeq).length == L_536872945))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if ((!((zombie_1375733539 == null)) && (((zombie_1375733539.childrenSeq).length == 0) && (len_1191182481(zombie_1375733539.textSlice) == 0)))) {
    F.line = 543;
    F.filename = "parse.nim";
    textHEX3D_1375733562(zombie_1375733539, cut_1191182497(grammar_1375733514.document, HEX2EHEX2E_1191182403(location_1375733502, subInt(addInt(location_1375733502, i_1375733534), 1))));
    F.line = 544;
    tail_1375733530 = false;
    }
    
    F.line = 545;
    nextLoc_1375733531 = addInt(nextLoc_1375733531, i_1375733534);
    if (pe_1375733501.first_throw) {
    F.line = 547;
    node_1375733529 = pe_1375733501.node;
    if ((tail_1375733530 && !((skipNode_1375733533 == null)))) {
    F.line = 548;
    node_1375733529.childrenSeq.push(skipNode_1375733533);;
    }
    
    }
    else {
      if (!((skipNode_1375733533 == null))) {
      F.line = 553;
      F.line = 177;
      F.filename = "nodetree.nim";
      var _ = assignSourcePos_1275069043(init_1275069234(new_1275069123(), parser_1375733500.nodeName[0], parser_1375733500.nodeName[1], [init_1375733428(new_1275069123(), [95,95,90,79,77,66,73,69], cut_1375733527, null), pe_1375733501.node, skipNode_1375733533], null), location_1375733502);
      node_1375733529 = init_1275069234(new_1275069123(), parser_1375733500.nodeName[0], parser_1375733500.nodeName[1], [init_1375733428(new_1275069123(), [95,95,90,79,77,66,73,69], cut_1375733527, null), pe_1375733501.node, skipNode_1375733533], null);
      }
      else {
        if (true) {
        F.line = 555;
        F.filename = "parse.nim";
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(555, 9) `false` Unrechable, theoretically..."));
        }
        
      }
      
    }
    
    }
    else {
    if (pe_1375733501.first_throw) {
    F.line = 557;
    pe_1375733501.first_throw = false;
    F.line = 558;
    raiseException(pe_1375733501, "ParsingException:ObjectType");
    }
    else {
    if (((Temporary4 = HEX5BHEX5D_1375733626(grammar_1375733514.errors, 1), Temporary4)[0][Temporary4[1]].code == 1015)) {
    F.line = 560;
    F.line = 177;
    F.filename = "nodetree.nim";
    var _ = assignSourcePos_1275069043(init_1275069234(new_1275069123(), parser_1375733500.nodeName[0], parser_1375733500.nodeName[1], [pe_1375733501.node], null), location_1375733502);
    node_1375733529 = init_1275069234(new_1275069123(), parser_1375733500.nodeName[0], parser_1375733500.nodeName[1], [pe_1375733501.node], null);
    }
    else {
      if ((gap_1375733515 == 0)) {
      F.line = 563;
      F.filename = "parse.nim";
      F.line = 177;
      F.filename = "nodetree.nim";
      var _ = assignSourcePos_1275069043(init_1275069234(new_1275069123(), parser_1375733500.nodeName[0], parser_1375733500.nodeName[1], [pe_1375733501.node], null), location_1375733502);
      node_1375733529 = init_1275069234(new_1275069123(), parser_1375733500.nodeName[0], parser_1375733500.nodeName[1], [pe_1375733501.node], null);
      }
      else {
        F.line = 565;
        F.filename = "parse.nim";
        F.line = 177;
        F.filename = "nodetree.nim";
        var _ = assignSourcePos_1275069043(init_1275069234(new_1275069123(), parser_1375733500.nodeName[0], parser_1375733500.nodeName[1], [init_1375733428(new_1275069123(), [95,95,90,79,77,66,73,69], cut_1375733527, null), pe_1375733501.node], null), location_1375733502);
        node_1375733529 = init_1275069234(new_1275069123(), parser_1375733500.nodeName[0], parser_1375733500.nodeName[1], [init_1375733428(new_1275069123(), [95,95,90,79,77,66,73,69], cut_1375733527, null), pe_1375733501.node], null);
      }
      
      F.line = 566;
      F.filename = "parse.nim";
      pe_1375733501.node = node_1375733529;
      F.line = 567;
      pe_1375733501.node_orig_len = addInt(pe_1375733501.node_orig_len, gap_1375733515);
      F.line = 568;
      pe_1375733501.location = location_1375733502;
      F.line = 569;
      pe_1375733501.first_throw = false;
      F.line = 570;
      raiseException(pe_1375733501, "ParsingException:ObjectType");
    }
    }}
    F.line = 571;
    var colontmp__536872947 = node_1375733529;
    F.line = 571;
    var colontmp__536872948 = nextLoc_1375733531;
    F.line = 571;
    result_1375733503 = nimCopy(result_1375733503, {Field0: colontmp__536872947, Field1: colontmp__536872948}, NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733503;

}

function nextPowerOfTwo_788529399(x_788529400) {
  var result_788529401 = 0;

    result_788529401 = (x_788529400 - 1);
    result_788529401 = (result_788529401 | (result_788529401 >> 16));
    result_788529401 = (result_788529401 | (result_788529401 >> 8));
    result_788529401 = (result_788529401 | (result_788529401 >> 4));
    result_788529401 = (result_788529401 | (result_788529401 >> 2));
    result_788529401 = (result_788529401 | (result_788529401 >> 1));
    result_788529401 += (1 + ((x_788529400 <= 0) ? 1 : 0));

  return result_788529401;

}

function slotsNeeded_1342177322(count_1342177323) {
  var result_1342177324 = 0;

  var F = {procname: "tables.slotsNeeded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 39;
    F.filename = "hashcommon.nim";
    result_1342177324 = nextPowerOfTwo_788529399(addInt(divInt(mulInt(count_1342177323, 3), 2), 4));
  framePtr = F.prev;

  return result_1342177324;

}

function mustRehash_1375734662(t_1375734664) {
  var result_1375734665 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_1375734664.counter < (t_1375734664.data).length))) {
    F.line = 34;
    F.filename = "hashcommon.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 35;
    result_1375734665 = ((mulInt((t_1375734664.data).length, 2) < mulInt(t_1375734664.counter, 3)) || (subInt((t_1375734664.data).length, t_1375734664.counter) < 4));
  framePtr = F.prev;

  return result_1375734665;

}

function rawInsert_1375735171(t_1375735175, data_1375735176, data_1375735176_Idx, key_1375735177, val_1375735178, hc_1375735179, h_1375735180) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 25;
    F.filename = "tableimpl.nim";
    data_1375735176[data_1375735176_Idx][chckIndx(h_1375735180, 0, (data_1375735176[data_1375735176_Idx]).length - 1)].Field1 = key_1375735177;
    F.line = 26;
    data_1375735176[data_1375735176_Idx][chckIndx(h_1375735180, 0, (data_1375735176[data_1375735176_Idx]).length - 1)].Field2 = nimCopy(data_1375735176[data_1375735176_Idx][chckIndx(h_1375735180, 0, (data_1375735176[data_1375735176_Idx]).length - 1)].Field2, val_1375735178, NTI1375731757);
    F.line = 27;
    data_1375735176[data_1375735176_Idx][chckIndx(h_1375735180, 0, (data_1375735176[data_1375735176_Idx]).length - 1)].Field0 = hc_1375735179;
  framePtr = F.prev;

  
}

function enlarge_1375734850(t_1375734853) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 250;
    F.filename = "tables.nim";
    var n_1375734856 = [];
    F.line = 251;
    n_1375734856 = new Array(chckRange(mulInt((t_1375734853.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_1375734853.data).length, 2), 0, 2147483647) ; ++i) { n_1375734856[i] = {Field0: 0, Field1: 0, Field2: {Field0: null, Field1: 0}}; }    F.line = 252;
    var Temporary1 = t_1375734853.data; t_1375734853.data = n_1375734856; n_1375734856 = Temporary1;    Label2: {
      F.line = 253;
      var i_1375734931 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__536872999 = 0;
      F.line = 253;
      F.filename = "tables.nim";
      colontmp__536872999 = (n_1375734856).length - 1;
      F.line = 65;
      F.filename = "iterators_1.nim";
      var res_536873000 = 0;
      Label3: {
        F.line = 66;
          Label4: while (true) {
          if (!(res_536873000 <= colontmp__536872999)) break Label4;
            F.line = 253;
            F.filename = "tables.nim";
            i_1375734931 = res_536873000;
            F.line = 254;
            var eh_1375734989 = n_1375734856[chckIndx(i_1375734931, 0, (n_1375734856).length - 1)].Field0;
            if (isFilled_1342177311(eh_1375734989)) {
            F.line = 256;
            var j_1375734993 = (eh_1375734989 & (t_1375734853.data).length - 1);
            Label5: {
              F.line = 257;
                Label6: while (true) {
                if (!isFilled_1342177311(t_1375734853.data[chckIndx(j_1375734993, 0, (t_1375734853.data).length - 1)].Field0)) break Label6;
                  F.line = 258;
                  j_1375734993 = nextTry_1342177314(j_1375734993, (t_1375734853.data).length - 1);
                }
            };
            F.line = 260;
            rawInsert_1375735171(t_1375734853, t_1375734853, "data", n_1375734856[chckIndx(i_1375734931, 0, (n_1375734856).length - 1)].Field1, n_1375734856[chckIndx(i_1375734931, 0, (n_1375734856).length - 1)].Field2, eh_1375734989, j_1375734993);
            }
            
            F.line = 68;
            F.filename = "iterators_1.nim";
            res_536873000 = addInt(res_536873000, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function rawGetKnownHC_1375735352(t_1375735355, key_1375735356, hc_1375735357) {
  var result_1375735358 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((t_1375735355.data).length == 0)) {
    F.line = 43;
    F.filename = "hashcommon.nim";
    result_1375735358 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_1375735420 = (hc_1375735357 & (t_1375735355.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1342177311(t_1375735355.data[chckIndx(h_1375735420, 0, (t_1375735355.data).length - 1)].Field0)) break Label2;
          if (((t_1375735355.data[chckIndx(h_1375735420, 0, (t_1375735355.data).length - 1)].Field0 == hc_1375735357) && (t_1375735355.data[chckIndx(h_1375735420, 0, (t_1375735355.data).length - 1)].Field1 == key_1375735356))) {
          F.line = 51;
          result_1375735358 = h_1375735420;
          break BeforeRet;
          }
          
          F.line = 52;
          h_1375735420 = nextTry_1342177314(h_1375735420, (t_1375735355.data).length - 1);
        }
    };
    F.line = 53;
    result_1375735358 = subInt((-1), h_1375735420);
  };
  framePtr = F.prev;

  return result_1375735358;

}

function HEX5BHEX5DHEX3D_1375734463(t_1375734466, key_1375734467, val_1375734468) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_1375734466.data).length == 0)) {
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym97_1375734528 = slotsNeeded_1342177322(32);
    F.line = 169;
    t_1375734466.counter = 0;
    F.line = 170;
    t_1375734466.data = new Array(chckRange(correctSizeHEX60gensym97_1375734528, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym97_1375734528, 0, 2147483647) ; ++i) { t_1375734466.data[i] = {Field0: 0, Field1: 0, Field2: {Field0: null, Field1: 0}}; }    }
    
    F.line = 59;
    var hc_1375734533 = [0];
    F.line = 60;
    var index_1375734540 = rawGet_1375733955(t_1375734466, key_1375734467, hc_1375734533, 0);
    if ((0 <= index_1375734540)) {
    F.line = 61;
    t_1375734466.data[chckIndx(index_1375734540, 0, (t_1375734466.data).length - 1)].Field2 = nimCopy(t_1375734466.data[chckIndx(index_1375734540, 0, (t_1375734466.data).length - 1)].Field2, val_1375734468, NTI1375731757);
    }
    else {
      if (((t_1375734466.data).length == 0)) {
      F.line = 165;
      var correctSizeHEX60gensym100_1375734657 = slotsNeeded_1342177322(32);
      F.line = 169;
      t_1375734466.counter = 0;
      F.line = 170;
      t_1375734466.data = new Array(chckRange(correctSizeHEX60gensym100_1375734657, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym100_1375734657, 0, 2147483647) ; ++i) { t_1375734466.data[i] = {Field0: 0, Field1: 0, Field2: {Field0: null, Field1: 0}}; }      }
      
      if (mustRehash_1375734662(t_1375734466)) {
      F.line = 51;
      enlarge_1375734850(t_1375734466);
      F.line = 52;
      index_1375734540 = rawGetKnownHC_1375735352(t_1375734466, key_1375734467, hc_1375734533[0]);
      }
      
      F.line = 53;
      index_1375734540 = subInt((-1), index_1375734540);
      F.line = 54;
      rawInsert_1375735171(t_1375734466, t_1375734466, "data", key_1375734467, val_1375734468, hc_1375734533[0], index_1375734540);
      F.line = 62;
      t_1375734466.counter = addInt(t_1375734466.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function memoizationWrapper_1375732180(parser_1375732181, location_1375732182) {
  var result_1375733887 = {Field0: null, Field1: 0};

  var F = {procname: "parse.memoizationWrapper", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 596;
    F.filename = "parse.nim";
    var grammar_1375733888 = grammar_1375733213(parser_1375732181);
    if ((location_1375732182 < grammar_1375733888.rollbackLocation)) {
    F.line = 597;
    rollback_1375733815(grammar_1375733888, location_1375732182);
    }
    
    if (contains_1375733942(parser_1375732181.visited, ((location_1375732182) | 0))) {
    F.line = 598;
    result_1375733887 = nimCopy(result_1375733887, HEX5BHEX5D_1375734273(parser_1375732181.visited, ((location_1375732182) | 0)), NTI1375731757);
    break BeforeRet;
    }
    
    F.line = 600;
    var memoization_1375734405 = (grammar_1375733888.flags[1] != undefined);
    F.line = 601;
    grammar_1375733888.flags[1] = true;
    F.line = 603;
++excHandler;
    try {
    F.line = 604;
    result_1375733887 = nimCopy(result_1375733887, parse_1375733786(parser_1375732181, location_1375732182), NTI1375731757);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = F;
    if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
    F.line = 606;
    var pe_1375734410 = getCurrentException();
    F.line = 606;
    result_1375733887 = nimCopy(result_1375733887, handle_error_1375733499(parser_1375732181, pe_1375734410, location_1375732182), NTI1375731757);
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = F;
    }
    F.line = 608;
    var node_1375734411 = result_1375733887.Field0;
    if ((node_1375734411 == null)) {
    F.line = 610;
    grammar_1375733888.farthestFail = location_1375732182;
    F.line = 611;
    grammar_1375733888.farthestParser = parser_1375732181;
    }
    else {
    if (!((node_1375734411 == EmptyNode_1375731991))) {
    F.line = 613;
    node_1375734411.sourcePos = location_1375732182;
    }
    }
    if ((grammar_1375733888.flags[1] != undefined)) {
    F.line = 616;
    HEX5BHEX5DHEX3D_1375734463(parser_1375732181.visited, ((location_1375732182) | 0), result_1375733887);
    if (!(memoization_1375734405)) {
    F.line = 617;
    delete grammar_1375733888.flags[1];
    }
    
    }
    
  };
  framePtr = F.prev;

  return result_1375733887;

}

function initTable_1375732686(initialSize_1375732689) {
  var result_1375732690 = ({data: [], counter: 0});

  var F = {procname: "initTable.initTable", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym6_1375732692 = slotsNeeded_1342177322(chckRange(initialSize_1375732689, 0, 2147483647));
    F.line = 169;
    result_1375732690.counter = 0;
    F.line = 170;
    result_1375732690.data = new Array(chckRange(correctSizeHEX60gensym6_1375732692, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym6_1375732692, 0, 2147483647) ; ++i) { result_1375732690.data[i] = {Field0: 0, Field1: 0, Field2: {Field0: null, Field1: 0}}; }  framePtr = F.prev;

  return result_1375732690;

}

function init_1375732674(parser_1375732675, ptype_1375732676) {
  var result_1375732677 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((!(eqStrings(ptype_1375732676, [])) && (ptype_1375732676[chckIndx(0, 0, (ptype_1375732676).length - 1)] == 58)))) {
    F.line = 211;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(211, 3) `ptype != \"\" and ptype[0] == \':\'` "));
    }
    
    F.line = 212;
    parser_1375732675.pname = nimCopy(null, [], NTI33554449);
    F.line = 213;
    parser_1375732675.nodeName[0] = [[]]; parser_1375732675.nodeName[1] = 0;
    F.line = 214;
    parser_1375732675.nodeName[0][parser_1375732675.nodeName[1]] = nimCopy(null, ptype_1375732676, NTI33554449);
    F.line = 215;
    parser_1375732675.ptype = nimCopy(null, ptype_1375732676, NTI33554449);
    F.line = 216;
    parser_1375732675.flags = nimCopy(parser_1375732675.flags, ConstSet13, NTI1375731766);
    F.line = 217;
    parser_1375732675.uniqueID = 0;
    F.line = 219;
    parser_1375732675.grammarVar = GrammarPlaceholder_1375732179;
    F.line = 220;
    parser_1375732675.symbol = null;
    F.line = 223;
    parser_1375732675.call = memoizationWrapper_1375732180;
    F.line = 224;
    parser_1375732675.visited = nimCopy(parser_1375732675.visited, initTable_1375732686(32), NTI1375731794);
    F.line = 225;
    cleanUp_1375732673(parser_1375732675);
    F.line = 226;
    result_1375732677 = parser_1375732675;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375732677;

}

function init_1375736785(textParser_1375736786, text_1375736787) {
  var result_1375736788 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(((text_1375736787).length <= 2147483647))) {
    F.line = 1000;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1000, 3) `text.len <= MaxTextLen` "));
    }
    
    F.line = 1001;
    var _ = init_1375732674(textParser_1375736786, [58,84,101,120,116]);
    F.line = 1003;
    textParser_1375736786.flags[0] = true;
    F.line = 1004;
    textParser_1375736786.text = nimCopy(null, text_1375736787, NTI33554449);
    F.line = 1005;
    textParser_1375736786.slice = nimCopy(textParser_1375736786.slice, toStringSlice_1375731983(text_1375736787), NTI1191182339);
    F.line = 1006;
    textParser_1375736786.empty = eqStrings(text_1375736787, []);
    F.line = 1007;
    result_1375736788 = textParser_1375736786;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375736788;

}

function new_536870938() {
  var result_536870941 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_536870943 = null;
    F.line = 839;
    r_536870943 = ({m_type: NTI1375734862, text: [], slice: {Field0: [null, 0], Field1: 0, Field2: 0}, empty: false, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_536870941 = r_536870943;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_536870941;

}

function checkpoint_671089446(msg_671089447) {
  var F = {procname: "unittest.checkpoint", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 595;
    F.filename = "unittest.nim";
    var Temporary1 = nimCopy(null, msg_671089447, NTI33554449);
    checkpoints_671088683[0].push(Temporary1);;
  framePtr = F.prev;

  
}

function exceptionTypeName_671089436(e_671089437) {
    var Temporary1;

  var result_671089438 = [];

  var F = {procname: "unittest.exceptionTypeName", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 519;
    F.filename = "unittest.nim";
    if ((e_671089437 == null)) {
    Temporary1 = [60,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,62];
    }
    else {
    Temporary1 = cstrToNimstr(e_671089437.name);
    }
    
    result_671089438 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_671089438;

}

function getCurrentExceptionMsg_33556463() {
  var result_33556464 = [];

  BeforeRet: {
    if (!((lastJSError == null))) {
    if (isNimException_33556443()) {
    result_33556464 = nimCopy(null, lastJSError.message, NTI33554449);
    break BeforeRet;
    }
    else {
      var msg_33556469 = null;
            if (lastJSError.message !== undefined) {
        msg_33556469 = lastJSError.message;
      }
      
      if (!((msg_33556469 == null))) {
      result_33556464 = nimCopy(null, cstrToNimstr(msg_33556469), NTI33554449);
      break BeforeRet;
      }
      
    }
    
    }
    
    result_33556464 = nimCopy(null, [], NTI33554449);
    break BeforeRet;
  };

  return result_33556464;

}

function getStackTrace_33556645(e_33556646) {
  var result_33556647 = [];

    result_33556647 = nimCopy(null, e_33556646.trace, NTI33554449);

  return result_33556647;

}

function setProgramResult_687865987(a_687865988) {
  var F = {procname: "exitprocs.setProgramResult", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/exitprocs.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "exitprocs.nim";
    process.exitCode = a_687865988;

  framePtr = F.prev;

  
}

function testEnded_671089427(testResult_671089428) {
  var F = {procname: "unittest.testEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 465;
      F.filename = "unittest.nim";
      var formatter_671089432 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873004 = 0;
      F.line = 242;
      var L_536873005 = (formatters_671088684[0]).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873004 < L_536873005)) break Label3;
            F.line = 465;
            F.filename = "unittest.nim";
            formatter_671089432 = formatters_671088684[0][chckIndx(i_536873004, 0, (formatters_671088684[0]).length - 1)];
            F.line = 465;
            testEnded_671088716(formatter_671089432, testResult_671089428);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873004 = addInt(i_536873004, 1);
            if (!(((formatters_671088684[0]).length == L_536873005))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  
}

function init_1375737193(regexParser_1375737194, rxInfo_1375737195) {
  var result_1375737196 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1113;
    F.filename = "parse.nim";
    var _ = init_1375732674(regexParser_1375737194, [58,82,101,103,69,120,112]);
    F.line = 1114;
    regexParser_1375737194.reInfo = nimCopy(regexParser_1375737194.reInfo, rxInfo_1375737195, NTI1375731734);
    F.line = 1115;
    regexParser_1375737194.flags[0] = true;
    F.line = 1116;
    result_1375737196 = regexParser_1375737194;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737196;

}

function new_1375737223() {
  var result_1375737226 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_1375737228 = null;
    F.line = 839;
    r_1375737228 = ({m_type: NTI1375735469, reInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_1375737226 = r_1375737228;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737226;

}

function rx_1375731767(rx_str_1375731768) {
  var result_1375731769 = {Field0: [], Field1: {Field0: null, Field1: null}};

  var F = {procname: "parse.rx", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 27;
    F.filename = "parse.nim";
    var colontmp__536873007 = nimCopy(null, rx_str_1375731768, NTI33554449);
    F.line = 27;
    var colontmp__536873008 = ure_1375731737(rx_str_1375731768);
    F.line = 27;
    result_1375731769 = nimCopy(result_1375731769, {Field0: nimCopy(null, colontmp__536873007, NTI33554449), Field1: nimCopy(null, colontmp__536873008, NTI1191182586)}, NTI1375731734);
  framePtr = F.prev;

  return result_1375731769;

}

function type_1375732762(parser_1375732763) {
    var Temporary1;

  var result_1375732764 = [];

  var F = {procname: "parse.type", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 232;
    F.filename = "parse.nim";
    if ((eqStrings(parser_1375732763.ptype, [58,70,111,114,119,97,114,100]) && (0 < (parser_1375732763.subParsers).length))) {
    Temporary1 = parser_1375732763.subParsers[chckIndx(0, 0, (parser_1375732763.subParsers).length - 1)].ptype;
    }
    else {
    Temporary1 = parser_1375732763.ptype;
    }
    
    result_1375732764 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_1375732764;

}

function assignSymbol_1375732780(parser_1375732781, symbol_1375732782) {
  var F = {procname: "parse.assignSymbol", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 244;
    F.filename = "parse.nim";
    parser_1375732781.symbol = symbol_1375732782;
    Label1: {
      F.line = 245;
      var p_1375732804 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873010 = 0;
      F.line = 242;
      var L_536873011 = (parser_1375732781.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873010 < L_536873011)) break Label3;
            F.line = 245;
            F.filename = "parse.nim";
            p_1375732804 = parser_1375732781.subParsers[chckIndx(i_536873010, 0, (parser_1375732781.subParsers).length - 1)];
            if ((p_1375732804.symbol == null)) {
            F.line = 246;
            assignSymbol_1375732780(p_1375732804, symbol_1375732782);
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873010 = addInt(i_536873010, 1);
            if (!(((parser_1375732781.subParsers).length == L_536873011))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  
}

function assignName_1375732840(name_1375732841, parser_1375732842) {
  var result_1375732843 = null;

  var F = {procname: "parse.assignName", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (eqStrings(type_1375732762(parser_1375732842), [58,84,114,97,99,101])) {
    F.line = 250;
    F.filename = "parse.nim";
    var _ = assignName_1375732840(name_1375732841, parser_1375732842.subParsers[chckIndx(0, 0, (parser_1375732842.subParsers).length - 1)]);
    F.line = 251;
    result_1375732843 = parser_1375732842;
    break BeforeRet;
    }
    
    if (!(eqStrings(parser_1375732842.pname, []))) {
    F.line = 252;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(252, 3) `parser.pname == \"\"` "));
    }
    
    if (!(!(eqStrings(name_1375732841, [])))) {
    F.line = 253;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(253, 3) `name != \"\"` "));
    }
    
    F.line = 254;
    parser_1375732842.nodeName[0][parser_1375732842.nodeName[1]] = nimCopy(null, name_1375732841, NTI33554449);
    if ((name_1375732841[chckIndx(0, 0, (name_1375732841).length - 1)] == 58)) {
    F.line = 256;
    parser_1375732842.pname = nimCopy(null, HEX5BHEX5D_754976027(name_1375732841, HEX2EHEX2E_922746984(1, 1)), NTI33554449);
    }
    else {
    if (((5 <= (name_1375732841).length) && (name_1375732841[chckIndx(4, 0, (name_1375732841).length - 1)] == 58))) {
    if (eqStrings(HEX5BHEX5D_754975999(name_1375732841, HEX2EHEX2E_973078576(0, 3)), [68,82,79,80])) {
    F.line = 259;
    parser_1375732842.flags[9] = true;
    }
    else {
      if (!(eqStrings(HEX5BHEX5D_754975999(name_1375732841, HEX2EHEX2E_973078576(0, 3)), [72,73,68,69]))) {
      F.line = 261;
      failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(261, 7) `name[0 .. 3] == \"HIDE\"` "));
      }
      
    }
    
    F.line = 262;
    parser_1375732842.pname = nimCopy(null, HEX5BHEX5D_754976027(name_1375732841, HEX2EHEX2E_922746984(5, 1)), NTI33554449);
    }
    else {
      if (!(eqStrings(parser_1375732842.ptype, [58,87,104,105,116,101,115,112,97,99,101]))) {
      F.line = 268;
      delete parser_1375732842.flags[7];
      }
      
      F.line = 269;
      parser_1375732842.pname = nimCopy(null, name_1375732841, NTI33554449);
    }
    }
    F.line = 270;
    assignSymbol_1375732780(parser_1375732842, parser_1375732842);
    F.line = 271;
    result_1375732843 = parser_1375732842;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375732843;

}

function HEX28HEX29_536871176(parser_536871178, document_536871179, location_536871180) {
  var result_536871181 = {Field0: null, Field1: []};

  var F = {procname: "().()", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((parser_536871178.grammarVar == GrammarPlaceholder_1375732179)) {
    F.line = 642;
    F.filename = "parse.nim";
    grammarHEX3D_1375733262(parser_536871178, init_1375732066(new_1375732140(), [97,100,104,111,99], ConstSet19, toStringSlice_1275069181(document_536871179), returnItemFlatten_1375731992, returnSeqFlatten_1375731995));
    }
    else {
      F.line = 644;
      grammar_1375733213(parser_536871178).document = nimCopy(grammar_1375733213(parser_536871178).document, toStringSlice_1275069181(document_536871179), NTI1191182339);
      F.line = 645;
      cleanUp_1375732004(grammar_1375733213(parser_536871178));
    }
    
    F.line = 646;
    grammar_1375733213(parser_536871178).root = parser_536871178;
    Label1: {
      F.line = 647;
      var p_536871198 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__536873014 = [];
      F.line = 376;
      F.filename = "parse.nim";
      colontmp__536873014 = descendants_1375733169(parser_536871178, refdSubs_1375733088);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873015 = 0;
      F.line = 242;
      var L_536873016 = (colontmp__536873014).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873015 < L_536873016)) break Label3;
            F.line = 376;
            F.filename = "parse.nim";
            p_536871198 = colontmp__536873014[chckIndx(i_536873015, 0, (colontmp__536873014).length - 1)];
            F.line = 376;
            cleanUp_1375732673(p_536871198);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873015 = addInt(i_536873015, 1);
            if (!(((colontmp__536873014).length == L_536873016))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 378;
    F.filename = "parse.nim";
    resetTraversalTracker_1375733194(parser_536871178);
    F.line = 649;
    var tmpTuple_536871199 = parser_536871178.call(parser_536871178, location_536871180);
    F.line = 649;
    var root_536871200 = tmpTuple_536871199["Field0"];
    F.line = 649;
    var loc_536871201 = tmpTuple_536871199["Field1"];
    if (((root_536871200 == null) || (loc_536871201 < len_1191182481(document_536871179)))) {
    F.line = 651;
    var snippet_536871213 = cstrToNimstr(replace_1191182734(cut_1191182497(grammar_1375733213(parser_536871178).document, HEX2EHEX2E_1191182403(loc_536871201, addInt(loc_536871201, 9))), ure_1375731737([92,110]), [92,110]));
    F.line = 652;
    Label4: {
      F.line = 652;
      var fmtRes_536871218 = [mnewString(0)];
      F.line = 652;
      fmtRes_536871218[0].push.apply(fmtRes_536871218[0], [80,97,114,115,101,114,32]);;
      F.line = 652;
      formatValue_1207959723(fmtRes_536871218, 0, name_1375732769(parser_536871178), []);
      F.line = 652;
      fmtRes_536871218[0].push.apply(fmtRes_536871218[0], [32,115,116,111,112,112,101,100,32,98,101,102,111,114,101,32,101,110,100,32,97,116,32,194,187]);;
      F.line = 652;
      formatValue_1207959723(fmtRes_536871218, 0, snippet_536871213, []);
      F.line = 652;
      fmtRes_536871218[0].push.apply(fmtRes_536871218[0], [194,171]);;
    };
    var msg_536871219 = nimCopy(null, fmtRes_536871218[0], NTI33554449);
    F.line = 653;
    grammar_1375733213(parser_536871178).errors.push(init_1241514008(new_1375733368(), msg_536871219, loc_536871201, 1040, (-1), (-1), (-1), [], (-1), []));;
    }
    
    F.line = 654;
    var colontmp__536873019 = root_536871200;
    F.line = 654;
    var colontmp__536873020 = nimCopy(null, grammar_1375733213(parser_536871178).errors, NTI1375731777);
    F.line = 654;
    result_536871181 = nimCopy(result_536871181, {Field0: colontmp__536873019, Field1: nimCopy(null, colontmp__536873020, NTI1375731777)}, NTI1375731758);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_536871181;

}

function contains_754976583(s_754976584, sub_754976585) {
  var result_754976586 = false;

  var F = {procname: "strutils.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 2161;
    F.filename = "strutils.nim";
    result_754976586 = (0 <= nsuFindStr(s_754976584, sub_754976585, 0, (-1)));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_754976586;

}

function urex_1375731794(pattern_1375731796) {
  var result_1375731797 = {Field0: null, Field1: null};

  var F = {procname: "urex.urex", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 227;
    F.filename = "strslice.nim";
    var flatPattern_1375731798 = toJSStr(pattern_1375731796).replace(PCREFlag_1191182657, "").replace(comment_1191182658, "").replace(whitespace_1191182659, "").replace(slashU_1191182660, "\\u{$1}");
    F.line = 231;
    var colontmp__536873023 = new RegExp(flatPattern_1375731798, "uy");
    F.line = 232;
    var colontmp__536873024 = new RegExp(flatPattern_1375731798, "ug");
    F.line = 231;
    result_1375731797 = nimCopy(result_1375731797, {Field0: colontmp__536873023, Field1: colontmp__536873024}, NTI1191182586);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375731797;

}

function mrx_1375731791(multiline_rx_str_1375731792) {
  var result_1375731793 = {Field0: [], Field1: {Field0: null, Field1: null}};

  var F = {procname: "parse.mrx", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 29;
    F.filename = "parse.nim";
    var colontmp__536873021 = nimCopy(null, multiline_rx_str_1375731792, NTI33554449);
    F.line = 29;
    var colontmp__536873022 = urex_1375731794(multiline_rx_str_1375731792);
    F.line = 29;
    result_1375731793 = nimCopy(result_1375731793, {Field0: nimCopy(null, colontmp__536873021, NTI33554449), Field1: nimCopy(null, colontmp__536873022, NTI1191182586)}, NTI1375731734);
  framePtr = F.prev;

  return result_1375731793;

}

function init_1375737307(insignificant_1375737308, whitespace_1375737309, comment_1375737310) {
  var result_1375737311 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1170;
    F.filename = "parse.nim";
    var _ = init_1375732674(insignificant_1375737308, [58,87,104,105,116,101,115,112,97,99,101]);
    F.line = 1171;
    insignificant_1375737308.whitespace = nimCopy(insignificant_1375737308.whitespace, whitespace_1375737309, NTI1375731734);
    F.line = 1172;
    insignificant_1375737308.comment = nimCopy(insignificant_1375737308.comment, comment_1375737310, NTI1375731734);
    F.line = 1173;
    var ws_1375737312 = ([40,63,58] || []).concat(whitespace_1375737309.Field0 || [],[41,63] || []);
    if ((((comment_1375737310.Field0).length == 0) || eqStrings(comment_1375737310.Field0, [36,46]))) {
    F.line = 1175;
    insignificant_1375737308.combined = nimCopy(insignificant_1375737308.combined, rx_1375731767(ws_1375737312), NTI1375731734);
    }
    else {
      F.line = 1177;
      var cmmt_1375737313 = ([40,63,58] || []).concat(comment_1375737310.Field0 || [],[41] || []);
      F.line = 1178;
      Label1: {
        F.line = 1178;
        var fmtRes_1375737318 = [mnewString(0)];
        F.line = 1178;
        fmtRes_1375737318[0].push.apply(fmtRes_1375737318[0], [40,63,58]);;
        F.line = 1178;
        formatValue_1207959723(fmtRes_1375737318, 0, ws_1375737312, []);
        F.line = 1178;
        fmtRes_1375737318[0].push.apply(fmtRes_1375737318[0], [40,63,58]);;
        F.line = 1178;
        formatValue_1207959723(fmtRes_1375737318, 0, cmmt_1375737313, []);
        F.line = 1178;
        formatValue_1207959723(fmtRes_1375737318, 0, ws_1375737312, []);
        F.line = 1178;
        fmtRes_1375737318[0].push.apply(fmtRes_1375737318[0], [41,42,41]);;
      };
      insignificant_1375737308.combined = nimCopy(insignificant_1375737308.combined, rx_1375731767(fmtRes_1375737318[0]), NTI1375731734);
    }
    
    F.line = 1179;
    result_1375737311 = insignificant_1375737308;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737311;

}

function new_1375737344() {
  var result_1375737347 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_1375737349 = null;
    F.line = 839;
    r_1375737349 = ({m_type: NTI1375735540, combined: {Field0: [], Field1: {Field0: null, Field1: null}}, whitespace: {Field0: [], Field1: {Field0: null, Field1: null}}, comment: {Field0: [], Field1: {Field0: null, Field1: null}}, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_1375737347 = r_1375737349;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737347;

}

function Whitespace_1375737338(whitespace_1375737339, comment_1375737340) {
    var Temporary1;
    var Temporary2;

  var result_1375737341 = null;

  var F = {procname: "parse.Whitespace", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1185;
    F.filename = "parse.nim";
    F.line = 1185;
    if (contains_754976583(whitespace_1375737339, [10])) {
    Temporary1 = mrx_1375731791(whitespace_1375737339);
    }
    else {
    Temporary1 = rx_1375731767(whitespace_1375737339);
    }
    
    var wsInfo_1375737342 = nimCopy(null, Temporary1, NTI1375731734);
    F.line = 1186;
    if (contains_754976583(comment_1375737340, [10])) {
    Temporary2 = mrx_1375731791(comment_1375737340);
    }
    else {
    Temporary2 = rx_1375731767(comment_1375737340);
    }
    
    var commentInfo_1375737343 = nimCopy(null, Temporary2, NTI1375731734);
    result_1375737341 = init_1375737307(new_1375737344(), wsInfo_1375737342, commentInfo_1375737343);
  framePtr = F.prev;

  return result_1375737341;

}

function HEX40_1375737694(a_1375737696) {
  var result_1375737697 = [];

  var F = {procname: "@.@", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1462;
    F.filename = "system.nim";
    result_1375737697 = new Array(chckRange((a_1375737696).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((a_1375737696).length, 0, 2147483647) ; ++i) { result_1375737697[i] = null; }    Label1: {
      F.line = 1463;
      var i_1375737713 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536873027 = 0;
      F.line = 1463;
      F.filename = "system.nim";
      colontmp__536873027 = subInt((a_1375737696).length, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536873028 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536873028 <= colontmp__536873027)) break Label3;
            F.line = 1463;
            F.filename = "system.nim";
            i_1375737713 = res_536873028;
            F.line = 1463;
            result_1375737697[chckIndx(i_1375737713, 0, (result_1375737697).length - 1)] = a_1375737696[chckIndx(i_1375737713, 0, (a_1375737696).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536873028 = addInt(res_536873028, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1375737697;

}

function init_1375737690(alternative_1375737691, parsers_1375737692) {
  var result_1375737693 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1364;
    F.filename = "parse.nim";
    var _ = init_1375732674(alternative_1375737691, [58,65,108,116,101,114,110,97,116,105,118,101]);
    F.line = 1365;
    alternative_1375737691.subParsers = nimCopy(null, HEX40_1375737694(parsers_1375737692), NTI1375735793);
    F.line = 1366;
    alternative_1375737691.flags[1] = true;
    F.line = 1367;
    result_1375737693 = alternative_1375737691;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737693;

}

function new_1375737779() {
  var result_1375737782 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_1375737784 = null;
    F.line = 839;
    r_1375737784 = ({m_type: NTI1375735787, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_1375737782 = r_1375737784;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737782;

}

function add_1375737814(x_1375737816, x_1375737816_Idx, y_1375737817) {
    var Temporary1;

  var F = {procname: "add.add", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1204;
    F.filename = "system.nim";
    var xl_1375737821 = (x_1375737816[x_1375737816_Idx]).length;
    F.line = 1205;
    if (x_1375737816[x_1375737816_Idx].length < (Temporary1 = chckRange(addInt(xl_1375737821, (y_1375737817).length), 0, 2147483647), Temporary1)) { for (var i = x_1375737816[x_1375737816_Idx].length ; i < Temporary1 ; ++i) x_1375737816[x_1375737816_Idx].push(null); }
               else { x_1375737816[x_1375737816_Idx].length = Temporary1; };
    Label2: {
      F.line = 1206;
      var i_1375737836 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536873031 = 0;
      F.line = 1206;
      F.filename = "system.nim";
      colontmp__536873031 = (y_1375737817).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536873032 = 0;
      Label3: {
        F.line = 91;
          Label4: while (true) {
          if (!(res_536873032 <= colontmp__536873031)) break Label4;
            F.line = 1206;
            F.filename = "system.nim";
            i_1375737836 = res_536873032;
            F.line = 1206;
            x_1375737816[x_1375737816_Idx][chckIndx(addInt(xl_1375737821, i_1375737836), 0, (x_1375737816[x_1375737816_Idx]).length - 1)] = y_1375737817[chckIndx(i_1375737836, 0, (y_1375737817).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536873032 = addInt(res_536873032, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function HEX7C_1375737775(alternative_1375737776, other_1375737777) {
  var result_1375737778 = null;

  var F = {procname: "parse.|", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(alternative_1375737776.pname, []))) {
    F.line = 1388;
    F.filename = "parse.nim";
    result_1375737778 = init_1375737690(new_1375737779(), [alternative_1375737776, other_1375737777]);
    break BeforeRet;
    }
    
    if (eqStrings(other_1375737777.pname, [])) {
    F.line = 1390;
    add_1375737814(alternative_1375737776, "subParsers", other_1375737777.subParsers);
    }
    else {
      F.line = 1392;
    alternative_1375737776.subParsers.push(other_1375737777);;
    }
    
    F.line = 1393;
    result_1375737778 = alternative_1375737776;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737778;

}

function HEX7C_1375737887(alternative_1375737888, other_1375737889) {
  var result_1375737890 = null;

  var F = {procname: "parse.|", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(alternative_1375737888.pname, []))) {
    F.line = 1396;
    F.filename = "parse.nim";
    result_1375737890 = init_1375737690(new_1375737779(), [alternative_1375737888, other_1375737889]);
    break BeforeRet;
    }
    
    F.line = 1397;
    alternative_1375737888.subParsers.push(other_1375737889);;
    F.line = 1398;
    result_1375737890 = alternative_1375737888;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737890;

}

function init_1375735908(errorCatching_1375735909, ptype_1375735910, mandatory_1375735911, skipList_1375735916, resumeList_1375735921, errorList_1375735926) {
  var result_1375735927 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 755;
    F.filename = "parse.nim";
    var _ = init_1375732674(errorCatching_1375735909, ptype_1375735910);
    F.line = 756;
    errorCatching_1375735909.flags[5] = true;
    F.line = 757;
    errorCatching_1375735909.mandatory = mandatory_1375735911;
    F.line = 758;
    errorCatching_1375735909.skipList = nimCopy(null, skipList_1375735916, NTI1375734141);
    F.line = 759;
    errorCatching_1375735909.resumeList = nimCopy(null, resumeList_1375735921, NTI1375734152);
    F.line = 760;
    errorCatching_1375735909.errorList = nimCopy(null, errorList_1375735926, NTI1375734163);
    F.line = 761;
    result_1375735927 = errorCatching_1375735909;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375735927;

}

function init_1375737948(series_1375737949, parsers_1375737950, mandatory_1375737951) {
                      var Temporary7;

  var result_1375737952 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((1 <= (parsers_1375737950).length))) {
    F.line = 1430;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1430, 3) `parsers.len >= 1` "));
    }
    
    F.line = 1431;
    var _ = init_1375735908(series_1375737949, [58,83,101,114,105,101,115], mandatory_1375737951, [], [], []);
    F.line = 1432;
    series_1375737949.flags[1] = true;
    F.line = 1433;
    series_1375737949.subParsers = nimCopy(null, HEX40_1375737694(parsers_1375737950), NTI1375735793);
    Label1: {
      F.line = 1435;
      var i_1375737968 = (-1);
      Label2: {
        F.line = 1434;
        var subP_1375737972 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536873037 = 0;
        F.line = 242;
        var L_536873038 = (series_1375737949.subParsers).length;
        Label3: {
          F.line = 243;
            Label4: while (true) {
            if (!(i_536873037 < L_536873038)) break Label4;
              F.line = 1435;
              F.filename = "parse.nim";
              subP_1375737972 = series_1375737949.subParsers[chckIndx(i_536873037, 0, (series_1375737949.subParsers).length - 1)];
              F.line = 1435;
              i_1375737968 = addInt(i_1375737968, 1);
              F.line = 1435;
              var p_1375737978 = subP_1375737972;
              Label5: {
                F.line = 1436;
                  Label6: while (true) {
                  if (!((((p_1375737978.subParsers).length == 1) && eqStrings(p_1375737978.ptype, [58,83,101,114,105,101,115])) && eqStrings(p_1375737978.pname, []))) break Label6;
                      if (!(p_1375737978.mandatory == 0)) Temporary7 = false; else {                        Temporary7 = (i_1375737968 < series_1375737949.mandatory);                      }                    if (Temporary7) {
                    F.line = 1438;
                    series_1375737949.mandatory = i_1375737968;
                    }
                    
                    F.line = 1439;
                    p_1375737978 = p_1375737978.subParsers[chckIndx(0, 0, (p_1375737978.subParsers).length - 1)];
                    F.line = 1440;
                    series_1375737949.subParsers[chckIndx(i_1375737968, 0, (series_1375737949.subParsers).length - 1)] = p_1375737978;
                  }
              };
              F.line = 245;
              F.filename = "iterators.nim";
              i_536873037 = addInt(i_536873037, 1);
              if (!(((series_1375737949.subParsers).length == L_536873038))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
    F.line = 1441;
    F.filename = "parse.nim";
    result_1375737952 = series_1375737949;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737952;

}

function new_1375738039() {
  var result_1375738042 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_1375738044 = null;
    F.line = 839;
    r_1375738044 = ({m_type: NTI1375735979, mandatory: 0, skipList: [], resumeList: [], errorList: [], referredParsers: [], ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_1375738042 = r_1375738044;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375738042;

}

function HEX26_1375737909(x_1375737911, y_1375737912) {
  var result_1375737913 = [];

  var F = {procname: "&.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1531;
    F.filename = "system.nim";
    result_1375737913 = new Array(chckRange(addInt((x_1375737911).length, (y_1375737912).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_1375737911).length, (y_1375737912).length), 0, 2147483647) ; ++i) { result_1375737913[i] = null; }    Label1: {
      F.line = 1532;
      var i_1375737931 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536873041 = 0;
      F.line = 1532;
      F.filename = "system.nim";
      colontmp__536873041 = subInt((x_1375737911).length, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536873042 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536873042 <= colontmp__536873041)) break Label3;
            F.line = 1532;
            F.filename = "system.nim";
            i_1375737931 = res_536873042;
            F.line = 1532;
            result_1375737913[chckIndx(i_1375737931, 0, (result_1375737913).length - 1)] = x_1375737911[chckIndx(i_1375737931, 0, (x_1375737911).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536873042 = addInt(res_536873042, 1);
          }
      };
    };
    Label4: {
      F.line = 1534;
      F.filename = "system.nim";
      var i_1375737939 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536873045 = 0;
      F.line = 1534;
      F.filename = "system.nim";
      colontmp__536873045 = subInt((y_1375737912).length, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536873046 = 0;
      Label5: {
        F.line = 91;
          Label6: while (true) {
          if (!(res_536873046 <= colontmp__536873045)) break Label6;
            F.line = 1534;
            F.filename = "system.nim";
            i_1375737939 = res_536873046;
            F.line = 1534;
            result_1375737913[chckIndx(addInt(i_1375737939, (x_1375737911).length), 0, (result_1375737913).length - 1)] = y_1375737912[chckIndx(i_1375737939, 0, (y_1375737912).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536873046 = addInt(res_536873046, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1375737913;

}

function HEX26_1375738383(other_1375738384, series_1375738385) {
  var result_1375738386 = null;

  var F = {procname: "parse.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(series_1375738385.pname, []))) {
    F.line = 1524;
    F.filename = "parse.nim";
    result_1375738386 = init_1375737948(new_1375738039(), [other_1375738384, series_1375738385], 1073741824);
    break BeforeRet;
    }
    
    F.line = 1525;
    series_1375738385.subParsers = nimCopy(null, HEX26_1375737909([other_1375738384], series_1375738385.subParsers), NTI1375735955);
    if ((series_1375738385.mandatory < 1073741824)) {
    F.line = 1527;
    series_1375738385.mandatory = ((series_1375738385.mandatory + 1) >>> 0);
    }
    
    F.line = 1528;
    result_1375738386 = series_1375738385;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375738386;

}

function HEXC2HEXA7_1375738035(parser_1375738036) {
  var result_1375738037 = null;

  var F = {procname: "parse.\xC2\xA7", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((eqStrings(parser_1375738036.pname, []) && eqStrings(parser_1375738036.ptype, [58,83,101,114,105,101,115]))) {
    F.line = 1451;
    F.filename = "parse.nim";
    var series_1375738038 = parser_1375738036;
    F.line = 1452;
    series_1375738038.mandatory = 0;
    F.line = 1453;
    result_1375738037 = series_1375738038;
    break BeforeRet;
    }
    
    F.line = 1454;
    result_1375738037 = init_1375737948(new_1375738039(), [parser_1375738036], 0);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375738037;

}

function HEX26_1375738402(parser_1375738403, other_1375738404) {
  var result_1375738405 = null;

  var F = {procname: "parse.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1530;
    F.filename = "parse.nim";
    result_1375738405 = init_1375737948(new_1375738039(), [parser_1375738403, other_1375738404], 1073741824);
  framePtr = F.prev;

  return result_1375738405;

}

function min_1375738352(x_1375738354, y_1375738355) {
    var Temporary1;

  var result_1375738356 = 0;

    if ((x_1375738354 <= y_1375738355)) {
    Temporary1 = x_1375738354;
    }
    else {
    Temporary1 = y_1375738355;
    }
    
    result_1375738356 = Temporary1;

  return result_1375738356;

}

function mergeErrorLists_1375736218(left_1375736219, right_1375736220) {
  var F = {procname: "parse.mergeErrorLists", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 859;
      F.filename = "parse.nim";
      var m_1375736224 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873049 = 0;
      F.line = 242;
      var L_536873050 = (right_1375736220.skipList).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873049 < L_536873050)) break Label3;
            F.line = 859;
            F.filename = "parse.nim";
            m_1375736224 = right_1375736220.skipList[chckIndx(i_536873049, 0, (right_1375736220.skipList).length - 1)];
            F.line = 859;
            var Temporary4 = nimCopy(null, m_1375736224, NTI1375731762);
            left_1375736219.skipList.push(Temporary4);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873049 = addInt(i_536873049, 1);
            if (!(((right_1375736220.skipList).length == L_536873050))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label5: {
      F.line = 860;
      F.filename = "parse.nim";
      var m_1375736232 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873053 = 0;
      F.line = 242;
      var L_536873054 = (right_1375736220.resumeList).length;
      Label6: {
        F.line = 243;
          Label7: while (true) {
          if (!(i_536873053 < L_536873054)) break Label7;
            F.line = 860;
            F.filename = "parse.nim";
            m_1375736232 = right_1375736220.resumeList[chckIndx(i_536873053, 0, (right_1375736220.resumeList).length - 1)];
            F.line = 860;
            var Temporary8 = nimCopy(null, m_1375736232, NTI1375731762);
            left_1375736219.resumeList.push(Temporary8);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873053 = addInt(i_536873053, 1);
            if (!(((right_1375736220.resumeList).length == L_536873054))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label9: {
      F.line = 861;
      F.filename = "parse.nim";
      var em_1375736240 = {Field0: ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null}), Field1: []};
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873058 = 0;
      F.line = 242;
      var L_536873059 = (right_1375736220.errorList).length;
      Label10: {
        F.line = 243;
          Label11: while (true) {
          if (!(i_536873058 < L_536873059)) break Label11;
            F.line = 861;
            F.filename = "parse.nim";
            em_1375736240 = right_1375736220.errorList[chckIndx(i_536873058, 0, (right_1375736220.errorList).length - 1)];
            F.line = 861;
            var Temporary12 = nimCopy(null, em_1375736240, NTI1375731763);
            left_1375736219.errorList.push(Temporary12);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873058 = addInt(i_536873058, 1);
            if (!(((right_1375736220.errorList).length == L_536873059))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label13: {
      F.line = 862;
      F.filename = "parse.nim";
      var p_1375736248 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873066 = 0;
      F.line = 242;
      var L_536873067 = (right_1375736220.referredParsers).length;
      Label14: {
        F.line = 243;
          Label15: while (true) {
          if (!(i_536873066 < L_536873067)) break Label15;
            F.line = 862;
            F.filename = "parse.nim";
            p_1375736248 = right_1375736220.referredParsers[chckIndx(i_536873066, 0, (right_1375736220.referredParsers).length - 1)];
            Label16: {
              Label17: {
                F.line = 864;
                var q_1375736253 = null;
                F.line = 241;
                F.filename = "iterators.nim";
                var i_536873063 = 0;
                F.line = 242;
                var L_536873064 = (left_1375736219.referredParsers).length;
                Label18: {
                  F.line = 243;
                    Label19: while (true) {
                    if (!(i_536873063 < L_536873064)) break Label19;
                      F.line = 864;
                      F.filename = "parse.nim";
                      q_1375736253 = left_1375736219.referredParsers[chckIndx(i_536873063, 0, (left_1375736219.referredParsers).length - 1)];
                      if ((p_1375736248 == q_1375736253)) {
                      F.line = 865;
                      break Label16;
                      }
                      
                      F.line = 245;
                      F.filename = "iterators.nim";
                      i_536873063 = addInt(i_536873063, 1);
                      if (!(((left_1375736219.referredParsers).length == L_536873064))) {
                      F.line = 246;
                      failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                };
              };
              F.line = 866;
              F.filename = "parse.nim";
              left_1375736219.referredParsers.push(p_1375736248);;
            };
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873066 = addInt(i_536873066, 1);
            if (!(((right_1375736220.referredParsers).length == L_536873067))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  
}

function HEX3CHEX3C_1375738346(left_1375738347, right_1375738348) {
  var F = {procname: "parse.<<", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (((1073741824 <= left_1375738347.mandatory) && (right_1375738348.mandatory < 1073741824))) {
    F.line = 1506;
    F.filename = "parse.nim";
    left_1375738347.mandatory = min_1375738352((((left_1375738347.subParsers).length + right_1375738348.mandatory) >>> 0), 1073741824);
    }
    
    F.line = 1507;
    add_1375737814(left_1375738347, "subParsers", right_1375738348.subParsers);
    F.line = 1508;
    mergeErrorLists_1375736218(left_1375738347, right_1375738348);
  framePtr = F.prev;

  
}

function HEX26_1375738361(series_1375738362, other_1375738363) {
  var result_1375738364 = null;

  var F = {procname: "parse.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(series_1375738362.pname, []))) {
    F.line = 1511;
    F.filename = "parse.nim";
    result_1375738364 = init_1375737948(new_1375738039(), [series_1375738362, other_1375738363], 1073741824);
    break BeforeRet;
    }
    
    if (eqStrings(name_1375732769(other_1375738363), [])) {
    F.line = 1513;
    HEX3CHEX3C_1375738346(series_1375738362, other_1375738363);
    }
    else {
      F.line = 1515;
    series_1375738362.subParsers.push(other_1375738363);;
    }
    
    F.line = 1516;
    result_1375738364 = series_1375738362;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375738364;

}

function hash_1375738789(x_1375738791) {
  var result_1375738792 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 214;
    F.filename = "hashes.nim";
    result_1375738792 = hashWangYi1_1107296449(BigInt.asUintN(64, BigInt(x_1375738791)));
  framePtr = F.prev;

  return result_1375738792;

}

function rawGet_1375738782(t_1375738785, key_1375738786, hc_1375738787, hc_1375738787_Idx) {
  var result_1375738788 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 59;
    F.filename = "hashcommon.nim";
    hc_1375738787[hc_1375738787_Idx] = hash_1375738789(key_1375738786);
    if ((hc_1375738787[hc_1375738787_Idx] == 0)) {
    F.line = 61;
    hc_1375738787[hc_1375738787_Idx] = 314159265;
    }
    
    if (((t_1375738785.data).length == 0)) {
    F.line = 43;
    result_1375738788 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_1375738862 = (hc_1375738787[hc_1375738787_Idx] & (t_1375738785.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1342177311(t_1375738785.data[chckIndx(h_1375738862, 0, (t_1375738785.data).length - 1)].Field0)) break Label2;
          if (((t_1375738785.data[chckIndx(h_1375738862, 0, (t_1375738785.data).length - 1)].Field0 == hc_1375738787[hc_1375738787_Idx]) && (t_1375738785.data[chckIndx(h_1375738862, 0, (t_1375738785.data).length - 1)].Field1 == key_1375738786))) {
          F.line = 51;
          result_1375738788 = h_1375738862;
          break BeforeRet;
          }
          
          F.line = 52;
          h_1375738862 = nextTry_1342177314(h_1375738862, (t_1375738785.data).length - 1);
        }
    };
    F.line = 53;
    result_1375738788 = subInt((-1), h_1375738862);
  };
  framePtr = F.prev;

  return result_1375738788;

}

function hasKey_1375738775(t_1375738778, key_1375738779) {
  var result_1375738780 = false;

  var F = {procname: "hasKey.hasKey", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 372;
    F.filename = "tables.nim";
    var hc_1375738781 = [0];
    F.line = 373;
    result_1375738780 = (0 <= rawGet_1375738782(t_1375738778, key_1375738779, hc_1375738781, 0));
  framePtr = F.prev;

  return result_1375738780;

}

function contains_1375738769(t_1375738772, key_1375738773) {
  var result_1375738774 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 383;
    F.filename = "tables.nim";
    result_1375738774 = hasKey_1375738775(t_1375738772, key_1375738773);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375738774;

}

function raiseKeyError_1375739196(key_1375739198) {
  var F = {procname: "raiseKeyError.raiseKeyError", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 235;
    F.filename = "tables.nim";
    raiseException({message: ([107,101,121,32,110,111,116,32,102,111,117,110,100,58,32] || []).concat(HEX24_369098760(((key_1375739198) | 0)) || []), parent: null, m_type: NTI134217747, name: null, trace: [], up: null}, "KeyError");
  framePtr = F.prev;

  
}

function HEX5BHEX5D_1375739125(t_1375739128, key_1375739129) {
  var result_1375739130 = null;
  var result_1375739130_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 243;
    F.filename = "tables.nim";
    var hcHEX60gensym22_1375739131 = [0];
    F.line = 244;
    var indexHEX60gensym22_1375739138 = rawGet_1375738782(t_1375739128, key_1375739129, hcHEX60gensym22_1375739131, 0);
    if ((0 <= indexHEX60gensym22_1375739138)) {
    F.line = 245;
    result_1375739130 = t_1375739128.data[chckIndx(indexHEX60gensym22_1375739138, 0, (t_1375739128.data).length - 1)]; result_1375739130_Idx = "Field2";
    }
    else {
      F.line = 247;
    raiseKeyError_1375739196(key_1375739129);
    }
    
  framePtr = F.prev;

  return [result_1375739130, result_1375739130_Idx];

}

function mustRehash_1375739459(t_1375739461) {
  var result_1375739462 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_1375739461.counter < (t_1375739461.data).length))) {
    F.line = 34;
    F.filename = "hashcommon.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 35;
    result_1375739462 = ((mulInt((t_1375739461.data).length, 2) < mulInt(t_1375739461.counter, 3)) || (subInt((t_1375739461.data).length, t_1375739461.counter) < 4));
  framePtr = F.prev;

  return result_1375739462;

}

function rawInsert_1375739968(t_1375739972, data_1375739973, data_1375739973_Idx, key_1375739974, val_1375739975, hc_1375739976, h_1375739977) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 25;
    F.filename = "tableimpl.nim";
    data_1375739973[data_1375739973_Idx][chckIndx(h_1375739977, 0, (data_1375739973[data_1375739973_Idx]).length - 1)].Field1 = key_1375739974;
    F.line = 26;
    data_1375739973[data_1375739973_Idx][chckIndx(h_1375739977, 0, (data_1375739973[data_1375739973_Idx]).length - 1)].Field2 = val_1375739975;
    F.line = 27;
    data_1375739973[data_1375739973_Idx][chckIndx(h_1375739977, 0, (data_1375739973[data_1375739973_Idx]).length - 1)].Field0 = hc_1375739976;
  framePtr = F.prev;

  
}

function enlarge_1375739647(t_1375739650) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 250;
    F.filename = "tables.nim";
    var n_1375739653 = [];
    F.line = 251;
    n_1375739653 = new Array(chckRange(mulInt((t_1375739650.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_1375739650.data).length, 2), 0, 2147483647) ; ++i) { n_1375739653[i] = {Field0: 0, Field1: 0, Field2: 0}; }    F.line = 252;
    var Temporary1 = t_1375739650.data; t_1375739650.data = n_1375739653; n_1375739653 = Temporary1;    Label2: {
      F.line = 253;
      var i_1375739728 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__536873076 = 0;
      F.line = 253;
      F.filename = "tables.nim";
      colontmp__536873076 = (n_1375739653).length - 1;
      F.line = 65;
      F.filename = "iterators_1.nim";
      var res_536873077 = 0;
      Label3: {
        F.line = 66;
          Label4: while (true) {
          if (!(res_536873077 <= colontmp__536873076)) break Label4;
            F.line = 253;
            F.filename = "tables.nim";
            i_1375739728 = res_536873077;
            F.line = 254;
            var eh_1375739786 = n_1375739653[chckIndx(i_1375739728, 0, (n_1375739653).length - 1)].Field0;
            if (isFilled_1342177311(eh_1375739786)) {
            F.line = 256;
            var j_1375739790 = (eh_1375739786 & (t_1375739650.data).length - 1);
            Label5: {
              F.line = 257;
                Label6: while (true) {
                if (!isFilled_1342177311(t_1375739650.data[chckIndx(j_1375739790, 0, (t_1375739650.data).length - 1)].Field0)) break Label6;
                  F.line = 258;
                  j_1375739790 = nextTry_1342177314(j_1375739790, (t_1375739650.data).length - 1);
                }
            };
            F.line = 260;
            rawInsert_1375739968(t_1375739650, t_1375739650, "data", n_1375739653[chckIndx(i_1375739728, 0, (n_1375739653).length - 1)].Field1, n_1375739653[chckIndx(i_1375739728, 0, (n_1375739653).length - 1)].Field2, eh_1375739786, j_1375739790);
            }
            
            F.line = 68;
            F.filename = "iterators_1.nim";
            res_536873077 = addInt(res_536873077, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function rawGetKnownHC_1375740149(t_1375740152, key_1375740153, hc_1375740154) {
  var result_1375740155 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((t_1375740152.data).length == 0)) {
    F.line = 43;
    F.filename = "hashcommon.nim";
    result_1375740155 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_1375740217 = (hc_1375740154 & (t_1375740152.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_1342177311(t_1375740152.data[chckIndx(h_1375740217, 0, (t_1375740152.data).length - 1)].Field0)) break Label2;
          if (((t_1375740152.data[chckIndx(h_1375740217, 0, (t_1375740152.data).length - 1)].Field0 == hc_1375740154) && (t_1375740152.data[chckIndx(h_1375740217, 0, (t_1375740152.data).length - 1)].Field1 == key_1375740153))) {
          F.line = 51;
          result_1375740155 = h_1375740217;
          break BeforeRet;
          }
          
          F.line = 52;
          h_1375740217 = nextTry_1342177314(h_1375740217, (t_1375740152.data).length - 1);
        }
    };
    F.line = 53;
    result_1375740155 = subInt((-1), h_1375740217);
  };
  framePtr = F.prev;

  return result_1375740155;

}

function HEX5BHEX5DHEX3D_1375739260(t_1375739263, key_1375739264, val_1375739265) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_1375739263.data).length == 0)) {
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym357_1375739325 = slotsNeeded_1342177322(32);
    F.line = 169;
    t_1375739263.counter = 0;
    F.line = 170;
    t_1375739263.data = new Array(chckRange(correctSizeHEX60gensym357_1375739325, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym357_1375739325, 0, 2147483647) ; ++i) { t_1375739263.data[i] = {Field0: 0, Field1: 0, Field2: 0}; }    }
    
    F.line = 59;
    var hc_1375739330 = [0];
    F.line = 60;
    var index_1375739337 = rawGet_1375738782(t_1375739263, key_1375739264, hc_1375739330, 0);
    if ((0 <= index_1375739337)) {
    F.line = 61;
    t_1375739263.data[chckIndx(index_1375739337, 0, (t_1375739263.data).length - 1)].Field2 = val_1375739265;
    }
    else {
      if (((t_1375739263.data).length == 0)) {
      F.line = 165;
      var correctSizeHEX60gensym360_1375739454 = slotsNeeded_1342177322(32);
      F.line = 169;
      t_1375739263.counter = 0;
      F.line = 170;
      t_1375739263.data = new Array(chckRange(correctSizeHEX60gensym360_1375739454, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym360_1375739454, 0, 2147483647) ; ++i) { t_1375739263.data[i] = {Field0: 0, Field1: 0, Field2: 0}; }      }
      
      if (mustRehash_1375739459(t_1375739263)) {
      F.line = 51;
      enlarge_1375739647(t_1375739263);
      F.line = 52;
      index_1375739337 = rawGetKnownHC_1375740149(t_1375739263, key_1375739264, hc_1375739330[0]);
      }
      
      F.line = 53;
      index_1375739337 = subInt((-1), index_1375739337);
      F.line = 54;
      rawInsert_1375739968(t_1375739263, t_1375739263, "data", key_1375739264, val_1375739265, hc_1375739330[0], index_1375739337);
      F.line = 62;
      t_1375739263.counter = addInt(t_1375739263.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function HEX28HEX29_1375735631(parser_1375735632, location_1375735633) {
  var result_1375735634 = {Field0: null, Field1: 0};

  var F = {procname: "parse.()", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 637;
    F.filename = "parse.nim";
    result_1375735634 = nimCopy(result_1375735634, parser_1375735632.call(parser_1375735632, location_1375735633), NTI1375731757);
  framePtr = F.prev;

  return result_1375735634;

}

function forwardWrapper_1375738590(parser_1375738591, location_1375738592) {
    var Temporary1;

  var result_1375738593 = {Field0: null, Field1: 0};

  var F = {procname: "parse.forwardWrapper", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1625;
    F.filename = "parse.nim";
    var grammar_1375738594 = grammar_1375733213(parser_1375738591);
    if ((location_1375738592 <= grammar_1375738594.rollbackLocation)) {
    F.line = 1626;
    rollback_1375733815(grammar_1375738594, location_1375738592);
    }
    
    if (contains_1375733942(parser_1375738591.visited, ((location_1375738592) | 0))) {
    F.line = 1627;
    result_1375738593 = nimCopy(result_1375738593, HEX5BHEX5D_1375734273(parser_1375738591.visited, ((location_1375738592) | 0)), NTI1375731757);
    break BeforeRet;
    }
    
    F.line = 1629;
    var depth_1375738715 = 0;
    if (contains_1375738769(parser_1375738591.recursionCounter, location_1375738592)) {
    F.line = 1631;
    depth_1375738715 = (Temporary1 = HEX5BHEX5D_1375739125(parser_1375738591.recursionCounter, location_1375738592), Temporary1)[0][Temporary1[1]];
    if ((depth_1375738715 == 0)) {
    F.line = 1633;
    delete grammar_1375738594.flags[1];
    F.line = 1634;
    var colontmp__536873069 = null;
    F.line = 1634;
    var colontmp__536873070 = location_1375738592;
    F.line = 1634;
    result_1375738593 = nimCopy(result_1375738593, {Field0: colontmp__536873069, Field1: colontmp__536873070}, NTI1375731757);
    }
    else {
      F.line = 1636;
      HEX5BHEX5DHEX3D_1375739260(parser_1375738591.recursionCounter, location_1375738592, subInt(depth_1375738715, 1));
      F.line = 1637;
      result_1375738593 = nimCopy(result_1375738593, HEX28HEX29_1375735631(parser_1375738591.subParsers[chckIndx(0, 0, (parser_1375738591.subParsers).length - 1)], location_1375738592), NTI1375731757);
      F.line = 1638;
      HEX5BHEX5DHEX3D_1375739260(parser_1375738591.recursionCounter, location_1375738592, depth_1375738715);
    }
    
    }
    else {
      F.line = 1640;
      HEX5BHEX5DHEX3D_1375739260(parser_1375738591.recursionCounter, location_1375738592, 0);
      F.line = 1641;
      var memoization_1375740506 = (grammar_1375738594.flags[1] != undefined);
      F.line = 1642;
      grammar_1375738594.flags[1] = true;
      F.line = 1644;
      result_1375738593 = nimCopy(result_1375738593, HEX28HEX29_1375735631(parser_1375738591.subParsers[chckIndx(0, 0, (parser_1375738591.subParsers).length - 1)], location_1375738592), NTI1375731757);
      if (!((result_1375738593.Field0 == null))) {
      F.line = 1647;
      depth_1375738715 = 1;
      Label2: {
        F.line = 1649;
          Label3: while (true) {
          if (!true) break Label3;
            F.line = 1650;
            HEX5BHEX5DHEX3D_1375739260(parser_1375738591.recursionCounter, location_1375738592, depth_1375738715);
            F.line = 1651;
            grammar_1375738594.flags[1] = true;
            F.line = 1652;
            var rb_1375740567 = (grammar_1375738594.rollbackStack).length;
            F.line = 1653;
            var nextResult_1375740568 = HEX28HEX29_1375735631(parser_1375738591.subParsers[chckIndx(0, 0, (parser_1375738591.subParsers).length - 1)], location_1375738592);
            if ((nextResult_1375740568.Field1 <= result_1375738593.Field1)) {
            Label4: {
              F.line = 1656;
                Label5: while (true) {
                if (!(rb_1375740567 < (grammar_1375738594.rollbackStack).length)) break Label5;
                  F.line = 1657;
                  var rbItem_1375740575 = pop_1375733848(grammar_1375738594, "rollbackStack");
                  F.line = 1658;
                  rbItem_1375740575.Field1();
                  if ((0 < (grammar_1375738594.rollbackStack).length)) {
                  F.line = 1660;
                  grammar_1375738594.rollbackLocation = HEX5BHEX5D_1375733823(grammar_1375738594.rollbackStack, 1).Field0;
                  }
                  else {
                    F.line = 1662;
                    grammar_1375738594.rollbackLocation = (-2);
                  }
                  
                }
            };
            F.line = 1663;
            break Label2;
            }
            
            F.line = 1665;
            result_1375738593 = nimCopy(result_1375738593, nextResult_1375740568, NTI1375731757);
            F.line = 1666;
            depth_1375738715 = addInt(depth_1375738715, 1);
          }
      };
      }
      
      if (!(memoization_1375740506)) {
      F.line = 1668;
      delete grammar_1375738594.flags[1];
      }
      
      if ((grammar_1375738594.flags[1] != undefined)) {
      F.line = 1669;
      HEX5BHEX5DHEX3D_1375734463(parser_1375738591.visited, ((location_1375738592) | 0), result_1375738593);
      }
      
    }
    
  };
  framePtr = F.prev;

  return result_1375738593;

}

function initTable_1375741137(initialSize_1375741140) {
  var result_1375741141 = ({data: [], counter: 0});

  var F = {procname: "initTable.initTable", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym374_1375741143 = slotsNeeded_1342177322(chckRange(initialSize_1375741140, 0, 2147483647));
    F.line = 169;
    result_1375741141.counter = 0;
    F.line = 170;
    result_1375741141.data = new Array(chckRange(correctSizeHEX60gensym374_1375741143, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym374_1375741143, 0, 2147483647) ; ++i) { result_1375741141.data[i] = {Field0: 0, Field1: 0, Field2: 0}; }  framePtr = F.prev;

  return result_1375741141;

}

function init_1375741130(forward_1375741131) {
  var result_1375741132 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1677;
    F.filename = "parse.nim";
    var _ = init_1375732674(forward_1375741131, [58,70,111,114,119,97,114,100]);
    F.line = 1678;
    forward_1375741131.flags[6] = true;
    F.line = 1679;
    forward_1375741131.call = forwardWrapper_1375738590;
    F.line = 1680;
    forward_1375741131.recursionCounter = nimCopy(forward_1375741131.recursionCounter, initTable_1375741137(32), NTI1375736438);
    F.line = 1681;
    result_1375741132 = forward_1375741131;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375741132;

}

function new_536871575() {
  var result_536871578 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_536871580 = null;
    F.line = 839;
    r_536871580 = ({m_type: NTI1375736430, recursionCounter: ({data: [], counter: 0}), ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_536871578 = r_536871580;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_536871578;

}

function set_1375741166(forward_1375741167, parser_1375741168) {
  var F = {procname: "parse.set", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1687;
    F.filename = "parse.nim";
    forward_1375741167.subParsers = nimCopy(null, [parser_1375741168], NTI1375735649);
    if (eqStrings(parser_1375741168.pname, [])) {
    if (!(eqStrings(forward_1375741167.pname, []))) {
    F.line = 1690;
    var _ = assignName_1375732840(forward_1375741167.pname, parser_1375741168);
    F.line = 1691;
    forward_1375741167.symbol = parser_1375741168;
    }
    
    }
    
    if ((forward_1375741167.flags[7] != undefined)) {
    F.line = 1692;
    parser_1375741168.flags[7] = true;
    }
    
    if ((parser_1375741168.flags[9] != undefined)) {
    F.line = 1694;
    forward_1375741167.flags[9] = true;
    }
    else {
      if (!((forward_1375741167.flags[7] != undefined))) {
      F.line = 1696;
      delete parser_1375741168.flags[7];
      }
      
      F.line = 1697;
      delete forward_1375741167.flags[9];
    }
    
    F.line = 1698;
    forward_1375741167.pname = nimCopy(null, [], NTI33554449);
  framePtr = F.prev;

  
}

function getSubParsers_1375733062(parser_1375733063) {
  var result_1375733064 = [];

  var F = {procname: "parse.getSubParsers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 314;
    F.filename = "parse.nim";
    F.line = 314;
    var collectResult_1375733065 = [];
    Label1: {
      F.line = 315;
      var p_1375733080 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873081 = 0;
      F.line = 242;
      var L_536873082 = (parser_1375733063.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873081 < L_536873082)) break Label3;
            F.line = 315;
            F.filename = "parse.nim";
            p_1375733080 = parser_1375733063.subParsers[chckIndx(i_536873081, 0, (parser_1375733063.subParsers).length - 1)];
            F.line = 315;
            collectResult_1375733065.push(p_1375733080);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873081 = addInt(i_536873081, 1);
            if (!(((parser_1375733063.subParsers).length == L_536873082))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    result_1375733064 = nimCopy(null, collectResult_1375733065, NTI1375732514);
  framePtr = F.prev;

  return result_1375733064;

}

function Drop_1375736758(parser_1375736759) {
  var result_1375736760 = null;

  var F = {procname: "parse.Drop", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 967;
    F.filename = "parse.nim";
    F.line = 967;
    parser_1375736759.flags = nimCopy(parser_1375736759.flags, SetPlus(parser_1375736759.flags, ConstSet20), NTI1375731766);
    result_1375736760 = parser_1375736759;
  framePtr = F.prev;

  return result_1375736760;

}

function RegExp_1375737219(reStr_1375737220) {
    var Temporary1;

  var result_1375737221 = null;

  var F = {procname: "parse.RegExp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1122;
    F.filename = "parse.nim";
    F.line = 1122;
    if (contains_754976583(reStr_1375737220, [10])) {
    Temporary1 = mrx_1375731791(reStr_1375737220);
    }
    else {
    Temporary1 = rx_1375731767(reStr_1375737220);
    }
    
    var reInfo_1375737222 = nimCopy(null, Temporary1, NTI1375731734);
    result_1375737221 = init_1375737193(new_1375737223(), reInfo_1375737222);
  framePtr = F.prev;

  return result_1375737221;

}

function HEX26_1375738372(series_1375738373, other_1375738374) {
  var result_1375738375 = null;

  var F = {procname: "parse.&", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(eqStrings(series_1375738373.pname, []))) {
    F.line = 1519;
    F.filename = "parse.nim";
    result_1375738375 = init_1375737948(new_1375738039(), [series_1375738373, other_1375738374], 1073741824);
    break BeforeRet;
    }
    
    F.line = 1520;
    series_1375738373.subParsers.push(other_1375738374);;
    F.line = 1521;
    result_1375738375 = series_1375738373;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375738375;

}

function init_1375737476(repeat_1375737477, parser_1375737478, repRange_1375737479, name_1375737480) {
  var result_1375737481 = null;

  var F = {procname: "parse.init", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((repRange_1375737479["Field0"] < repRange_1375737479["Field1"]))) {
    F.line = 1265;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1265, 3) `repRange[1] > repRange[0]` "));
    }
    
    F.line = 1266;
    var _ = init_1375732674(repeat_1375737477, name_1375737480);
    F.line = 1267;
    repeat_1375737477.subParsers = nimCopy(null, [parser_1375737478], NTI1375735649);
    F.line = 1268;
    repeat_1375737477.repRange = nimCopy(repeat_1375737477.repRange, repRange_1375737479, NTI1375735634);
    F.line = 1269;
    result_1375737481 = repeat_1375737477;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737481;

}

function new_536871736() {
  var result_536871739 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 836;
    F.filename = "system.nim";
    var r_536871741 = null;
    F.line = 839;
    r_536871741 = ({m_type: NTI1375735636, repRange: {Field0: 0, Field1: 0}, ptype: [], pname: [], nodeName: [null, 0], flags: {}, uniqueID: 0, grammarVar: null, symbol: null, subParsers: [], call: null, visited: ({data: [], counter: 0})});
    F.line = 840;
    result_536871739 = r_536871741;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_536871739;

}

function find_922746934(a_922746937, item_922746938) {
  var result_922746939 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1665;
    F.filename = "system.nim";
    result_922746939 = 0;
    Label1: {
      F.line = 1666;
      var i_922746943 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_671088929 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_671088929 < (a_922746937).length)) break Label3;
            F.line = 1666;
            F.filename = "system.nim";
            i_922746943 = a_922746937[chckIndx(i_671088929, 0, (a_922746937).length - 1)];
            if (eqStrings(i_922746943, item_922746938)) {
            F.line = 1667;
            break BeforeRet;
            }
            
            F.line = 1666;
            result_922746939 = addInt(result_922746939, 1);
            F.line = 16;
            F.filename = "iterators.nim";
            i_671088929 = addInt(i_671088929, 1);
          }
      };
    };
    F.line = 1669;
    F.filename = "system.nim";
    result_922746939 = (-1);
  };
  framePtr = F.prev;

  return result_922746939;

}

function contains_922746929(a_922746931, item_922746932) {
  var result_922746933 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1683;
    F.filename = "system.nim";
    result_922746933 = (0 <= find_922746934(a_922746931, item_922746932));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_922746933;

}

function setMatcherList_1375736399(errorCatcher_1375736401, list_1375736402, listName_1375736403) {
              var Temporary4;

  var F = {procname: "setMatcherList.setMatcherList", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!((errorCatcher_1375736401.flags[5] != undefined))) {
    F.line = 869;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(869, 5) `\x0Acontains(errorCatcher.flags, isErrorCatching)` "));
    }
    
    F.line = 870;
    var catcher_1375736413 = errorCatcher_1375736401;
    if (eqStrings(listName_1375736403, [101,114,114,111,114,115])) {
    if (!(((catcher_1375736413.errorList).length == 0))) {
    F.line = 891;
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(891, 9) `catcher.errorList.len == 0` ") || []).concat(HEX24_1375733037(catcher_1375736413) || [],[58,32,115,107,105,112,76,105,115,116,32,99,97,110,110,111,116,32,98,101,32,115,101,116,32,116,119,105,99,101,33] || []));
    }
    
    F.line = 892;
    catcher_1375736413.errorList = nimCopy(null, list_1375736402, NTI1375734551);
    }
    else {
      F.line = 894;
      raiseException({message: ([70,111,114,32,116,121,112,101,32,84,32,61,32,77,97,116,99,104,101,114,44,32,108,105,115,116,78,97,109,101,32,109,117,115,116,32,98,101,32,34,101,114,114,111,114,115,34,44,32,98,117,116,32,110,111,116,32,34] || []).concat(listName_1375736403 || [],[34,33] || []), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
    }
    
    if (!((errorCatcher_1375736401.grammarVar == GrammarPlaceholder_1375732179))) {
    Label1: {
      F.line = 897;
      var em_1375736430 = {Field0: ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null}), Field1: []};
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873096 = 0;
      F.line = 242;
      var L_536873097 = (list_1375736402).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873096 < L_536873097)) break Label3;
            F.line = 897;
            F.filename = "parse.nim";
            em_1375736430 = list_1375736402[chckIndx(i_536873096, 0, (list_1375736402).length - 1)];
            F.line = 898;
            var matcher_1375736431 = nimCopy(null, em_1375736430.Field0, NTI1375731762);
            F.line = 897;
            switch (matcher_1375736431.kind) {
            case 3:
              F.line = 901;
              var Temporary4 = matcher_1375736431;
              if (ConstSet22[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1375731760)); }
              grammarHEX3D_1375733262(Temporary4.consumeParser, grammar_1375733213(errorCatcher_1375736401));
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873096 = addInt(i_536873096, 1);
            if (!(((list_1375736402).length == L_536873097))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  framePtr = F.prev;

  
}

function anonSubs_1375733091(parser_1375733092) {
  var result_1375733093 = [];

  var F = {procname: "parse.anonSubs", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 324;
    F.filename = "parse.nim";
    F.line = 324;
    var collectResult_1375733094 = [];
    Label1: {
      F.line = 325;
      var p_1375733112 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873100 = 0;
      F.line = 242;
      var L_536873101 = (parser_1375733092.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873100 < L_536873101)) break Label3;
            F.line = 325;
            F.filename = "parse.nim";
            p_1375733112 = parser_1375733092.subParsers[chckIndx(i_536873100, 0, (parser_1375733092.subParsers).length - 1)];
            if ((((name_1375732769(p_1375733112)).length == 0) || (parser_1375733092.flags[6] != undefined))) {
            F.line = 341;
            F.filename = "sugar.nim";
            collectResult_1375733094.push(p_1375733112);;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873100 = addInt(i_536873100, 1);
            if (!(((parser_1375733092.subParsers).length == L_536873101))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    result_1375733093 = nimCopy(null, collectResult_1375733094, NTI1375732514);
  framePtr = F.prev;

  return result_1375733093;

}

function isActive_1375736024(catcher_1375736025) {
  var result_1375736026 = false;

  var F = {procname: "parse.isActive", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 787;
    F.filename = "parse.nim";
    result_1375736026 = (catcher_1375736025.mandatory < 1073741824);
  framePtr = F.prev;

  return result_1375736026;

}

function attachMatchers_1375736319(parser_1375736321, list_1375736322, listName_1375736323, failIfAmbiguous_1375736324) {
                var Temporary8;

  var F = {procname: "attachMatchers.attachMatchers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!(contains_922746929(ErrorCatcherListNames_1375736302, listName_1375736323))) {
    F.line = 909;
    F.filename = "parse.nim";
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(909, 3) `\x0Acontains(ErrorCatcherListNames, listName)` ") || []).concat(listName_1375736323 || [],[105,115,32,110,111,116,32,111,110,101,32,111,102,32] || [],nsuJoinSep(ErrorCatcherListNames_1375736302, [44,32]) || []));
    }
    
    if (!((0 < (list_1375736322).length))) {
    F.line = 911;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(911, 3) `\x0A0 < list.len` Empty lists are not allowed"));
    }
    
    if ((parser_1375736321.flags[5] != undefined)) {
    F.line = 913;
    setMatcherList_1375736399(parser_1375736321, list_1375736322, listName_1375736323);
    }
    else {
      F.line = 916;
      var pname_1375736436 = nimCopy(null, parser_1375736321.pname, NTI33554449);
      F.line = 917;
      var ptype_1375736437 = nimCopy(null, parser_1375736321.ptype, NTI33554449);
      F.line = 918;
      var lname_1375736438 = nimCopy(null, listName_1375736323, NTI33554449);
      F.line = 919;
      Label1: {
        F.line = 919;
        var fmtRes_1375736443 = [mnewString(0)];
        F.line = 919;
        fmtRes_1375736443[0].push.apply(fmtRes_1375736443[0], [80,97,114,115,101,114,32]);;
        F.line = 919;
        formatValue_1207959723(fmtRes_1375736443, 0, pname_1375736436, []);
        F.line = 919;
        fmtRes_1375736443[0].push.apply(fmtRes_1375736443[0], [58]);;
        F.line = 919;
        formatValue_1207959723(fmtRes_1375736443, 0, ptype_1375736437, []);
        F.line = 919;
        fmtRes_1375736443[0].push.apply(fmtRes_1375736443[0], [32,99,111,110,116,97,105,110,115,32,109,111,114,101,32,116,104,97,110,32]);;
      };
      Label2: {
        F.line = 921;
        var fmtRes_1375736448 = [mnewString(0)];
        F.line = 921;
        fmtRes_1375736448[0].push.apply(fmtRes_1375736448[0], [32,117,110,99,108,101,97,114,32,116,111,32,119,104,105,99,104,32,111,102,32,116,104,101,115,101,32,116,104,101,32]);;
        F.line = 921;
        formatValue_1207959723(fmtRes_1375736448, 0, lname_1375736438, []);
        F.line = 921;
        fmtRes_1375736448[0].push.apply(fmtRes_1375736448[0], [32,115,104,111,117,108,100,32,98,101,32,97,116,116,97,99,104,101,100,33]);;
      };
      var ambigErr_1375736449 = (fmtRes_1375736443[0] || []).concat(makeNimstrLit("one error catching parser (Series or Interleave), so that it remains") || [],fmtRes_1375736448[0] || []);
      F.line = 922;
      Label3: {
        F.line = 922;
        var fmtRes_1375736454 = [mnewString(0)];
        F.line = 922;
        fmtRes_1375736454[0].push.apply(fmtRes_1375736454[0], [80,97,114,115,101,114,32]);;
        F.line = 922;
        formatValue_1207959723(fmtRes_1375736454, 0, pname_1375736436, []);
        F.line = 922;
        fmtRes_1375736454[0].push.apply(fmtRes_1375736454[0], [58]);;
        F.line = 922;
        formatValue_1207959723(fmtRes_1375736454, 0, ptype_1375736437, []);
        F.line = 922;
        fmtRes_1375736454[0].push.apply(fmtRes_1375736454[0], [32,110,101,105,116,104,101,114,32]);;
      };
      Label4: {
        F.line = 924;
        var fmtRes_1375736459 = [mnewString(0)];
        F.line = 924;
        formatValue_1207959723(fmtRes_1375736459, 0, lname_1375736438, []);
        F.line = 924;
        fmtRes_1375736459[0].push.apply(fmtRes_1375736459[0], [32,99,111,117,108,100,32,98,101,32,97,116,116,97,99,104,101,100,33]);;
      };
      var notAcatcherErr_1375736460 = (fmtRes_1375736454[0] || []).concat([99,111,110,116,97,105,110,115,32,97,110,121,32,110,111,114,32,105,115,32,105,116,115,101,108,102,32,97,110,32,101,114,114,111,114,32,99,97,116,99,104,105,110,103,32,112,97,114,115,101,114,32,116,111,32,119,104,105,99,104,32] || [],fmtRes_1375736459[0] || []);
      F.line = 925;
      var ambiguityFlag_1375736461 = false;
      Label5: {
        F.line = 926;
        var p_1375736465 = null;
        F.line = 239;
        F.filename = "iterators.nim";
        var colontmp__536873091 = [];
        F.line = 376;
        F.filename = "parse.nim";
        colontmp__536873091 = descendants_1375733169(parser_1375736321, anonSubs_1375733091);
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536873092 = 0;
        F.line = 242;
        var L_536873093 = (colontmp__536873091).length;
        Label6: {
          F.line = 243;
            Label7: while (true) {
            if (!(i_536873092 < L_536873093)) break Label7;
              F.line = 376;
              F.filename = "parse.nim";
              p_1375736465 = colontmp__536873091[chckIndx(i_536873092, 0, (colontmp__536873091).length - 1)];
                if (!(p_1375736465.flags[5] != undefined)) Temporary8 = false; else {                  Temporary8 = isActive_1375736024(p_1375736465);                }              if (Temporary8) {
              if (ambiguityFlag_1375736461) {
              F.line = 929;
              raiseException({message: nimCopy(null, ambigErr_1375736449, NTI33554449), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
              }
              
              F.line = 930;
              setMatcherList_1375736399(p_1375736465, list_1375736322, listName_1375736323);
              F.line = 931;
              if (p_1375736465.referredParsers.length < 0) { for (var i = p_1375736465.referredParsers.length ; i < 0 ; ++i) p_1375736465.referredParsers.push(null); }
               else { p_1375736465.referredParsers.length = 0; };
              if (!(failIfAmbiguous_1375736324)) {
              F.line = 933;
              break Label5;
              }
              
              F.line = 934;
              ambiguityFlag_1375736461 = true;
              }
              
              F.line = 245;
              F.filename = "iterators.nim";
              i_536873092 = addInt(i_536873092, 1);
              if (!(((colontmp__536873091).length == L_536873093))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 378;
      F.filename = "parse.nim";
      resetTraversalTracker_1375733194(parser_1375736321);
      if (!(ambiguityFlag_1375736461)) {
      F.line = 936;
      rawEcho(name_1375732769(parser_1375736321.subParsers[chckIndx(0, 0, (parser_1375736321.subParsers).length - 1)]));
      F.line = 937;
      raiseException({message: nimCopy(null, notAcatcherErr_1375736460, NTI33554449), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
      }
      
    }
    
  framePtr = F.prev;

  
}

function errors_1375736315(parser_1375736316, errors_1375736317, unambig_1375736318) {
  var F = {procname: "parse.errors", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 941;
    F.filename = "parse.nim";
    attachMatchers_1375736319(parser_1375736316, errors_1375736317, [101,114,114,111,114,115], unambig_1375736318);
  framePtr = F.prev;

  
}

function HEX24_1275070271(node_1275070272) {
  var result_1275070273 = [];

  var F = {procname: "nodetree.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/nodetree.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 292;
    F.filename = "nodetree.nim";
    result_1275070273 = nimCopy(null, asSxpr_1275069001(node_1275070272), NTI33554449);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1275070273;

}

function setMatcherList_1375736611(errorCatcher_1375736613, list_1375736614, listName_1375736615) {
              var Temporary4;

  var F = {procname: "setMatcherList.setMatcherList", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!((errorCatcher_1375736613.flags[5] != undefined))) {
    F.line = 869;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(869, 5) `\x0Acontains(errorCatcher.flags, isErrorCatching)` "));
    }
    
    F.line = 870;
    var catcher_1375736625 = errorCatcher_1375736613;
    F.line = 872;
    switch (toJSStr(listName_1375736615)) {
    case "skip-matchers":
      if (!(((catcher_1375736625.skipList).length == 0))) {
      F.line = 874;
      failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(874, 9) `catcher.skipList.len == 0` ") || []).concat(HEX24_1375733037(catcher_1375736625) || [],[58,32,115,107,105,112,76,105,115,116,32,99,97,110,110,111,116,32,98,101,32,115,101,116,32,116,119,105,99,101,33] || []));
      }
      
      F.line = 875;
      catcher_1375736625.skipList = nimCopy(null, list_1375736614, NTI1375734713);
      break;
    case "resume-matchers":
      if (!(((catcher_1375736625.resumeList).length == 0))) {
      F.line = 877;
      failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(877, 9) `catcher.resumeList.len == 0` ") || []).concat(HEX24_1375733037(catcher_1375736625) || [],[58,32,115,107,105,112,76,105,115,116,32,99,97,110,110,111,116,32,98,101,32,115,101,116,32,116,119,105,99,101,33] || []));
      }
      
      F.line = 878;
      catcher_1375736625.resumeList = nimCopy(null, list_1375736614, NTI1375734713);
      break;
    default: 
      F.line = 880;
      raiseException({message: (makeNimstrLit("For type T = Matcher, listName must be \"skip-matchers\" or \"resume-machters\", but not \"") || []).concat(listName_1375736615 || [],[34,33] || []), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
      break;
    }
    if (!((errorCatcher_1375736613.grammarVar == GrammarPlaceholder_1375732179))) {
    Label1: {
      F.line = 884;
      var matcher_1375736650 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873115 = 0;
      F.line = 242;
      var L_536873116 = (list_1375736614).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873115 < L_536873116)) break Label3;
            F.line = 884;
            F.filename = "parse.nim";
            matcher_1375736650 = list_1375736614[chckIndx(i_536873115, 0, (list_1375736614).length - 1)];
            F.line = 884;
            switch (matcher_1375736650.kind) {
            case 3:
              F.line = 887;
              var Temporary4 = matcher_1375736650;
              if (ConstSet24[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1375731760)); }
              grammarHEX3D_1375733262(Temporary4.consumeParser, grammar_1375733213(errorCatcher_1375736613));
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873115 = addInt(i_536873115, 1);
            if (!(((list_1375736614).length == L_536873116))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  framePtr = F.prev;

  
}

function attachMatchers_1375736531(parser_1375736533, list_1375736534, listName_1375736535, failIfAmbiguous_1375736536) {
                var Temporary8;

  var F = {procname: "attachMatchers.attachMatchers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!(contains_922746929(ErrorCatcherListNames_1375736302, listName_1375736535))) {
    F.line = 909;
    F.filename = "parse.nim";
    failedAssertImpl_268435541((makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(909, 3) `\x0Acontains(ErrorCatcherListNames, listName)` ") || []).concat(listName_1375736535 || [],[105,115,32,110,111,116,32,111,110,101,32,111,102,32] || [],nsuJoinSep(ErrorCatcherListNames_1375736302, [44,32]) || []));
    }
    
    if (!((0 < (list_1375736534).length))) {
    F.line = 911;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(911, 3) `\x0A0 < list.len` Empty lists are not allowed"));
    }
    
    if ((parser_1375736533.flags[5] != undefined)) {
    F.line = 913;
    setMatcherList_1375736611(parser_1375736533, list_1375736534, listName_1375736535);
    }
    else {
      F.line = 916;
      var pname_1375736659 = nimCopy(null, parser_1375736533.pname, NTI33554449);
      F.line = 917;
      var ptype_1375736660 = nimCopy(null, parser_1375736533.ptype, NTI33554449);
      F.line = 918;
      var lname_1375736661 = nimCopy(null, listName_1375736535, NTI33554449);
      F.line = 919;
      Label1: {
        F.line = 919;
        var fmtRes_1375736666 = [mnewString(0)];
        F.line = 919;
        fmtRes_1375736666[0].push.apply(fmtRes_1375736666[0], [80,97,114,115,101,114,32]);;
        F.line = 919;
        formatValue_1207959723(fmtRes_1375736666, 0, pname_1375736659, []);
        F.line = 919;
        fmtRes_1375736666[0].push.apply(fmtRes_1375736666[0], [58]);;
        F.line = 919;
        formatValue_1207959723(fmtRes_1375736666, 0, ptype_1375736660, []);
        F.line = 919;
        fmtRes_1375736666[0].push.apply(fmtRes_1375736666[0], [32,99,111,110,116,97,105,110,115,32,109,111,114,101,32,116,104,97,110,32]);;
      };
      Label2: {
        F.line = 921;
        var fmtRes_1375736671 = [mnewString(0)];
        F.line = 921;
        fmtRes_1375736671[0].push.apply(fmtRes_1375736671[0], [32,117,110,99,108,101,97,114,32,116,111,32,119,104,105,99,104,32,111,102,32,116,104,101,115,101,32,116,104,101,32]);;
        F.line = 921;
        formatValue_1207959723(fmtRes_1375736671, 0, lname_1375736661, []);
        F.line = 921;
        fmtRes_1375736671[0].push.apply(fmtRes_1375736671[0], [32,115,104,111,117,108,100,32,98,101,32,97,116,116,97,99,104,101,100,33]);;
      };
      var ambigErr_1375736672 = (fmtRes_1375736666[0] || []).concat(makeNimstrLit("one error catching parser (Series or Interleave), so that it remains") || [],fmtRes_1375736671[0] || []);
      F.line = 922;
      Label3: {
        F.line = 922;
        var fmtRes_1375736677 = [mnewString(0)];
        F.line = 922;
        fmtRes_1375736677[0].push.apply(fmtRes_1375736677[0], [80,97,114,115,101,114,32]);;
        F.line = 922;
        formatValue_1207959723(fmtRes_1375736677, 0, pname_1375736659, []);
        F.line = 922;
        fmtRes_1375736677[0].push.apply(fmtRes_1375736677[0], [58]);;
        F.line = 922;
        formatValue_1207959723(fmtRes_1375736677, 0, ptype_1375736660, []);
        F.line = 922;
        fmtRes_1375736677[0].push.apply(fmtRes_1375736677[0], [32,110,101,105,116,104,101,114,32]);;
      };
      Label4: {
        F.line = 924;
        var fmtRes_1375736682 = [mnewString(0)];
        F.line = 924;
        formatValue_1207959723(fmtRes_1375736682, 0, lname_1375736661, []);
        F.line = 924;
        fmtRes_1375736682[0].push.apply(fmtRes_1375736682[0], [32,99,111,117,108,100,32,98,101,32,97,116,116,97,99,104,101,100,33]);;
      };
      var notAcatcherErr_1375736683 = (fmtRes_1375736677[0] || []).concat([99,111,110,116,97,105,110,115,32,97,110,121,32,110,111,114,32,105,115,32,105,116,115,101,108,102,32,97,110,32,101,114,114,111,114,32,99,97,116,99,104,105,110,103,32,112,97,114,115,101,114,32,116,111,32,119,104,105,99,104,32] || [],fmtRes_1375736682[0] || []);
      F.line = 925;
      var ambiguityFlag_1375736684 = false;
      Label5: {
        F.line = 926;
        var p_1375736688 = null;
        F.line = 239;
        F.filename = "iterators.nim";
        var colontmp__536873110 = [];
        F.line = 376;
        F.filename = "parse.nim";
        colontmp__536873110 = descendants_1375733169(parser_1375736533, anonSubs_1375733091);
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536873111 = 0;
        F.line = 242;
        var L_536873112 = (colontmp__536873110).length;
        Label6: {
          F.line = 243;
            Label7: while (true) {
            if (!(i_536873111 < L_536873112)) break Label7;
              F.line = 376;
              F.filename = "parse.nim";
              p_1375736688 = colontmp__536873110[chckIndx(i_536873111, 0, (colontmp__536873110).length - 1)];
                if (!(p_1375736688.flags[5] != undefined)) Temporary8 = false; else {                  Temporary8 = isActive_1375736024(p_1375736688);                }              if (Temporary8) {
              if (ambiguityFlag_1375736684) {
              F.line = 929;
              raiseException({message: nimCopy(null, ambigErr_1375736672, NTI33554449), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
              }
              
              F.line = 930;
              setMatcherList_1375736611(p_1375736688, list_1375736534, listName_1375736535);
              F.line = 931;
              if (p_1375736688.referredParsers.length < 0) { for (var i = p_1375736688.referredParsers.length ; i < 0 ; ++i) p_1375736688.referredParsers.push(null); }
               else { p_1375736688.referredParsers.length = 0; };
              if (!(failIfAmbiguous_1375736536)) {
              F.line = 933;
              break Label5;
              }
              
              F.line = 934;
              ambiguityFlag_1375736684 = true;
              }
              
              F.line = 245;
              F.filename = "iterators.nim";
              i_536873111 = addInt(i_536873111, 1);
              if (!(((colontmp__536873110).length == L_536873112))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 378;
      F.filename = "parse.nim";
      resetTraversalTracker_1375733194(parser_1375736533);
      if (!(ambiguityFlag_1375736684)) {
      F.line = 936;
      rawEcho(name_1375732769(parser_1375736533.subParsers[chckIndx(0, 0, (parser_1375736533.subParsers).length - 1)]));
      F.line = 937;
      raiseException({message: nimCopy(null, notAcatcherErr_1375736683, NTI33554449), parent: null, m_type: NTI134217745, name: null, trace: [], up: null}, "AssertionDefect");
      }
      
    }
    
  framePtr = F.prev;

  
}

function resume_1375736744(parser_1375736745, resumeMatcher_1375736746, unambig_1375736747) {
  var F = {procname: "parse.resume", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 960;
    F.filename = "parse.nim";
    attachMatchers_1375736531(parser_1375736745, [nimCopy(null, resumeMatcher_1375736746, NTI1375731762)], [114,101,115,117,109,101,45,109,97,116,99,104,101,114,115], unambig_1375736747);
  framePtr = F.prev;

  
}

function atRe_1375735854(reStr_1375735855) {
  var result_1375735856 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});

  var F = {procname: "parse.atRe", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 746;
    F.filename = "parse.nim";
    result_1375735856 = nimCopy(result_1375735856, {kind: 0, rxInfo: nimCopy(null, rx_1375731767(reStr_1375735855), NTI1375731734), cmpStr: [], findProc: null, consumeParser: null}, NTI1375731762);
  framePtr = F.prev;

  return result_1375735856;

}

function addQuoted_536872148(s_536872150, s_536872150_Idx, x_536872151) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2521;
    F.filename = "system.nim";
    s_536872150[s_536872150_Idx].push.apply(s_536872150[s_536872150_Idx], HEX24_1241514063(x_536872151));;
  framePtr = F.prev;

  
}

function collectionToString_536872108(x_536872110, prefix_536872111, separator_536872112, suffix_536872113) {
  var result_536872114 = [[]];

  var F = {procname: "collectionToString.collectionToString", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 90;
    F.filename = "dollars.nim";
    result_536872114[0] = nimCopy(null, prefix_536872111, NTI33554449);
    F.line = 91;
    var firstElement_536872115 = true;
    Label1: {
      F.line = 92;
      var value_536872138 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873120 = 0;
      F.line = 242;
      var L_536873121 = (x_536872110).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873120 < L_536873121)) break Label3;
            F.line = 92;
            F.filename = "dollars.nim";
            value_536872138 = x_536872110[i_536873120];
            if (firstElement_536872115) {
            F.line = 94;
            firstElement_536872115 = false;
            }
            else {
              F.line = 96;
            result_536872114[0].push.apply(result_536872114[0], separator_536872112);;
            }
            
            if ((value_536872138 == null)) {
            F.line = 101;
            result_536872114[0].push.apply(result_536872114[0], [110,105,108]);;
            }
            else {
              F.line = 103;
            addQuoted_536872148(result_536872114, 0, value_536872138);
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873120 += 1;
            if (!(((x_536872110).length == L_536873121))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 106;
    F.filename = "dollars.nim";
    result_536872114[0].push.apply(result_536872114[0], suffix_536872113);;
  framePtr = F.prev;

  return result_536872114[0];

}

function HEX24_536872104(x_536872106) {
  var result_536872107 = [];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 117;
    F.filename = "dollars.nim";
    result_536872107 = nimCopy(null, collectionToString_536872108(x_536872106, [64,91], [44,32], [93]), NTI33554449);
  framePtr = F.prev;

  return result_536872107;

}

function skipUntil_1375736704(parser_1375736705, skipMatcher_1375736706, unambig_1375736707) {
  var F = {procname: "parse.skipUntil", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 954;
    F.filename = "parse.nim";
    attachMatchers_1375736531(parser_1375736705, [nimCopy(null, skipMatcher_1375736706, NTI1375731762)], [115,107,105,112,45,109,97,116,99,104,101,114,115], unambig_1375736707);
  framePtr = F.prev;

  
}
  var Temporary116;
  var Temporary224;
        var Temporary252;
var F = {procname: "module test_parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim", line: 0};
framePtr = F;
F.line = 544;
F.filename = "unittest.nim";
ensureInitialized_671089364();
if (shouldRun_671089231([], [84,101,120,116,44,32,115,105,109,112,108,101,32,116,101,115,116])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536870923 = [0];
Label3: {
  F.line = 550;
  var formatter_536870927 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872463 = 0;
  F.line = 242;
  var L_536872464 = (formatters_671088684[0]).length;
  Label4: {
    F.line = 243;
      Label5: while (true) {
      if (!(i_536872463 < L_536872464)) break Label5;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536870927[0] = formatters_671088684[0][chckIndx(i_536872463, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536870927[0], [84,101,120,116,44,32,115,105,109,112,108,101,32,116,101,115,116]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872463 = addInt(i_536872463, 1);
        if (!(((formatters_671088684[0]).length == L_536872464))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
Label7: {
  F.line = 664;
  var HEX3Ac1_536871048 = [asSxpr_1275069001(HEX28HEX29_536870978(init_1375736785(new_536870938(), [65]), [65], 0).Field0)];
  if (eqStrings(HEX3Ac1_536871048[0], [40,58,84,101,120,116,32,34,65,34,41])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(12, 35): Check failed: Text(\"A\")(\"A\").root.asSxpr == \"(:Text \\\"A\\\")\""));
    F.line = 669;
    checkpoint_671089446(([84,101,120,116,40,34,65,34,41,40,34,65,34,41,46,114,111,111,116,46,97,115,83,120,112,114,32,119,97,115,32] || []).concat(HEX3Ac1_536871048[0] || []));
    F.line = 613;
    testStatusIMPL_536870923[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label8: {
      F.line = 620;
      var formatterHEX60gensym9_536871053 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872468 = 0;
      F.line = 242;
      var L_536872469 = (formatters_671088684[0]).length;
      Label9: {
        F.line = 243;
          Label10: while (true) {
          if (!(i_536872468 < L_536872469)) break Label10;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym9_536871053[0] = formatters_671088684[0][chckIndx(i_536872468, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym9_536871053[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872468 = addInt(i_536872468, 1);
            if (!(((formatters_671088684[0]).length == L_536872469))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536871058 = getCurrentException();
F.line = 564;
var eTypeDesc_536871059 = ([91] || []).concat(exceptionTypeName_671089436(e_536871058) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871059 || []));
if ((e_536871058 == null)) {
F.line = 613;
testStatusIMPL_536870923[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label11: {
  F.line = 620;
  var formatterHEX60gensym10_536871068 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872472 = 0;
  F.line = 242;
  var L_536872473 = (formatters_671088684[0]).length;
  Label12: {
    F.line = 243;
      Label13: while (true) {
      if (!(i_536872472 < L_536872473)) break Label13;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym10_536871068[0] = formatters_671088684[0][chckIndx(i_536872472, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym10_536871068[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872472 = addInt(i_536872472, 1);
        if (!(((formatters_671088684[0]).length == L_536872473))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536871073 = [getStackTrace_33556645(e_536871058)];
  F.line = 613;
  testStatusIMPL_536870923[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label14: {
    F.line = 620;
    var formatterHEX60gensym11_536871078 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872476 = 0;
    F.line = 242;
    var L_536872477 = (formatters_671088684[0]).length;
    Label15: {
      F.line = 243;
        Label16: while (true) {
        if (!(i_536872476 < L_536872477)) break Label16;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym11_536871078[0] = formatters_671088684[0][chckIndx(i_536872476, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym11_536871078[0], checkpoints_671088683[0], stackTrace_536871073[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872476 = addInt(i_536872476, 1);
          if (!(((formatters_671088684[0]).length == L_536872477))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536870923[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536871087 = {suiteName: [], testName: [84,101,120,116,44,32,115,105,109,112,108,101,32,116,101,115,116], status: testStatusIMPL_536870923[0]};
F.line = 580;
testEnded_671089427(testResult_536871087);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 544;
ensureInitialized_671089364();
if (shouldRun_671089231([], [82,101,103,69,120,112,44,32,115,105,109,112,108,101,32,116,101,115,116])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536871096 = [0];
Label17: {
  F.line = 550;
  var formatter_536871100 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872480 = 0;
  F.line = 242;
  var L_536872481 = (formatters_671088684[0]).length;
  Label18: {
    F.line = 243;
      Label19: while (true) {
      if (!(i_536872480 < L_536872481)) break Label19;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536871100[0] = formatters_671088684[0][chckIndx(i_536872480, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536871100[0], [82,101,103,69,120,112,44,32,115,105,109,112,108,101,32,116,101,115,116]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872480 = addInt(i_536872480, 1);
        if (!(((formatters_671088684[0]).length == L_536872481))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
Label21: {
  F.line = 664;
  var HEX3Ac1_536871109 = [asSxpr_1275069001(HEX28HEX29_536870978(init_1375737193(new_1375737223(), rx_1375731767([92,119,43])), [65,66,67], 0).Field0)];
  if (eqStrings(HEX3Ac1_536871109[0], [40,58,82,101,103,69,120,112,32,34,65,66,67,34,41])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(15, 45): Check failed: RegExp(rx\"\\w+\")(\"ABC\").root.asSxpr() == \"(:RegExp \\\"ABC\\\")\""));
    F.line = 669;
    checkpoint_671089446(([82,101,103,69,120,112,40,114,120,34,92,119,43,34,41,40,34,65,66,67,34,41,46,114,111,111,116,46,97,115,83,120,112,114,40,41,32,119,97,115,32] || []).concat(HEX3Ac1_536871109[0] || []));
    F.line = 613;
    testStatusIMPL_536871096[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label22: {
      F.line = 620;
      var formatterHEX60gensym17_536871114 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872485 = 0;
      F.line = 242;
      var L_536872486 = (formatters_671088684[0]).length;
      Label23: {
        F.line = 243;
          Label24: while (true) {
          if (!(i_536872485 < L_536872486)) break Label24;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym17_536871114[0] = formatters_671088684[0][chckIndx(i_536872485, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym17_536871114[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872485 = addInt(i_536872485, 1);
            if (!(((formatters_671088684[0]).length == L_536872486))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536871119 = getCurrentException();
F.line = 564;
var eTypeDesc_536871120 = ([91] || []).concat(exceptionTypeName_671089436(e_536871119) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871120 || []));
if ((e_536871119 == null)) {
F.line = 613;
testStatusIMPL_536871096[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label25: {
  F.line = 620;
  var formatterHEX60gensym18_536871129 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872489 = 0;
  F.line = 242;
  var L_536872490 = (formatters_671088684[0]).length;
  Label26: {
    F.line = 243;
      Label27: while (true) {
      if (!(i_536872489 < L_536872490)) break Label27;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym18_536871129[0] = formatters_671088684[0][chckIndx(i_536872489, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym18_536871129[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872489 = addInt(i_536872489, 1);
        if (!(((formatters_671088684[0]).length == L_536872490))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536871134 = [getStackTrace_33556645(e_536871119)];
  F.line = 613;
  testStatusIMPL_536871096[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label28: {
    F.line = 620;
    var formatterHEX60gensym19_536871139 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872493 = 0;
    F.line = 242;
    var L_536872494 = (formatters_671088684[0]).length;
    Label29: {
      F.line = 243;
        Label30: while (true) {
        if (!(i_536872493 < L_536872494)) break Label30;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym19_536871139[0] = formatters_671088684[0][chckIndx(i_536872493, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym19_536871139[0], checkpoints_671088683[0], stackTrace_536871134[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872493 = addInt(i_536872493, 1);
          if (!(((formatters_671088684[0]).length == L_536872494))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536871096[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536871148 = {suiteName: [], testName: [82,101,103,69,120,112,44,32,115,105,109,112,108,101,32,116,101,115,116], status: testStatusIMPL_536871096[0]};
F.line = 580;
testEnded_671089427(testResult_536871148);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 544;
ensureInitialized_671089364();
if (shouldRun_671089231([], [82,101,103,69,120,112,32,105,110,32,115,101,113,117,101,110,99,101])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536871157 = [0];
Label31: {
  F.line = 550;
  var formatter_536871161 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872497 = 0;
  F.line = 242;
  var L_536872498 = (formatters_671088684[0]).length;
  Label32: {
    F.line = 243;
      Label33: while (true) {
      if (!(i_536872497 < L_536872498)) break Label33;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536871161[0] = formatters_671088684[0][chckIndx(i_536872497, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536871161[0], [82,101,103,69,120,112,32,105,110,32,115,101,113,117,101,110,99,101]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872497 = addInt(i_536872497, 1);
        if (!(((formatters_671088684[0]).length == L_536872498))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
F.line = 18;
F.filename = "test_parse.nim";
var number_536871166 = assignName_1375732840([110,117,109,98,101,114], init_1375737193(new_1375737223(), rx_1375731767([92,100,43])));
F.line = 19;
var ws_536871171 = assignName_1375732840([119,115], init_1375737193(new_1375737223(), rx_1375731767([92,115,42])));
F.line = 20;
var text_536871175 = toStringSlice_1375731983([49]);
Label35: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536871229 = [asSxpr_1275069001(HEX28HEX29_536871176(number_536871166, text_536871175, 0).Field0)];
  if (eqStrings(HEX3Ac1_536871229[0], [40,110,117,109,98,101,114,32,34,49,34,41])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(21, 36): Check failed: number(text, 0).root.asSxpr == \"(number \\\"1\\\")\""));
    F.line = 669;
    checkpoint_671089446(([110,117,109,98,101,114,40,116,101,120,116,44,32,48,41,46,114,111,111,116,46,97,115,83,120,112,114,32,119,97,115,32] || []).concat(HEX3Ac1_536871229[0] || []));
    F.line = 613;
    testStatusIMPL_536871157[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label36: {
      F.line = 620;
      var formatterHEX60gensym32_536871234 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872502 = 0;
      F.line = 242;
      var L_536872503 = (formatters_671088684[0]).length;
      Label37: {
        F.line = 243;
          Label38: while (true) {
          if (!(i_536872502 < L_536872503)) break Label38;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym32_536871234[0] = formatters_671088684[0][chckIndx(i_536872502, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym32_536871234[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872502 = addInt(i_536872502, 1);
            if (!(((formatters_671088684[0]).length == L_536872503))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label39: {
  F.line = 664;
  var HEX3Ac1_536871244 = [asSxpr_1275069001(HEX28HEX29_536871176(ws_536871171, text_536871175, 1).Field0)];
  if (eqStrings(HEX3Ac1_536871244[0], [40,119,115,32,34,34,41])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(22, 32): Check failed: ws(text, 1).root.asSxpr == \"(ws \\\"\\\")\""));
    F.line = 669;
    checkpoint_671089446(([119,115,40,116,101,120,116,44,32,49,41,46,114,111,111,116,46,97,115,83,120,112,114,32,119,97,115,32] || []).concat(HEX3Ac1_536871244[0] || []));
    F.line = 613;
    testStatusIMPL_536871157[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label40: {
      F.line = 620;
      var formatterHEX60gensym36_536871249 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872507 = 0;
      F.line = 242;
      var L_536872508 = (formatters_671088684[0]).length;
      Label41: {
        F.line = 243;
          Label42: while (true) {
          if (!(i_536872507 < L_536872508)) break Label42;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym36_536871249[0] = formatters_671088684[0][chckIndx(i_536872507, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym36_536871249[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872507 = addInt(i_536872507, 1);
            if (!(((formatters_671088684[0]).length == L_536872508))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536871254 = getCurrentException();
F.line = 564;
var eTypeDesc_536871255 = ([91] || []).concat(exceptionTypeName_671089436(e_536871254) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871255 || []));
if ((e_536871254 == null)) {
F.line = 613;
testStatusIMPL_536871157[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label43: {
  F.line = 620;
  var formatterHEX60gensym37_536871264 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872511 = 0;
  F.line = 242;
  var L_536872512 = (formatters_671088684[0]).length;
  Label44: {
    F.line = 243;
      Label45: while (true) {
      if (!(i_536872511 < L_536872512)) break Label45;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym37_536871264[0] = formatters_671088684[0][chckIndx(i_536872511, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym37_536871264[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872511 = addInt(i_536872511, 1);
        if (!(((formatters_671088684[0]).length == L_536872512))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536871269 = [getStackTrace_33556645(e_536871254)];
  F.line = 613;
  testStatusIMPL_536871157[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label46: {
    F.line = 620;
    var formatterHEX60gensym38_536871274 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872515 = 0;
    F.line = 242;
    var L_536872516 = (formatters_671088684[0]).length;
    Label47: {
      F.line = 243;
        Label48: while (true) {
        if (!(i_536872515 < L_536872516)) break Label48;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym38_536871274[0] = formatters_671088684[0][chckIndx(i_536872515, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym38_536871274[0], checkpoints_671088683[0], stackTrace_536871269[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872515 = addInt(i_536872515, 1);
          if (!(((formatters_671088684[0]).length == L_536872516))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536871157[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536871283 = {suiteName: [], testName: [82,101,103,69,120,112,32,105,110,32,115,101,113,117,101,110,99,101], status: testStatusIMPL_536871157[0]};
F.line = 580;
testEnded_671089427(testResult_536871283);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 544;
ensureInitialized_671089364();
if (shouldRun_671089231([], [87,104,105,116,101,115,112,97,99,101])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536871292 = [0];
Label49: {
  F.line = 550;
  var formatter_536871296 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872519 = 0;
  F.line = 242;
  var L_536872520 = (formatters_671088684[0]).length;
  Label50: {
    F.line = 243;
      Label51: while (true) {
      if (!(i_536872519 < L_536872520)) break Label51;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536871296[0] = formatters_671088684[0][chckIndx(i_536872519, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536871296[0], [87,104,105,116,101,115,112,97,99,101]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872519 = addInt(i_536872519, 1);
        if (!(((formatters_671088684[0]).length == L_536872520))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
F.line = 25;
F.filename = "test_parse.nim";
var ws_536871298 = assignName_1375732840([58,119,115], Whitespace_1375737338([92,115,43], [35,46,42]));
if (!(eqStrings(asSxpr_1275069001(HEX28HEX29_536870978(ws_536871298, [32,32,32,35,32,99,111,109,109,101,110,116], 0).Field0), [40,58,119,115,32,34,32,32,32,35,32,99,111,109,109,101,110,116,34,41]))) {
F.line = 26;
failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(26, 3) `ws(\"   # comment\").root.asSxpr == \"(:ws \\\"   # comment\\\")\"` "));
}

--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
F.filename = "unittest.nim";
var e_536871309 = getCurrentException();
F.line = 564;
var eTypeDesc_536871310 = ([91] || []).concat(exceptionTypeName_671089436(e_536871309) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871310 || []));
if ((e_536871309 == null)) {
F.line = 613;
testStatusIMPL_536871292[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label53: {
  F.line = 620;
  var formatterHEX60gensym43_536871319 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872523 = 0;
  F.line = 242;
  var L_536872524 = (formatters_671088684[0]).length;
  Label54: {
    F.line = 243;
      Label55: while (true) {
      if (!(i_536872523 < L_536872524)) break Label55;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym43_536871319[0] = formatters_671088684[0][chckIndx(i_536872523, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym43_536871319[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872523 = addInt(i_536872523, 1);
        if (!(((formatters_671088684[0]).length == L_536872524))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536871324 = [getStackTrace_33556645(e_536871309)];
  F.line = 613;
  testStatusIMPL_536871292[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label56: {
    F.line = 620;
    var formatterHEX60gensym44_536871329 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872527 = 0;
    F.line = 242;
    var L_536872528 = (formatters_671088684[0]).length;
    Label57: {
      F.line = 243;
        Label58: while (true) {
        if (!(i_536872527 < L_536872528)) break Label58;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym44_536871329[0] = formatters_671088684[0][chckIndx(i_536872527, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym44_536871329[0], checkpoints_671088683[0], stackTrace_536871324[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872527 = addInt(i_536872527, 1);
          if (!(((formatters_671088684[0]).length == L_536872528))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536871292[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536871338 = {suiteName: [], testName: [87,104,105,116,101,115,112,97,99,101], status: testStatusIMPL_536871292[0]};
F.line = 580;
testEnded_671089427(testResult_536871338);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 544;
ensureInitialized_671089364();
if (shouldRun_671089231([], [65,108,116,101,114,110,97,116,105,118,101])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536871347 = [0];
Label59: {
  F.line = 550;
  var formatter_536871351 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872531 = 0;
  F.line = 242;
  var L_536872532 = (formatters_671088684[0]).length;
  Label60: {
    F.line = 243;
      Label61: while (true) {
      if (!(i_536872531 < L_536872532)) break Label61;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536871351[0] = formatters_671088684[0][chckIndx(i_536872531, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536871351[0], [65,108,116,101,114,110,97,116,105,118,101]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872531 = addInt(i_536872531, 1);
        if (!(((formatters_671088684[0]).length == L_536872532))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
Label63: {
  F.line = 664;
  var HEX3Ac1_536871366 = [asSxpr_1275069001(HEX28HEX29_536870978(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [65]), init_1375736785(new_536870938(), [66])]), [66], 0).Field0)];
  if (eqStrings(HEX3Ac1_536871366[0], [40,58,84,101,120,116,32,34,66,34,41])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(29, 59): Check failed: Alternative(Text(\"A\"), Text(\"B\"))(\"B\").root.asSxpr == \"(:Text \\\"B\\\")\""));
    F.line = 669;
    checkpoint_671089446(([65,108,116,101,114,110,97,116,105,118,101,40,84,101,120,116,40,34,65,34,41,44,32,84,101,120,116,40,34,66,34,41,41,40,34,66,34,41,46,114,111,111,116,46,97,115,83,120,112,114,32,119,97,115,32] || []).concat(HEX3Ac1_536871366[0] || []));
    F.line = 613;
    testStatusIMPL_536871347[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label64: {
      F.line = 620;
      var formatterHEX60gensym52_536871371 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872536 = 0;
      F.line = 242;
      var L_536872537 = (formatters_671088684[0]).length;
      Label65: {
        F.line = 243;
          Label66: while (true) {
          if (!(i_536872536 < L_536872537)) break Label66;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym52_536871371[0] = formatters_671088684[0][chckIndx(i_536872536, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym52_536871371[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872536 = addInt(i_536872536, 1);
            if (!(((formatters_671088684[0]).length == L_536872537))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label67: {
  F.line = 664;
  var HEX3Ac1_536871385 = [HEX24_1375733037(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [65]), init_1375736785(new_536870938(), [66])]))];
  if (eqStrings(HEX3Ac1_536871385[0], [34,65,34,124,34,66,34])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(30, 43): Check failed: $Alternative(Text(\"A\"), Text(\"B\")) == \"\\\"A\\\"|\\\"B\\\"\""));
    F.line = 669;
    checkpoint_671089446(([36,65,108,116,101,114,110,97,116,105,118,101,40,84,101,120,116,40,34,65,34,41,44,32,84,101,120,116,40,34,66,34,41,41,32,119,97,115,32] || []).concat(HEX3Ac1_536871385[0] || []));
    F.line = 613;
    testStatusIMPL_536871347[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label68: {
      F.line = 620;
      var formatterHEX60gensym59_536871390 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872541 = 0;
      F.line = 242;
      var L_536872542 = (formatters_671088684[0]).length;
      Label69: {
        F.line = 243;
          Label70: while (true) {
          if (!(i_536872541 < L_536872542)) break Label70;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym59_536871390[0] = formatters_671088684[0][chckIndx(i_536872541, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym59_536871390[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872541 = addInt(i_536872541, 1);
            if (!(((formatters_671088684[0]).length == L_536872542))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label71: {
  F.line = 664;
  var HEX3Ac1_536871416 = [HEX24_1375733037(HEX7C_1375737775(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [65]), init_1375736785(new_536870938(), [66])]), HEX7C_1375737887(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [67]), init_1375736785(new_536870938(), [68])]), init_1375736785(new_536870938(), [69]))))];
  if (eqStrings(HEX3Ac1_536871416[0], [34,65,34,124,34,66,34,124,34,67,34,124,34,68,34,124,34,69,34])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(31, 65): Check failed: $((Text(\"A\") | Text(\"B\")) | (Text(\"C\") | Text(\"D\") | Text(\"E\"))) ==\x0A    \"\\\"A\\\"|\\\"B\\\"|\\\"C\\\"|\\\"D\\\"|\\\"E\\\"\""));
    F.line = 669;
    checkpoint_671089446((makeNimstrLit("$((Text(\"A\") | Text(\"B\")) | (Text(\"C\") | Text(\"D\") | Text(\"E\"))) was ") || []).concat(HEX3Ac1_536871416[0] || []));
    F.line = 613;
    testStatusIMPL_536871347[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label72: {
      F.line = 620;
      var formatterHEX60gensym72_536871421 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872546 = 0;
      F.line = 242;
      var L_536872547 = (formatters_671088684[0]).length;
      Label73: {
        F.line = 243;
          Label74: while (true) {
          if (!(i_536872546 < L_536872547)) break Label74;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym72_536871421[0] = formatters_671088684[0][chckIndx(i_536872546, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym72_536871421[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872546 = addInt(i_536872546, 1);
            if (!(((formatters_671088684[0]).length == L_536872547))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536871426 = getCurrentException();
F.line = 564;
var eTypeDesc_536871427 = ([91] || []).concat(exceptionTypeName_671089436(e_536871426) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871427 || []));
if ((e_536871426 == null)) {
F.line = 613;
testStatusIMPL_536871347[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label75: {
  F.line = 620;
  var formatterHEX60gensym73_536871436 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872550 = 0;
  F.line = 242;
  var L_536872551 = (formatters_671088684[0]).length;
  Label76: {
    F.line = 243;
      Label77: while (true) {
      if (!(i_536872550 < L_536872551)) break Label77;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym73_536871436[0] = formatters_671088684[0][chckIndx(i_536872550, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym73_536871436[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872550 = addInt(i_536872550, 1);
        if (!(((formatters_671088684[0]).length == L_536872551))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536871441 = [getStackTrace_33556645(e_536871426)];
  F.line = 613;
  testStatusIMPL_536871347[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label78: {
    F.line = 620;
    var formatterHEX60gensym74_536871446 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872554 = 0;
    F.line = 242;
    var L_536872555 = (formatters_671088684[0]).length;
    Label79: {
      F.line = 243;
        Label80: while (true) {
        if (!(i_536872554 < L_536872555)) break Label80;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym74_536871446[0] = formatters_671088684[0][chckIndx(i_536872554, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym74_536871446[0], checkpoints_671088683[0], stackTrace_536871441[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872554 = addInt(i_536872554, 1);
          if (!(((formatters_671088684[0]).length == L_536872555))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536871347[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536871455 = {suiteName: [], testName: [65,108,116,101,114,110,97,116,105,118,101], status: testStatusIMPL_536871347[0]};
F.line = 580;
testEnded_671089427(testResult_536871455);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 544;
ensureInitialized_671089364();
if (shouldRun_671089231([], [83,101,114,105,101,115])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536871464 = [0];
Label81: {
  F.line = 550;
  var formatter_536871468 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872558 = 0;
  F.line = 242;
  var L_536872559 = (formatters_671088684[0]).length;
  Label82: {
    F.line = 243;
      Label83: while (true) {
      if (!(i_536872558 < L_536872559)) break Label83;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536871468[0] = formatters_671088684[0][chckIndx(i_536872558, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536871468[0], [83,101,114,105,101,115]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872558 = addInt(i_536872558, 1);
        if (!(((formatters_671088684[0]).length == L_536872559))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
Label85: {
  F.line = 664;
  var HEX3Ac1_536871481 = [HEX24_1375733037(init_1375737948(new_1375738039(), [init_1375736785(new_536870938(), [65]), init_1375736785(new_536870938(), [66]), init_1375736785(new_536870938(), [67])], 1))];
  if (eqStrings(HEX3Ac1_536871481[0], [34,65,34,32,194,167,34,66,34,32,34,67,34])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(34, 65): Check failed: $Series(Text(\"A\"), Text(\"B\"), Text(\"C\"), mandatory = 1\'u32) ==\x0A    \"\\\"A\\\" \xC2\xA7\\\"B\\\" \\\"C\\\"\""));
    F.line = 669;
    checkpoint_671089446(([36,83,101,114,105,101,115,40,84,101,120,116,40,34,65,34,41,44,32,84,101,120,116,40,34,66,34,41,44,32,84,101,120,116,40,34,67,34,41,44,32,109,97,110,100,97,116,111,114,121,32,61,32,49,39,117,51,50,41,32,119,97,115,32] || []).concat(HEX3Ac1_536871481[0] || []));
    F.line = 613;
    testStatusIMPL_536871464[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label86: {
      F.line = 620;
      var formatterHEX60gensym83_536871486 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872563 = 0;
      F.line = 242;
      var L_536872564 = (formatters_671088684[0]).length;
      Label87: {
        F.line = 243;
          Label88: while (true) {
          if (!(i_536872563 < L_536872564)) break Label88;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym83_536871486[0] = formatters_671088684[0][chckIndx(i_536872563, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym83_536871486[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872563 = addInt(i_536872563, 1);
            if (!(((formatters_671088684[0]).length == L_536872564))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label89: {
  F.line = 664;
  var HEX3Ac1_536871500 = [HEX24_1375733037(HEX26_1375738383(init_1375736785(new_536870938(), [65]), HEXC2HEXA7_1375738035(HEX26_1375738402(init_1375736785(new_536870938(), [66]), init_1375736785(new_536870938(), [67])))))];
  if (eqStrings(HEX3Ac1_536871500[0], [34,65,34,32,194,167,34,66,34,32,34,67,34])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(35, 40): Check failed: $(txt\"A\" & \xC2\xA7(txt\"B\" & txt\"C\")) == \"\\\"A\\\" \xC2\xA7\\\"B\\\" \\\"C\\\"\""));
    F.line = 669;
    checkpoint_671089446(([36,40,116,120,116,34,65,34,32,38,32,194,167,40,116,120,116,34,66,34,32,38,32,116,120,116,34,67,34,41,41,32,119,97,115,32] || []).concat(HEX3Ac1_536871500[0] || []));
    F.line = 613;
    testStatusIMPL_536871464[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label90: {
      F.line = 620;
      var formatterHEX60gensym93_536871505 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872568 = 0;
      F.line = 242;
      var L_536872569 = (formatters_671088684[0]).length;
      Label91: {
        F.line = 243;
          Label92: while (true) {
          if (!(i_536872568 < L_536872569)) break Label92;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym93_536871505[0] = formatters_671088684[0][chckIndx(i_536872568, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym93_536871505[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872568 = addInt(i_536872568, 1);
            if (!(((formatters_671088684[0]).length == L_536872569))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label93: {
  F.line = 664;
  var HEX3Ac1_536871522 = [HEX24_1375733037(HEX26_1375738361(HEX26_1375738402(init_1375736785(new_536870938(), [65]), init_1375736785(new_536870938(), [66])), HEXC2HEXA7_1375738035(HEX26_1375738402(init_1375736785(new_536870938(), [67]), init_1375736785(new_536870938(), [68])))))];
  if (eqStrings(HEX3Ac1_536871522[0], [34,65,34,32,34,66,34,32,194,167,34,67,34,32,34,68,34])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(37, 48): Check failed: $(txt\"A\" & txt\"B\" & \xC2\xA7 txt\"C\" & txt\"D\") == \"\\\"A\\\" \\\"B\\\" \xC2\xA7\\\"C\\\" \\\"D\\\"\""));
    F.line = 669;
    checkpoint_671089446(([36,40,116,120,116,34,65,34,32,38,32,116,120,116,34,66,34,32,38,32,194,167,32,116,120,116,34,67,34,32,38,32,116,120,116,34,68,34,41,32,119,97,115,32] || []).concat(HEX3Ac1_536871522[0] || []));
    F.line = 613;
    testStatusIMPL_536871464[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label94: {
      F.line = 620;
      var formatterHEX60gensym105_536871527 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872573 = 0;
      F.line = 242;
      var L_536872574 = (formatters_671088684[0]).length;
      Label95: {
        F.line = 243;
          Label96: while (true) {
          if (!(i_536872573 < L_536872574)) break Label96;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym105_536871527[0] = formatters_671088684[0][chckIndx(i_536872573, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym105_536871527[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872573 = addInt(i_536872573, 1);
            if (!(((formatters_671088684[0]).length == L_536872574))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536871532 = getCurrentException();
F.line = 564;
var eTypeDesc_536871533 = ([91] || []).concat(exceptionTypeName_671089436(e_536871532) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871533 || []));
if ((e_536871532 == null)) {
F.line = 613;
testStatusIMPL_536871464[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label97: {
  F.line = 620;
  var formatterHEX60gensym106_536871542 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872577 = 0;
  F.line = 242;
  var L_536872578 = (formatters_671088684[0]).length;
  Label98: {
    F.line = 243;
      Label99: while (true) {
      if (!(i_536872577 < L_536872578)) break Label99;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym106_536871542[0] = formatters_671088684[0][chckIndx(i_536872577, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym106_536871542[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872577 = addInt(i_536872577, 1);
        if (!(((formatters_671088684[0]).length == L_536872578))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536871547 = [getStackTrace_33556645(e_536871532)];
  F.line = 613;
  testStatusIMPL_536871464[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label100: {
    F.line = 620;
    var formatterHEX60gensym107_536871552 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872581 = 0;
    F.line = 242;
    var L_536872582 = (formatters_671088684[0]).length;
    Label101: {
      F.line = 243;
        Label102: while (true) {
        if (!(i_536872581 < L_536872582)) break Label102;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym107_536871552[0] = formatters_671088684[0][chckIndx(i_536872581, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym107_536871552[0], checkpoints_671088683[0], stackTrace_536871547[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872581 = addInt(i_536872581, 1);
          if (!(((formatters_671088684[0]).length == L_536872582))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536871464[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536871561 = {suiteName: [], testName: [83,101,114,105,101,115], status: testStatusIMPL_536871464[0]};
F.line = 580;
testEnded_671089427(testResult_536871561);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 544;
ensureInitialized_671089364();
if (shouldRun_671089231([], [112,97,114,115,101,114,45,115,101,114,105,97,108,105,122,97,116,105,111,110])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536871570 = [0];
Label103: {
  F.line = 550;
  var formatter_536871574 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872585 = 0;
  F.line = 242;
  var L_536872586 = (formatters_671088684[0]).length;
  Label104: {
    F.line = 243;
      Label105: while (true) {
      if (!(i_536872585 < L_536872586)) break Label105;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536871574[0] = formatters_671088684[0][chckIndx(i_536872585, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536871574[0], [112,97,114,115,101,114,45,115,101,114,105,97,108,105,122,97,116,105,111,110]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872585 = addInt(i_536872585, 1);
        if (!(((formatters_671088684[0]).length == L_536872586))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
F.line = 40;
F.filename = "test_parse.nim";
var root_536871613 = assignName_1375732840([114,111,111,116], init_1375741130(new_536871575()));
F.line = 41;
var t_536871618 = assignName_1375732840([116], HEX26_1375738402(init_1375736785(new_536870938(), [65]), root_536871613));
F.line = 42;
var s_536871620 = assignName_1375732840([115], HEX26_1375738361(HEX26_1375738383(root_536871613, t_536871618), t_536871618));
F.line = 43;
set_1375741166(root_536871613, s_536871620);
Label107: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536871621 = [HEX24_1375733037(root_536871613)];
  if (eqStrings(HEX3Ac1_536871621[0], [115])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(44, 14): Check failed: $root == \"s\""));
    F.line = 669;
    checkpoint_671089446(([36,114,111,111,116,32,119,97,115,32] || []).concat(HEX3Ac1_536871621[0] || []));
    F.line = 613;
    testStatusIMPL_536871570[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label108: {
      F.line = 620;
      var formatterHEX60gensym117_536871626 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872590 = 0;
      F.line = 242;
      var L_536872591 = (formatters_671088684[0]).length;
      Label109: {
        F.line = 243;
          Label110: while (true) {
          if (!(i_536872590 < L_536872591)) break Label110;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym117_536871626[0] = formatters_671088684[0][chckIndx(i_536872590, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym117_536871626[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872590 = addInt(i_536872590, 1);
            if (!(((formatters_671088684[0]).length == L_536872591))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label111: {
  F.line = 664;
  var HEX3Ac1_536871631 = [HEX24_1375733037(t_536871618)];
  if (eqStrings(HEX3Ac1_536871631[0], [34,65,34,32,115])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(45, 11): Check failed: $t == \"\\\"A\\\" s\""));
    F.line = 669;
    checkpoint_671089446(([36,116,32,119,97,115,32] || []).concat(HEX3Ac1_536871631[0] || []));
    F.line = 613;
    testStatusIMPL_536871570[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label112: {
      F.line = 620;
      var formatterHEX60gensym121_536871636 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872595 = 0;
      F.line = 242;
      var L_536872596 = (formatters_671088684[0]).length;
      Label113: {
        F.line = 243;
          Label114: while (true) {
          if (!(i_536872595 < L_536872596)) break Label114;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym121_536871636[0] = formatters_671088684[0][chckIndx(i_536872595, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym121_536871636[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872595 = addInt(i_536872595, 1);
            if (!(((formatters_671088684[0]).length == L_536872596))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label115: {
  F.line = 664;
  var HEX3Ac1_536871644 = [(getSubParsers_1375733062((Temporary116 = getSubParsers_1375733062(root_536871613), Temporary116)[chckIndx(0, 0, (Temporary116).length - 1)])).length];
  if ((HEX3Ac1_536871644[0] == 3)) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(46, 48): Check failed: root.getSubParsers[0].getSubParsers.len == 3"));
    F.line = 669;
    checkpoint_671089446(([114,111,111,116,46,103,101,116,83,117,98,80,97,114,115,101,114,115,91,48,93,46,103,101,116,83,117,98,80,97,114,115,101,114,115,46,108,101,110,32,119,97,115,32] || []).concat(HEX24_369098760(HEX3Ac1_536871644[0]) || []));
    F.line = 613;
    testStatusIMPL_536871570[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label117: {
      F.line = 620;
      var formatterHEX60gensym125_536871649 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872600 = 0;
      F.line = 242;
      var L_536872601 = (formatters_671088684[0]).length;
      Label118: {
        F.line = 243;
          Label119: while (true) {
          if (!(i_536872600 < L_536872601)) break Label119;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym125_536871649[0] = formatters_671088684[0][chckIndx(i_536872600, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym125_536871649[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872600 = addInt(i_536872600, 1);
            if (!(((formatters_671088684[0]).length == L_536872601))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label120: {
  F.line = 664;
  var HEX3Ac1_536871654 = [HEX24_1375733037(s_536871620)];
  if (eqStrings(HEX3Ac1_536871654[0], [115,32,116,32,116])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(47, 11): Check failed: $s == \"s t t\""));
    F.line = 669;
    checkpoint_671089446(([36,115,32,119,97,115,32] || []).concat(HEX3Ac1_536871654[0] || []));
    F.line = 613;
    testStatusIMPL_536871570[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label121: {
      F.line = 620;
      var formatterHEX60gensym129_536871659 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872605 = 0;
      F.line = 242;
      var L_536872606 = (formatters_671088684[0]).length;
      Label122: {
        F.line = 243;
          Label123: while (true) {
          if (!(i_536872605 < L_536872606)) break Label123;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym129_536871659[0] = formatters_671088684[0][chckIndx(i_536872605, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym129_536871659[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872605 = addInt(i_536872605, 1);
            if (!(((formatters_671088684[0]).length == L_536872606))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label124: {
  F.line = 664;
  var HEX3Ac1_536871664 = [type_1375732762(t_536871618)];
  if (eqStrings(HEX3Ac1_536871664[0], [58,83,101,114,105,101,115])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(48, 15): Check failed: t.type == \":Series\""));
    F.line = 669;
    checkpoint_671089446(([116,46,116,121,112,101,32,119,97,115,32] || []).concat(HEX3Ac1_536871664[0] || []));
    F.line = 613;
    testStatusIMPL_536871570[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label125: {
      F.line = 620;
      var formatterHEX60gensym133_536871669 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872610 = 0;
      F.line = 242;
      var L_536872611 = (formatters_671088684[0]).length;
      Label126: {
        F.line = 243;
          Label127: while (true) {
          if (!(i_536872610 < L_536872611)) break Label127;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym133_536871669[0] = formatters_671088684[0][chckIndx(i_536872610, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym133_536871669[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872610 = addInt(i_536872610, 1);
            if (!(((formatters_671088684[0]).length == L_536872611))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536871674 = getCurrentException();
F.line = 564;
var eTypeDesc_536871675 = ([91] || []).concat(exceptionTypeName_671089436(e_536871674) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871675 || []));
if ((e_536871674 == null)) {
F.line = 613;
testStatusIMPL_536871570[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label128: {
  F.line = 620;
  var formatterHEX60gensym134_536871684 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872614 = 0;
  F.line = 242;
  var L_536872615 = (formatters_671088684[0]).length;
  Label129: {
    F.line = 243;
      Label130: while (true) {
      if (!(i_536872614 < L_536872615)) break Label130;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym134_536871684[0] = formatters_671088684[0][chckIndx(i_536872614, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym134_536871684[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872614 = addInt(i_536872614, 1);
        if (!(((formatters_671088684[0]).length == L_536872615))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536871689 = [getStackTrace_33556645(e_536871674)];
  F.line = 613;
  testStatusIMPL_536871570[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label131: {
    F.line = 620;
    var formatterHEX60gensym135_536871694 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872618 = 0;
    F.line = 242;
    var L_536872619 = (formatters_671088684[0]).length;
    Label132: {
      F.line = 243;
        Label133: while (true) {
        if (!(i_536872618 < L_536872619)) break Label133;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym135_536871694[0] = formatters_671088684[0][chckIndx(i_536872618, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym135_536871694[0], checkpoints_671088683[0], stackTrace_536871689[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872618 = addInt(i_536872618, 1);
          if (!(((formatters_671088684[0]).length == L_536872619))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536871570[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536871703 = {suiteName: [], testName: [112,97,114,115,101,114,45,115,101,114,105,97,108,105,122,97,116,105,111,110], status: testStatusIMPL_536871570[0]};
F.line = 580;
testEnded_671089427(testResult_536871703);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 50;
F.filename = "test_parse.nim";
var WS_536871709 = assignName_1375732840([87,83], Drop_1375736758(RegExp_1375737219([92,115,42])));
F.line = 51;
var NUMBER_536871711 = assignName_1375732840([58,78,85,77,66,69,82], HEX26_1375738402(RegExp_1375737219([40,63,58,48,124,40,63,58,91,49,45,57,93,92,100,42,41,41,40,63,58,92,46,92,100,43,41,63]), WS_536871709));
F.line = 52;
var sign_536871722 = assignName_1375732840([115,105,103,110], HEX26_1375738402(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [43]), init_1375736785(new_536870938(), [45])]), WS_536871709));
F.line = 53;
var expression_536871727 = assignName_1375732840([101,120,112,114,101,115,115,105,111,110], init_1375741130(new_536871575()));
F.line = 54;
var group_536871735 = assignName_1375732840([103,114,111,117,112], HEX26_1375738361(HEX26_1375738402(init_1375736785(new_536870938(), [40]), WS_536871709), HEXC2HEXA7_1375738035(HEX26_1375738372(HEX26_1375738402(expression_536871727, init_1375736785(new_536870938(), [41])), WS_536871709))));
F.line = 55;
var factor_536871777 = assignName_1375732840([102,97,99,116,111,114], HEX26_1375738402(init_1375737476(new_536871736(), sign_536871722, {Field0: 0, Field1: 1}, [58,79,112,116,105,111,110]), init_1375737690(new_1375737779(), [NUMBER_536871711, group_536871735])));
F.line = 56;
var term_536871791 = assignName_1375732840([116,101,114,109], HEX26_1375738372(factor_536871777, init_1375737476(new_536871736(), HEX26_1375738361(HEX26_1375738402(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [42]), init_1375736785(new_536870938(), [47])]), WS_536871709), HEXC2HEXA7_1375738035(factor_536871777)), {Field0: 0, Field1: 1073741824}, [58,90,101,114,111,79,114,77,111,114,101])));
F.line = 57;
set_1375741166(expression_536871727, HEX26_1375738372(term_536871791, init_1375737476(new_536871736(), HEX26_1375738361(HEX26_1375738402(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [43]), init_1375736785(new_536870938(), [45])]), WS_536871709), HEXC2HEXA7_1375738035(term_536871791)), {Field0: 0, Field1: 1073741824}, [58,90,101,114,111,79,114,77,111,114,101])));
F.line = 58;
grammarHEX3D_1375733262(expression_536871727, init_1375732066(new_1375732140(), [65,114,105,116,104,109,101,116,105,99], ConstSet21, EmptyStringSlice_1191182395, returnItemFlatten_1375731992, returnSeqFlatten_1375731995));
F.line = 59;
var arithmetic_536871807 = expression_536871727;
F.line = 61;
errors_1375736315(expression_536871727, [nimCopy(null, {Field0: nimCopy(null, anyPassage_1375735853, NTI1375731762), Field1: [90,97,104,108,32,111,100,101,114,32,65,117,115,100,114,117,99,107,32,101,114,119,97,114,116,101,116,44,32,97,98,101,114,32,110,105,99,104,116,32,123,49,125]}, NTI536871878)], true);
F.line = 62;
errors_1375736315(term_536871791, [nimCopy(null, {Field0: nimCopy(null, anyPassage_1375735853, NTI1375731762), Field1: [90,97,104,108,32,111,100,101,114,32,65,117,115,100,114,117,99,107,32,40,105,110,32,75,108,97,109,109,101,114,110,41,32,101,114,119,97,114,116,101,116,44,32,97,98,101,114,32,110,105,99,104,116,32,123,49,125]}, NTI536871886)], true);
F.line = 63;
errors_1375736315(group_536871735, [nimCopy(null, {Field0: nimCopy(null, anyPassage_1375735853, NTI1375731762), Field1: [83,99,104,108,105,101,195,159,101,110,100,101,32,75,108,97,109,109,101,114,32,101,114,119,97,114,116,101,116,44,32,97,98,101,114,32,110,105,99,104,116,32,123,49,125]}, NTI536871894)], true);
F.line = 544;
F.filename = "unittest.nim";
ensureInitialized_671089364();
if (shouldRun_671089231([], [97,114,105,116,104,109,101,116,105,99])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536871824 = [0];
Label134: {
  F.line = 550;
  var formatter_536871828 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872622 = 0;
  F.line = 242;
  var L_536872623 = (formatters_671088684[0]).length;
  Label135: {
    F.line = 243;
      Label136: while (true) {
      if (!(i_536872622 < L_536872623)) break Label136;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536871828[0] = formatters_671088684[0][chckIndx(i_536872622, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536871828[0], [97,114,105,116,104,109,101,116,105,99]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872622 = addInt(i_536872622, 1);
        if (!(((formatters_671088684[0]).length == L_536872623))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
F.line = 66;
F.filename = "test_parse.nim";
var result_536871834 = [HEX28HEX29_536870978(arithmetic_536871807, [49,32,43,32,49], 0)];
if (!(eqStrings(HEX24_1275070271(result_536871834[0].Field0), makeNimstrLit("(expression\x0A  (term\x0A    (factor \"1\"))\x0A  (:Text \"+\")\x0A  (term\x0A    (factor \"1\")))")))) {
F.line = 67;
failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(67, 3) `$result.root ==\x0A    \"\"\"(expression\x0A  (term\x0A    (factor \"1\"))\x0A  (:Text \"+\")\x0A  (term\x0A    (factor \"1\")))\"\"\"` "));
}

--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
F.filename = "unittest.nim";
var e_536871840 = getCurrentException();
F.line = 564;
var eTypeDesc_536871841 = ([91] || []).concat(exceptionTypeName_671089436(e_536871840) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871841 || []));
if ((e_536871840 == null)) {
F.line = 613;
testStatusIMPL_536871824[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label138: {
  F.line = 620;
  var formatterHEX60gensym177_536871850 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872626 = 0;
  F.line = 242;
  var L_536872627 = (formatters_671088684[0]).length;
  Label139: {
    F.line = 243;
      Label140: while (true) {
      if (!(i_536872626 < L_536872627)) break Label140;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym177_536871850[0] = formatters_671088684[0][chckIndx(i_536872626, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym177_536871850[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872626 = addInt(i_536872626, 1);
        if (!(((formatters_671088684[0]).length == L_536872627))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536871855 = [getStackTrace_33556645(e_536871840)];
  F.line = 613;
  testStatusIMPL_536871824[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label141: {
    F.line = 620;
    var formatterHEX60gensym178_536871860 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872630 = 0;
    F.line = 242;
    var L_536872631 = (formatters_671088684[0]).length;
    Label142: {
      F.line = 243;
        Label143: while (true) {
        if (!(i_536872630 < L_536872631)) break Label143;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym178_536871860[0] = formatters_671088684[0][chckIndx(i_536872630, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym178_536871860[0], checkpoints_671088683[0], stackTrace_536871855[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872630 = addInt(i_536872630, 1);
          if (!(((formatters_671088684[0]).length == L_536872631))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536871824[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536871869 = {suiteName: [], testName: [97,114,105,116,104,109,101,116,105,99], status: testStatusIMPL_536871824[0]};
F.line = 580;
testEnded_671089427(testResult_536871869);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 544;
ensureInitialized_671089364();
if (shouldRun_671089231([], [97,114,105,116,104,109,101,116,105,99,32,101,114,114,111,114,32,99,97,116,99,104,105,110,103])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536871878 = [0];
Label144: {
  F.line = 550;
  var formatter_536871882 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872634 = 0;
  F.line = 242;
  var L_536872635 = (formatters_671088684[0]).length;
  Label145: {
    F.line = 243;
      Label146: while (true) {
      if (!(i_536872634 < L_536872635)) break Label146;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536871882[0] = formatters_671088684[0][chckIndx(i_536872634, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536871882[0], [97,114,105,116,104,109,101,116,105,99,32,101,114,114,111,114,32,99,97,116,99,104,105,110,103]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872634 = addInt(i_536872634, 1);
        if (!(((formatters_671088684[0]).length == L_536872635))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
F.line = 76;
F.filename = "test_parse.nim";
var tree_536871883 = [null];
F.line = 77;
++excHandler;
try {
F.line = 78;
tree_536871883[0] = HEX28HEX29_536870978(expression_536871727, [40,51,32,43,32,41,32,42,32,50], 0).Field0;
if (false) {
}
else {
  F.line = 739;
  F.filename = "unittest.nim";
  checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(79, 10): Check failed: false"));
  F.line = 613;
  testStatusIMPL_536871878[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label149: {
    F.line = 620;
    var formatterHEX60gensym181_536871893 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872638 = 0;
    F.line = 242;
    var L_536872639 = (formatters_671088684[0]).length;
    Label150: {
      F.line = 243;
        Label151: while (true) {
        if (!(i_536872638 < L_536872639)) break Label151;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym181_536871893[0] = formatters_671088684[0][chckIndx(i_536872638, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym181_536871893[0], checkpoints_671088683[0], []);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872638 = addInt(i_536872638, 1);
          if (!(((formatters_671088684[0]).length == L_536872639))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
F.line = 81;
F.filename = "test_parse.nim";
var pe_536871898 = getCurrentException();
Label152: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536871899 = [nimCopy(null, pe_536871898.error.message, NTI33554449)];
  if (eqStrings(HEX3Ac1_536871899[0], [90,97,104,108,32,111,100,101,114,32,65,117,115,100,114,117,99,107,32,101,114,119,97,114,116,101,116,44,32,97,98,101,114,32,110,105,99,104,116,32,194,187,41,32,42,32,50,194,171])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(81, 27): Check failed: pe.error.message == \"Zahl oder Ausdruck erwartet, aber nicht \xC2\xBB) * 2\xC2\xAB\""));
    F.line = 669;
    checkpoint_671089446(([112,101,46,101,114,114,111,114,46,109,101,115,115,97,103,101,32,119,97,115,32] || []).concat(HEX3Ac1_536871899[0] || []));
    F.line = 613;
    testStatusIMPL_536871878[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label153: {
      F.line = 620;
      var formatterHEX60gensym185_536871904 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872643 = 0;
      F.line = 242;
      var L_536872644 = (formatters_671088684[0]).length;
      Label154: {
        F.line = 243;
          Label155: while (true) {
          if (!(i_536872643 < L_536872644)) break Label155;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym185_536871904[0] = formatters_671088684[0][chckIndx(i_536872643, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym185_536871904[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872643 = addInt(i_536872643, 1);
            if (!(((formatters_671088684[0]).length == L_536872644))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label156: {
  F.line = 664;
  var HEX3Ac1_536871909 = [pe_536871898.error.pos];
  if ((HEX3Ac1_536871909[0] == 5)) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(82, 23): Check failed: pe.error.pos == 5"));
    F.line = 669;
    checkpoint_671089446(([112,101,46,101,114,114,111,114,46,112,111,115,32,119,97,115,32] || []).concat(HEX24_369098760(((HEX3Ac1_536871909[0]) | 0)) || []));
    F.line = 613;
    testStatusIMPL_536871878[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label157: {
      F.line = 620;
      var formatterHEX60gensym189_536871914 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872648 = 0;
      F.line = 242;
      var L_536872649 = (formatters_671088684[0]).length;
      Label158: {
        F.line = 243;
          Label159: while (true) {
          if (!(i_536872648 < L_536872649)) break Label159;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym189_536871914[0] = formatters_671088684[0][chckIndx(i_536872648, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym189_536871914[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872648 = addInt(i_536872648, 1);
            if (!(((formatters_671088684[0]).length == L_536872649))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
F.line = 83;
F.filename = "test_parse.nim";
++excHandler;
try {
F.line = 84;
tree_536871883[0] = HEX28HEX29_536870978(expression_536871727, [40,51,32,43,32,42,32,50], 0).Field0;
if (false) {
}
else {
  F.line = 739;
  F.filename = "unittest.nim";
  checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(85, 10): Check failed: false"));
  F.line = 613;
  testStatusIMPL_536871878[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label161: {
    F.line = 620;
    var formatterHEX60gensym191_536871928 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872652 = 0;
    F.line = 242;
    var L_536872653 = (formatters_671088684[0]).length;
    Label162: {
      F.line = 243;
        Label163: while (true) {
        if (!(i_536872652 < L_536872653)) break Label163;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym191_536871928[0] = formatters_671088684[0][chckIndx(i_536872652, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym191_536871928[0], checkpoints_671088683[0], []);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872652 = addInt(i_536872652, 1);
          if (!(((formatters_671088684[0]).length == L_536872653))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
F.line = 87;
F.filename = "test_parse.nim";
var pe_536871933 = getCurrentException();
Label164: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536871934 = [nimCopy(null, pe_536871933.error.message, NTI33554449)];
  if (eqStrings(HEX3Ac1_536871934[0], [90,97,104,108,32,111,100,101,114,32,65,117,115,100,114,117,99,107,32,101,114,119,97,114,116,101,116,44,32,97,98,101,114,32,110,105,99,104,116,32,194,187,42,32,50,194,171])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(87, 27): Check failed: pe.error.message == \"Zahl oder Ausdruck erwartet, aber nicht \xC2\xBB* 2\xC2\xAB\""));
    F.line = 669;
    checkpoint_671089446(([112,101,46,101,114,114,111,114,46,109,101,115,115,97,103,101,32,119,97,115,32] || []).concat(HEX3Ac1_536871934[0] || []));
    F.line = 613;
    testStatusIMPL_536871878[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label165: {
      F.line = 620;
      var formatterHEX60gensym195_536871939 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872657 = 0;
      F.line = 242;
      var L_536872658 = (formatters_671088684[0]).length;
      Label166: {
        F.line = 243;
          Label167: while (true) {
          if (!(i_536872657 < L_536872658)) break Label167;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym195_536871939[0] = formatters_671088684[0][chckIndx(i_536872657, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym195_536871939[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872657 = addInt(i_536872657, 1);
            if (!(((formatters_671088684[0]).length == L_536872658))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label168: {
  F.line = 664;
  var HEX3Ac1_536871944 = [pe_536871933.error.pos];
  if ((HEX3Ac1_536871944[0] == 5)) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(88, 23): Check failed: pe.error.pos == 5"));
    F.line = 669;
    checkpoint_671089446(([112,101,46,101,114,114,111,114,46,112,111,115,32,119,97,115,32] || []).concat(HEX24_369098760(((HEX3Ac1_536871944[0]) | 0)) || []));
    F.line = 613;
    testStatusIMPL_536871878[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label169: {
      F.line = 620;
      var formatterHEX60gensym199_536871949 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872662 = 0;
      F.line = 242;
      var L_536872663 = (formatters_671088684[0]).length;
      Label170: {
        F.line = 243;
          Label171: while (true) {
          if (!(i_536872662 < L_536872663)) break Label171;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym199_536871949[0] = formatters_671088684[0][chckIndx(i_536872662, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym199_536871949[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872662 = addInt(i_536872662, 1);
            if (!(((formatters_671088684[0]).length == L_536872663))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
F.line = 89;
F.filename = "test_parse.nim";
++excHandler;
try {
F.line = 90;
tree_536871883[0] = HEX28HEX29_536870978(expression_536871727, [40,51,32,43,32,52,32,42,32,50], 0).Field0;
if (false) {
}
else {
  F.line = 739;
  F.filename = "unittest.nim";
  checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(91, 10): Check failed: false"));
  F.line = 613;
  testStatusIMPL_536871878[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label173: {
    F.line = 620;
    var formatterHEX60gensym201_536871963 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872666 = 0;
    F.line = 242;
    var L_536872667 = (formatters_671088684[0]).length;
    Label174: {
      F.line = 243;
        Label175: while (true) {
        if (!(i_536872666 < L_536872667)) break Label175;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym201_536871963[0] = formatters_671088684[0][chckIndx(i_536872666, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym201_536871963[0], checkpoints_671088683[0], []);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872666 = addInt(i_536872666, 1);
          if (!(((formatters_671088684[0]).length == L_536872667))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
F.line = 93;
F.filename = "test_parse.nim";
var pe_536871968 = getCurrentException();
Label176: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536871969 = [nimCopy(null, pe_536871968.error.message, NTI33554449)];
  if (eqStrings(HEX3Ac1_536871969[0], [83,99,104,108,105,101,195,159,101,110,100,101,32,75,108,97,109,109,101,114,32,101,114,119,97,114,116,101,116,44,32,97,98,101,114,32,110,105,99,104,116,32,69,79,70])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(93, 27): Check failed: pe.error.message == \"Schlie\xC3\x9Fende Klammer erwartet, aber nicht EOF\""));
    F.line = 669;
    checkpoint_671089446(([112,101,46,101,114,114,111,114,46,109,101,115,115,97,103,101,32,119,97,115,32] || []).concat(HEX3Ac1_536871969[0] || []));
    F.line = 613;
    testStatusIMPL_536871878[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label177: {
      F.line = 620;
      var formatterHEX60gensym205_536871974 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872671 = 0;
      F.line = 242;
      var L_536872672 = (formatters_671088684[0]).length;
      Label178: {
        F.line = 243;
          Label179: while (true) {
          if (!(i_536872671 < L_536872672)) break Label179;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym205_536871974[0] = formatters_671088684[0][chckIndx(i_536872671, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym205_536871974[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872671 = addInt(i_536872671, 1);
            if (!(((formatters_671088684[0]).length == L_536872672))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label180: {
  F.line = 664;
  var HEX3Ac1_536871979 = [pe_536871968.error.pos];
  if ((HEX3Ac1_536871979[0] == 10)) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(94, 23): Check failed: pe.error.pos == 10"));
    F.line = 669;
    checkpoint_671089446(([112,101,46,101,114,114,111,114,46,112,111,115,32,119,97,115,32] || []).concat(HEX24_369098760(((HEX3Ac1_536871979[0]) | 0)) || []));
    F.line = 613;
    testStatusIMPL_536871878[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label181: {
      F.line = 620;
      var formatterHEX60gensym209_536871984 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872676 = 0;
      F.line = 242;
      var L_536872677 = (formatters_671088684[0]).length;
      Label182: {
        F.line = 243;
          Label183: while (true) {
          if (!(i_536872676 < L_536872677)) break Label183;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym209_536871984[0] = formatters_671088684[0][chckIndx(i_536872676, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym209_536871984[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872676 = addInt(i_536872676, 1);
            if (!(((formatters_671088684[0]).length == L_536872677))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536871989 = getCurrentException();
F.line = 564;
var eTypeDesc_536871990 = ([91] || []).concat(exceptionTypeName_671089436(e_536871989) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536871990 || []));
if ((e_536871989 == null)) {
F.line = 613;
testStatusIMPL_536871878[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label184: {
  F.line = 620;
  var formatterHEX60gensym210_536871999 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872680 = 0;
  F.line = 242;
  var L_536872681 = (formatters_671088684[0]).length;
  Label185: {
    F.line = 243;
      Label186: while (true) {
      if (!(i_536872680 < L_536872681)) break Label186;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym210_536871999[0] = formatters_671088684[0][chckIndx(i_536872680, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym210_536871999[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872680 = addInt(i_536872680, 1);
        if (!(((formatters_671088684[0]).length == L_536872681))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536872004 = [getStackTrace_33556645(e_536871989)];
  F.line = 613;
  testStatusIMPL_536871878[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label187: {
    F.line = 620;
    var formatterHEX60gensym211_536872009 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872684 = 0;
    F.line = 242;
    var L_536872685 = (formatters_671088684[0]).length;
    Label188: {
      F.line = 243;
        Label189: while (true) {
        if (!(i_536872684 < L_536872685)) break Label189;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym211_536872009[0] = formatters_671088684[0][chckIndx(i_536872684, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym211_536872009[0], checkpoints_671088683[0], stackTrace_536872004[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872684 = addInt(i_536872684, 1);
          if (!(((formatters_671088684[0]).length == L_536872685))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536871878[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536872018 = {suiteName: [], testName: [97,114,105,116,104,109,101,116,105,99,32,101,114,114,111,114,32,99,97,116,99,104,105,110,103], status: testStatusIMPL_536871878[0]};
F.line = 580;
testEnded_671089427(testResult_536872018);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 544;
ensureInitialized_671089364();
if (shouldRun_671089231([], [97,114,105,116,104,109,101,116,105,99,32,101,114,114,111,114,32,114,101,115,117,109,112,116,105,111,110])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536872027 = [0];
Label190: {
  F.line = 550;
  var formatter_536872031 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872688 = 0;
  F.line = 242;
  var L_536872689 = (formatters_671088684[0]).length;
  Label191: {
    F.line = 243;
      Label192: while (true) {
      if (!(i_536872688 < L_536872689)) break Label192;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536872031[0] = formatters_671088684[0][chckIndx(i_536872688, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536872031[0], [97,114,105,116,104,109,101,116,105,99,32,101,114,114,111,114,32,114,101,115,117,109,112,116,105,111,110]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872688 = addInt(i_536872688, 1);
        if (!(((formatters_671088684[0]).length == L_536872689))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
F.line = 97;
F.filename = "test_parse.nim";
var WS_536872033 = assignName_1375732840([87,83], Drop_1375736758(RegExp_1375737219([92,115,42])));
F.line = 98;
var NUMBER_536872035 = assignName_1375732840([58,78,85,77,66,69,82], HEX26_1375738402(RegExp_1375737219([40,63,58,48,124,40,63,58,91,49,45,57,93,92,100,42,41,41,40,63,58,92,46,92,100,43,41,63]), WS_536872033));
F.line = 99;
var sign_536872046 = assignName_1375732840([115,105,103,110], HEX26_1375738402(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [43]), init_1375736785(new_536870938(), [45])]), WS_536872033));
F.line = 100;
var expression_536872051 = assignName_1375732840([101,120,112,114,101,115,115,105,111,110], init_1375741130(new_536871575()));
F.line = 101;
var group_536872059 = assignName_1375732840([103,114,111,117,112], HEX26_1375738361(HEX26_1375738402(init_1375736785(new_536870938(), [40]), WS_536872033), HEXC2HEXA7_1375738035(HEX26_1375738372(HEX26_1375738402(expression_536872051, init_1375736785(new_536870938(), [41])), WS_536872033))));
F.line = 102;
var factor_536872067 = assignName_1375732840([102,97,99,116,111,114], HEX26_1375738402(init_1375737476(new_536871736(), sign_536872046, {Field0: 0, Field1: 1}, [58,79,112,116,105,111,110]), init_1375737690(new_1375737779(), [NUMBER_536872035, group_536872059])));
F.line = 103;
var term_536872081 = assignName_1375732840([116,101,114,109], HEX26_1375738372(factor_536872067, init_1375737476(new_536871736(), HEX26_1375738361(HEX26_1375738402(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [42]), init_1375736785(new_536870938(), [47])]), WS_536872033), HEXC2HEXA7_1375738035(factor_536872067)), {Field0: 0, Field1: 1073741824}, [58,90,101,114,111,79,114,77,111,114,101])));
F.line = 104;
set_1375741166(expression_536872051, HEX26_1375738372(term_536872081, init_1375737476(new_536871736(), HEX26_1375738361(HEX26_1375738402(init_1375737690(new_1375737779(), [init_1375736785(new_536870938(), [43]), init_1375736785(new_536870938(), [45])]), WS_536872033), HEXC2HEXA7_1375738035(term_536872081)), {Field0: 0, Field1: 1073741824}, [58,90,101,114,111,79,114,77,111,114,101])));
F.line = 105;
grammarHEX3D_1375733262(expression_536872051, init_1375732066(new_1375732140(), [65,114,105,116,104,109,101,116,105,99], ConstSet23, EmptyStringSlice_1191182395, returnItemFlatten_1375731992, returnSeqFlatten_1375731995));
F.line = 106;
var arithmetic_536872097 = expression_536872051;
F.line = 108;
resume_1375736744(expression_536872051, atRe_1375735854([40,63,61,92,100,124,92,40,124,92,41,124,36,41]), true);
F.line = 109;
resume_1375736744(term_536872081, atRe_1375735854([40,63,61,92,100,124,92,40,124,36,41]), true);
F.line = 110;
resume_1375736744(group_536872059, atRe_1375735854([40,63,61,92,41,124,36,41]), true);
F.line = 112;
var tree_536872098 = [null];
F.line = 114;
++excHandler;
try {
F.line = 115;
tree_536872098[0] = HEX28HEX29_536870978(expression_536872051, [40,51,32,43,32,41,32,42,32,50], 0).Field0;
Label195: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536872170 = [HEX24_536872104(grammar_1375733213(expression_536872051).errors)];
  if (eqStrings(HEX3Ac1_536872170[0], makeNimstrLit("@[?:5:1010:term expected by parser expression, but \xC2\xBB) * 2\xC2\xAB found!]"))) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(116, 37): Check failed: $expression.grammar.errors ==\x0A    \"@[?:5:1010:term expected by parser expression, but \xC2\xBB) * 2\xC2\xAB found!]\""));
    F.line = 669;
    checkpoint_671089446(([36,101,120,112,114,101,115,115,105,111,110,46,103,114,97,109,109,97,114,46,101,114,114,111,114,115,32,119,97,115,32] || []).concat(HEX3Ac1_536872170[0] || []));
    F.line = 613;
    testStatusIMPL_536872027[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label196: {
      F.line = 620;
      var formatterHEX60gensym256_536872175 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872693 = 0;
      F.line = 242;
      var L_536872694 = (formatters_671088684[0]).length;
      Label197: {
        F.line = 243;
          Label198: while (true) {
          if (!(i_536872693 < L_536872694)) break Label198;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym256_536872175[0] = formatters_671088684[0][chckIndx(i_536872693, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym256_536872175[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872693 = addInt(i_536872693, 1);
            if (!(((formatters_671088684[0]).length == L_536872694))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
F.line = 118;
F.filename = "test_parse.nim";
var pe_536872180 = getCurrentException();
if (false) {
}
else {
  F.line = 739;
  F.filename = "unittest.nim";
  checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(118, 10): Check failed: false"));
  F.line = 613;
  testStatusIMPL_536872027[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label199: {
    F.line = 620;
    var formatterHEX60gensym258_536872185 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872697 = 0;
    F.line = 242;
    var L_536872698 = (formatters_671088684[0]).length;
    Label200: {
      F.line = 243;
        Label201: while (true) {
        if (!(i_536872697 < L_536872698)) break Label201;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym258_536872185[0] = formatters_671088684[0][chckIndx(i_536872697, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym258_536872185[0], checkpoints_671088683[0], []);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872697 = addInt(i_536872697, 1);
          if (!(((formatters_671088684[0]).length == L_536872698))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
F.line = 119;
F.filename = "test_parse.nim";
++excHandler;
try {
F.line = 120;
tree_536872098[0] = HEX28HEX29_536870978(expression_536872051, [40,51,32,43,32,42,32,50], 0).Field0;
Label203: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536872198 = [HEX24_536872104(grammar_1375733213(expression_536872051).errors)];
  if (eqStrings(HEX3Ac1_536872198[0], makeNimstrLit("@[?:5:1010:term expected by parser expression, but \xC2\xBB* 2\xC2\xAB found!, ?:7:1010:\")\" expected by parser group, but \xC2\xBB2\xC2\xAB found!]"))) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(121, 37): Check failed: $expression.grammar.errors ==\x0A    \"@[?:5:1010:term expected by parser expression, but \xC2\xBB* 2\xC2\xAB found!, ?:7:1010:\\\")\\\" expected by parser group, but \xC2\xBB2\xC2\xAB found!]\""));
    F.line = 669;
    checkpoint_671089446(([36,101,120,112,114,101,115,115,105,111,110,46,103,114,97,109,109,97,114,46,101,114,114,111,114,115,32,119,97,115,32] || []).concat(HEX3Ac1_536872198[0] || []));
    F.line = 613;
    testStatusIMPL_536872027[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label204: {
      F.line = 620;
      var formatterHEX60gensym262_536872203 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872702 = 0;
      F.line = 242;
      var L_536872703 = (formatters_671088684[0]).length;
      Label205: {
        F.line = 243;
          Label206: while (true) {
          if (!(i_536872702 < L_536872703)) break Label206;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym262_536872203[0] = formatters_671088684[0][chckIndx(i_536872702, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym262_536872203[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872702 = addInt(i_536872702, 1);
            if (!(((formatters_671088684[0]).length == L_536872703))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
F.line = 123;
F.filename = "test_parse.nim";
var pe_536872208 = getCurrentException();
if (false) {
}
else {
  F.line = 739;
  F.filename = "unittest.nim";
  checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(123, 10): Check failed: false"));
  F.line = 613;
  testStatusIMPL_536872027[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label207: {
    F.line = 620;
    var formatterHEX60gensym264_536872213 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872706 = 0;
    F.line = 242;
    var L_536872707 = (formatters_671088684[0]).length;
    Label208: {
      F.line = 243;
        Label209: while (true) {
        if (!(i_536872706 < L_536872707)) break Label209;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym264_536872213[0] = formatters_671088684[0][chckIndx(i_536872706, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym264_536872213[0], checkpoints_671088683[0], []);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872706 = addInt(i_536872706, 1);
          if (!(((formatters_671088684[0]).length == L_536872707))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
F.line = 124;
F.filename = "test_parse.nim";
++excHandler;
try {
F.line = 125;
tree_536872098[0] = HEX28HEX29_536870978(expression_536872051, [40,51,32,43,32,52,32,42,32,50], 0).Field0;
Label211: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536872226 = [HEX24_536872104(grammar_1375733213(expression_536872051).errors)];
  if (eqStrings(HEX3Ac1_536872226[0], [64,91,63,58,49,48,58,49,48,49,48,58,34,41,34,32,101,120,112,101,99,116,101,100,32,98,121,32,112,97,114,115,101,114,32,103,114,111,117,112,44,32,98,117,116,32,69,79,70,32,102,111,117,110,100,33,93])) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(126, 37): Check failed: $expression.grammar.errors ==\x0A    \"@[?:10:1010:\\\")\\\" expected by parser group, but EOF found!]\""));
    F.line = 669;
    checkpoint_671089446(([36,101,120,112,114,101,115,115,105,111,110,46,103,114,97,109,109,97,114,46,101,114,114,111,114,115,32,119,97,115,32] || []).concat(HEX3Ac1_536872226[0] || []));
    F.line = 613;
    testStatusIMPL_536872027[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label212: {
      F.line = 620;
      var formatterHEX60gensym268_536872231 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872711 = 0;
      F.line = 242;
      var L_536872712 = (formatters_671088684[0]).length;
      Label213: {
        F.line = 243;
          Label214: while (true) {
          if (!(i_536872711 < L_536872712)) break Label214;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym268_536872231[0] = formatters_671088684[0][chckIndx(i_536872711, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym268_536872231[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872711 = addInt(i_536872711, 1);
            if (!(((formatters_671088684[0]).length == L_536872712))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
F.line = 128;
F.filename = "test_parse.nim";
var pe_536872236 = getCurrentException();
if (false) {
}
else {
  F.line = 739;
  F.filename = "unittest.nim";
  checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(128, 10): Check failed: false"));
  F.line = 613;
  testStatusIMPL_536872027[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label215: {
    F.line = 620;
    var formatterHEX60gensym270_536872241 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872715 = 0;
    F.line = 242;
    var L_536872716 = (formatters_671088684[0]).length;
    Label216: {
      F.line = 243;
        Label217: while (true) {
        if (!(i_536872715 < L_536872716)) break Label217;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym270_536872241[0] = formatters_671088684[0][chckIndx(i_536872715, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym270_536872241[0], checkpoints_671088683[0], []);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872715 = addInt(i_536872715, 1);
          if (!(((formatters_671088684[0]).length == L_536872716))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
F.line = 130;
F.filename = "test_parse.nim";
++excHandler;
try {
F.line = 131;
tree_536872098[0] = HEX28HEX29_536870978(expression_536872051, [51,32,43,32,42,32,50], 0).Field0;
Label219: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536872254 = [(grammar_1375733213(expression_536872051).errors).length];
  if ((HEX3Ac1_536872254[0] == 2)) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(132, 40): Check failed: expression.grammar.errors.len == 2"));
    F.line = 669;
    checkpoint_671089446(([101,120,112,114,101,115,115,105,111,110,46,103,114,97,109,109,97,114,46,101,114,114,111,114,115,46,108,101,110,32,119,97,115,32] || []).concat(HEX24_369098760(HEX3Ac1_536872254[0]) || []));
    F.line = 613;
    testStatusIMPL_536872027[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label220: {
      F.line = 620;
      var formatterHEX60gensym274_536872259 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872720 = 0;
      F.line = 242;
      var L_536872721 = (formatters_671088684[0]).length;
      Label221: {
        F.line = 243;
          Label222: while (true) {
          if (!(i_536872720 < L_536872721)) break Label222;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym274_536872259[0] = formatters_671088684[0][chckIndx(i_536872720, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym274_536872259[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872720 = addInt(i_536872720, 1);
            if (!(((formatters_671088684[0]).length == L_536872721))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
Label223: {
  F.line = 664;
  var HEX3Ac1_536872264 = [(Temporary224 = grammar_1375733213(expression_536872051).errors, Temporary224)[chckIndx(1, 0, (Temporary224).length - 1)].code];
  if ((HEX3Ac1_536872264[0] == 1040)) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(133, 44): Check failed: expression.grammar.errors[1].code == ParserStoppedBeforeEnd"));
    F.line = 669;
    checkpoint_671089446(([101,120,112,114,101,115,115,105,111,110,46,103,114,97,109,109,97,114,46,101,114,114,111,114,115,91,49,93,46,99,111,100,101,32,119,97,115,32] || []).concat(HEX24_369098766(BigInt(HEX3Ac1_536872264[0])) || []));
    F.line = 669;
    checkpoint_671089446([80,97,114,115,101,114,83,116,111,112,112,101,100,66,101,102,111,114,101,69,110,100,32,119,97,115,32,49,48,52,48]);
    F.line = 613;
    testStatusIMPL_536872027[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label225: {
      F.line = 620;
      var formatterHEX60gensym279_536872269 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872725 = 0;
      F.line = 242;
      var L_536872726 = (formatters_671088684[0]).length;
      Label226: {
        F.line = 243;
          Label227: while (true) {
          if (!(i_536872725 < L_536872726)) break Label227;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym279_536872269[0] = formatters_671088684[0][chckIndx(i_536872725, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym279_536872269[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872725 = addInt(i_536872725, 1);
            if (!(((formatters_671088684[0]).length == L_536872726))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
F.line = 135;
F.filename = "test_parse.nim";
var pe_536872274 = getCurrentException();
if (false) {
}
else {
  F.line = 739;
  F.filename = "unittest.nim";
  checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(135, 10): Check failed: false"));
  F.line = 613;
  testStatusIMPL_536872027[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label228: {
    F.line = 620;
    var formatterHEX60gensym281_536872279 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872729 = 0;
    F.line = 242;
    var L_536872730 = (formatters_671088684[0]).length;
    Label229: {
      F.line = 243;
        Label230: while (true) {
        if (!(i_536872729 < L_536872730)) break Label230;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym281_536872279[0] = formatters_671088684[0][chckIndx(i_536872729, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym281_536872279[0], checkpoints_671088683[0], []);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872729 = addInt(i_536872729, 1);
          if (!(((formatters_671088684[0]).length == L_536872730))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
F.line = 137;
F.filename = "test_parse.nim";
var gap_536872285 = assignName_1375732840([58,103,97,112], RegExp_1375737219([91,94,92,100,40,41,93,42,40,63,61,91,92,100,40,93,41]));
F.line = 138;
skipUntil_1375736704(expression_536872051, {kind: 3, consumeParser: gap_536872285, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null}, true);
F.line = 140;
++excHandler;
try {
F.line = 141;
tree_536872098[0] = HEX28HEX29_536870978(expression_536872051, [51,32,43,32,42,32,50], 0).Field0;
Label232: {
  F.line = 664;
  F.filename = "unittest.nim";
  var HEX3Ac1_536872294 = [(grammar_1375733213(expression_536872051).errors).length];
  if ((HEX3Ac1_536872294[0] == 1)) {
  }
  else {
    F.line = 721;
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(142, 40): Check failed: expression.grammar.errors.len == 1"));
    F.line = 669;
    checkpoint_671089446(([101,120,112,114,101,115,115,105,111,110,46,103,114,97,109,109,97,114,46,101,114,114,111,114,115,46,108,101,110,32,119,97,115,32] || []).concat(HEX24_369098760(HEX3Ac1_536872294[0]) || []));
    F.line = 613;
    testStatusIMPL_536872027[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label233: {
      F.line = 620;
      var formatterHEX60gensym288_536872299 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872734 = 0;
      F.line = 242;
      var L_536872735 = (formatters_671088684[0]).length;
      Label234: {
        F.line = 243;
          Label235: while (true) {
          if (!(i_536872734 < L_536872735)) break Label235;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym288_536872299[0] = formatters_671088684[0][chckIndx(i_536872734, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym288_536872299[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872734 = addInt(i_536872734, 1);
            if (!(((formatters_671088684[0]).length == L_536872735))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
F.line = 144;
F.filename = "test_parse.nim";
var pe_536872304 = getCurrentException();
if (false) {
}
else {
  F.line = 739;
  F.filename = "unittest.nim";
  checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(144, 10): Check failed: false"));
  F.line = 613;
  testStatusIMPL_536872027[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label236: {
    F.line = 620;
    var formatterHEX60gensym290_536872309 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872738 = 0;
    F.line = 242;
    var L_536872739 = (formatters_671088684[0]).length;
    Label237: {
      F.line = 243;
        Label238: while (true) {
        if (!(i_536872738 < L_536872739)) break Label238;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym290_536872309[0] = formatters_671088684[0][chckIndx(i_536872738, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym290_536872309[0], checkpoints_671088683[0], []);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872738 = addInt(i_536872738, 1);
          if (!(((formatters_671088684[0]).length == L_536872739))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

}
else {
	reraiseException();
}
lastJSError = prevJSError;
} finally {
framePtr = F;
}
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536872314 = getCurrentException();
F.line = 564;
var eTypeDesc_536872315 = ([91] || []).concat(exceptionTypeName_671089436(e_536872314) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536872315 || []));
if ((e_536872314 == null)) {
F.line = 613;
testStatusIMPL_536872027[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label239: {
  F.line = 620;
  var formatterHEX60gensym291_536872324 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872742 = 0;
  F.line = 242;
  var L_536872743 = (formatters_671088684[0]).length;
  Label240: {
    F.line = 243;
      Label241: while (true) {
      if (!(i_536872742 < L_536872743)) break Label241;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym291_536872324[0] = formatters_671088684[0][chckIndx(i_536872742, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym291_536872324[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872742 = addInt(i_536872742, 1);
        if (!(((formatters_671088684[0]).length == L_536872743))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536872329 = [getStackTrace_33556645(e_536872314)];
  F.line = 613;
  testStatusIMPL_536872027[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label242: {
    F.line = 620;
    var formatterHEX60gensym292_536872334 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872746 = 0;
    F.line = 242;
    var L_536872747 = (formatters_671088684[0]).length;
    Label243: {
      F.line = 243;
        Label244: while (true) {
        if (!(i_536872746 < L_536872747)) break Label244;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym292_536872334[0] = formatters_671088684[0][chckIndx(i_536872746, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym292_536872334[0], checkpoints_671088683[0], stackTrace_536872329[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872746 = addInt(i_536872746, 1);
          if (!(((formatters_671088684[0]).length == L_536872747))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536872027[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536872343 = {suiteName: [], testName: [97,114,105,116,104,109,101,116,105,99,32,101,114,114,111,114,32,114,101,115,117,109,112,116,105,111,110], status: testStatusIMPL_536872027[0]};
F.line = 580;
testEnded_671089427(testResult_536872343);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

F.line = 147;
F.filename = "test_parse.nim";
var traversalExpected_536872348 = makeNimstrLit("expression := expression\x0Aexpression := term {(\"+\"|\"-\") WS \xC2\xA7term}\x0Aterm := factor {(\"*\"|\"/\") WS \xC2\xA7factor}\x0Afactor := [sign] (NUMBER|group)\x0A[sign]\x0Asign := (\"+\"|\"-\") WS\x0A\"+\"|\"-\"\x0A\"+\"\x0A\"-\"\x0AWS := /\\s*/\x0ANUMBER|group\x0ANUMBER := /(?:0|(?:[1-9]\\d*))(?:\\.\\d+)?/ WS\x0A/(?:0|(?:[1-9]\\d*))(?:\\.\\d+)?/\x0Agroup := \"(\" WS \xC2\xA7expression \")\" WS\x0A\"(\"\x0A\")\"\x0A{(\"*\"|\"/\") WS \xC2\xA7factor}\x0A(\"*\"|\"/\") WS \xC2\xA7factor\x0A\"*\"|\"/\"\x0A\"*\"\x0A\"/\"\x0A{(\"+\"|\"-\") WS \xC2\xA7term}\x0A(\"+\"|\"-\") WS \xC2\xA7term\x0A\"+\"|\"-\"\x0A\"+\"\x0A\"-\"");
F.line = 544;
F.filename = "unittest.nim";
ensureInitialized_671089364();
if (shouldRun_671089231([], [116,114,97,118,101,114,115,97,108])) {
F.line = 547;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
F.line = 548;
var testStatusIMPL_536872353 = [0];
Label245: {
  F.line = 550;
  var formatter_536872357 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872750 = 0;
  F.line = 242;
  var L_536872751 = (formatters_671088684[0]).length;
  Label246: {
    F.line = 243;
      Label247: while (true) {
      if (!(i_536872750 < L_536872751)) break Label247;
        F.line = 550;
        F.filename = "unittest.nim";
        formatter_536872357[0] = formatters_671088684[0][chckIndx(i_536872750, 0, (formatters_671088684[0]).length - 1)];
        F.line = 550;
        testStarted_671088707(formatter_536872357[0], [116,114,97,118,101,114,115,97,108]);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872750 = addInt(i_536872750, 1);
        if (!(((formatters_671088684[0]).length == L_536872751))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 554;
F.filename = "unittest.nim";
++excHandler;
try {
F.line = 176;
F.filename = "test_parse.nim";
var s_536872358 = [[]];
Label249: {
  F.line = 180;
  var p_536872362 = [null];
  F.line = 239;
  F.filename = "iterators.nim";
  var colontmp__536872754 = [];
  F.line = 376;
  F.filename = "parse.nim";
  colontmp__536872754 = descendants_1375733169(arithmetic_536871807, refdSubs_1375733088);
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872756 = 0;
  F.line = 242;
  var L_536872757 = (colontmp__536872754).length;
  Label250: {
    F.line = 243;
      Label251: while (true) {
      if (!(i_536872756 < L_536872757)) break Label251;
        F.line = 376;
        F.filename = "parse.nim";
        p_536872362[0] = colontmp__536872754[chckIndx(i_536872756, 0, (colontmp__536872754).length - 1)];
        F.line = 376;
        if ((0 < (name_1375732769(p_536872362[0])).length)) {
        Temporary252 = (name_1375732769(p_536872362[0]) || []).concat([32,58,61,32] || [],HEX24_1375733037(p_536872362[0]) || []);
        }
        else {
        Temporary252 = HEX24_1375733037(p_536872362[0]);
        }
        
        var Temporary253 = nimCopy(null, Temporary252, NTI33554449);
        s_536872358[0].push(Temporary253);;
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872756 = addInt(i_536872756, 1);
        if (!(((colontmp__536872754).length == L_536872757))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
F.line = 378;
F.filename = "parse.nim";
resetTraversalTracker_1375733194(arithmetic_536871807);
F.line = 182;
F.filename = "test_parse.nim";
var traversalOutput_536872367 = [nsuJoinSep(s_536872358[0], [10])];
Label254: {
  if (eqStrings(traversalOutput_536872367[0], traversalExpected_536872348)) {
  }
  else {
    F.line = 721;
    F.filename = "unittest.nim";
    checkpoint_671089446(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim(183, 24): Check failed: traversalOutput == traversalExpected"));
    F.line = 669;
    checkpoint_671089446(([116,114,97,118,101,114,115,97,108,79,117,116,112,117,116,32,119,97,115,32] || []).concat(traversalOutput_536872367[0] || []));
    F.line = 669;
    checkpoint_671089446(([116,114,97,118,101,114,115,97,108,69,120,112,101,99,116,101,100,32,119,97,115,32] || []).concat(traversalExpected_536872348 || []));
    F.line = 613;
    testStatusIMPL_536872353[0] = 1;
    F.line = 617;
    ensureInitialized_671089364();
    Label255: {
      F.line = 620;
      var formatterHEX60gensym299_536872372 = [null];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536872761 = 0;
      F.line = 242;
      var L_536872762 = (formatters_671088684[0]).length;
      Label256: {
        F.line = 243;
          Label257: while (true) {
          if (!(i_536872761 < L_536872762)) break Label257;
            F.line = 620;
            F.filename = "unittest.nim";
            formatterHEX60gensym299_536872372[0] = formatters_671088684[0][chckIndx(i_536872761, 0, (formatters_671088684[0]).length - 1)];
            F.line = 620;
            failureOccurred_671088712(formatterHEX60gensym299_536872372[0], checkpoints_671088683[0], []);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536872761 = addInt(i_536872761, 1);
            if (!(((formatters_671088684[0]).length == L_536872762))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (abortOnError_671088682[0]) {
    F.line = 626;
    F.filename = "unittest.nim";
    process.exit(1);
    }
    
    F.line = 628;
    checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
  }
  
};
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
framePtr = F;
F.line = 563;
var e_536872377 = getCurrentException();
F.line = 564;
var eTypeDesc_536872378 = ([91] || []).concat(exceptionTypeName_671089436(e_536872377) || [],[93] || []);
F.line = 565;
checkpoint_671089446(([85,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32] || []).concat(getCurrentExceptionMsg_33556463() || [],[32] || [],eTypeDesc_536872378 || []));
if ((e_536872377 == null)) {
F.line = 613;
testStatusIMPL_536872353[0] = 1;
F.line = 617;
ensureInitialized_671089364();
Label258: {
  F.line = 620;
  var formatterHEX60gensym300_536872387 = [null];
  F.line = 241;
  F.filename = "iterators.nim";
  var i_536872765 = 0;
  F.line = 242;
  var L_536872766 = (formatters_671088684[0]).length;
  Label259: {
    F.line = 243;
      Label260: while (true) {
      if (!(i_536872765 < L_536872766)) break Label260;
        F.line = 620;
        F.filename = "unittest.nim";
        formatterHEX60gensym300_536872387[0] = formatters_671088684[0][chckIndx(i_536872765, 0, (formatters_671088684[0]).length - 1)];
        F.line = 620;
        failureOccurred_671088712(formatterHEX60gensym300_536872387[0], checkpoints_671088683[0], []);
        F.line = 245;
        F.filename = "iterators.nim";
        i_536872765 = addInt(i_536872765, 1);
        if (!(((formatters_671088684[0]).length == L_536872766))) {
        F.line = 246;
        failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  };
};
if (abortOnError_671088682[0]) {
F.line = 626;
F.filename = "unittest.nim";
process.exit(1);
}

F.line = 628;
checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}
else {
  F.line = 569;
  var stackTrace_536872392 = [getStackTrace_33556645(e_536872377)];
  F.line = 613;
  testStatusIMPL_536872353[0] = 1;
  F.line = 617;
  ensureInitialized_671089364();
  Label261: {
    F.line = 620;
    var formatterHEX60gensym301_536872397 = [null];
    F.line = 241;
    F.filename = "iterators.nim";
    var i_536872769 = 0;
    F.line = 242;
    var L_536872770 = (formatters_671088684[0]).length;
    Label262: {
      F.line = 243;
        Label263: while (true) {
        if (!(i_536872769 < L_536872770)) break Label263;
          F.line = 620;
          F.filename = "unittest.nim";
          formatterHEX60gensym301_536872397[0] = formatters_671088684[0][chckIndx(i_536872769, 0, (formatters_671088684[0]).length - 1)];
          F.line = 620;
          failureOccurred_671088712(formatterHEX60gensym301_536872397[0], checkpoints_671088683[0], stackTrace_536872392[0]);
          F.line = 245;
          F.filename = "iterators.nim";
          i_536872769 = addInt(i_536872769, 1);
          if (!(((formatters_671088684[0]).length == L_536872770))) {
          F.line = 246;
          failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
          }
          
        }
    };
  };
  if (abortOnError_671088682[0]) {
  F.line = 626;
  F.filename = "unittest.nim";
  process.exit(1);
  }
  
  F.line = 628;
  checkpoints_671088683[0] = nimCopy(null, [], NTI671088655);
}

lastJSError = prevJSError;
} finally {
framePtr = F;
if ((testStatusIMPL_536872353[0] == 1)) {
F.line = 574;
setProgramResult_687865987(1);
}

F.line = 575;
var testResult_536872406 = {suiteName: [], testName: [116,114,97,118,101,114,115,97,108], status: testStatusIMPL_536872353[0]};
F.line = 580;
testEnded_671089427(testResult_536872406);
F.line = 581;
checkpoints_671088683[0] = nimCopy(null, [], NTI922746906);
}
}

framePtr = F.prev;
var F = {procname: "module test_parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/tests/test_parse.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function sysFatal_33557113(message_33557116) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_33557116, NTI33554449), m_type: NTI134217763, parent: null, name: null, trace: [], up: null}, "NilAccessDefect");
  framePtr = F.prev;

  
}

function chckNilDisp(p_33557112, p_33557112_Idx) {
    if ((p_33557112 == null && p_33557112_Idx == 0)) {
    sysFatal_33557113([99,97,110,110,111,116,32,100,105,115,112,97,116,99,104,59,32,100,105,115,112,97,116,99,104,101,114,32,105,115,32,110,105,108]);
    }
    

  
}

function writeData_1023410406(s_1023410407, buffer_1023410408, buffer_1023410408_Idx, bufLen_1023410409) {
  var F = {procname: "streams.writeData", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/streams.nim", line: 0};
  framePtr = F;
    F.line = 343;
    F.filename = "streams.nim";
    s_1023410407.writeDataImpl(s_1023410407, buffer_1023410408, buffer_1023410408_Idx, bufLen_1023410409);
  framePtr = F.prev;

  
}

function write_1023410415(s_1023410416, x_1023410417) {
  var F = {procname: "streams.write", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/streams.nim", line: 0};
  framePtr = F;
    if ((0 < (x_1023410417).length)) {
    F.line = 378;
    F.filename = "streams.nim";
    var x_1023410418 = [nimCopy(null, x_1023410417, NTI33554449)];
    F.line = 379;
    writeData_1023410406(s_1023410416, x_1023410418, 0, (x_1023410418[0]).length);
    }
    
  framePtr = F.prev;

  
}

function writeLine_1023410442(s_1023410443, args_1023410444) {
  var F = {procname: "streams.writeLine", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/streams.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 406;
      F.filename = "streams.nim";
      var str_1023410448 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_536873124 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_536873124 < (args_1023410444).length)) break Label3;
            F.line = 406;
            F.filename = "streams.nim";
            str_1023410448 = args_1023410444[chckIndx(i_536873124, 0, (args_1023410444).length - 1)];
            F.line = 406;
            write_1023410415(s_1023410443, str_1023410448);
            F.line = 16;
            F.filename = "iterators.nim";
            i_536873124 = addInt(i_536873124, 1);
          }
      };
    };
    F.line = 407;
    F.filename = "streams.nim";
    write_1023410415(s_1023410443, [10]);
  framePtr = F.prev;

  
}

function invalidFormatString_754977083(formatstr_754977084) {
  var F = {procname: "strutils.invalidFormatString", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2757;
    F.filename = "strutils.nim";
    raiseException({message: ([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,58,32] || []).concat(formatstr_754977084 || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
  framePtr = F.prev;

  
}

function toLowerAscii_1006632961(c_1006632962) {
  var result_1006632963 = 0;

  var F = {procname: "strimpl.toLowerAscii", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/std/private/strimpl.nim", line: 0};
  framePtr = F;
    if ((ConstSet28[c_1006632962] != undefined)) {
    F.line = 3;
    F.filename = "strimpl.nim";
    result_1006632963 = chckRange(addInt(c_1006632962, 32), 0, 255);
    }
    else {
      F.line = 5;
      result_1006632963 = c_1006632962;
    }
    
  framePtr = F.prev;

  return result_1006632963;

}

function nsuCmpIgnoreStyle(a_754974932, b_754974933) {
          var Temporary7;
          var Temporary8;

  var result_754974934 = 0;

  BeforeRet: {
    var aLenHEX60gensym24_754974943 = (a_754974932).length;
    var bLenHEX60gensym24_754974944 = (b_754974933).length;
    var iHEX60gensym24_754974945 = 0;
    var jHEX60gensym24_754974946 = 0;
    Label1: {
        Label2: while (true) {
        if (!true) break Label2;
          Label3: {
              Label4: while (true) {
              if (!((iHEX60gensym24_754974945 < aLenHEX60gensym24_754974943) && (a_754974932[iHEX60gensym24_754974945] == 95))) break Label4;
                iHEX60gensym24_754974945 += 1;
              }
          };
          Label5: {
              Label6: while (true) {
              if (!((jHEX60gensym24_754974946 < bLenHEX60gensym24_754974944) && (b_754974933[jHEX60gensym24_754974946] == 95))) break Label6;
                jHEX60gensym24_754974946 += 1;
              }
          };
          if ((iHEX60gensym24_754974945 < aLenHEX60gensym24_754974943)) {
          Temporary7 = toLowerAscii_1006632961(a_754974932[iHEX60gensym24_754974945]);
          }
          else {
          Temporary7 = 0;
          }
          
          var aaHEX60gensym24_754974957 = Temporary7;
          if ((jHEX60gensym24_754974946 < bLenHEX60gensym24_754974944)) {
          Temporary8 = toLowerAscii_1006632961(b_754974933[jHEX60gensym24_754974946]);
          }
          else {
          Temporary8 = 0;
          }
          
          var bbHEX60gensym24_754974958 = Temporary8;
          result_754974934 = (aaHEX60gensym24_754974957 - bbHEX60gensym24_754974958);
          if (!((result_754974934 == 0))) {
          break BeforeRet;
          }
          
          if ((aLenHEX60gensym24_754974943 <= iHEX60gensym24_754974945)) {
          if ((bLenHEX60gensym24_754974944 <= jHEX60gensym24_754974946)) {
          result_754974934 = 0;
          break BeforeRet;
          }
          
          result_754974934 = (-1);
          break BeforeRet;
          }
          else {
          if ((bLenHEX60gensym24_754974944 <= jHEX60gensym24_754974946)) {
          result_754974934 = 1;
          break BeforeRet;
          }
          }
          iHEX60gensym24_754974945 += 1;
          jHEX60gensym24_754974946 += 1;
        }
    };
  };

  return result_754974934;

}

function findNormalized_754977070(x_754977071, inArray_754977072) {
  var result_754977073 = 0;

  var F = {procname: "strutils.findNormalized", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 2749;
    F.filename = "strutils.nim";
    var i_754977074 = 0;
    Label1: {
      F.line = 2750;
        Label2: while (true) {
        if (!(i_754977074 < (inArray_754977072).length - 1)) break Label2;
          if ((nsuCmpIgnoreStyle(x_754977071, inArray_754977072[chckIndx(i_754977074, 0, (inArray_754977072).length - 1)]) == 0)) {
          F.line = 2751;
          result_754977073 = i_754977074;
          break BeforeRet;
          }
          
          F.line = 2752;
          i_754977074 = addInt(i_754977074, 2);
        }
    };
    F.line = 2754;
    result_754977073 = (-1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_754977073;

}

function nsuAddf(s_754977087, s_754977087_Idx, formatstr_754977088, a_754977089) {
                  var Temporary5;
            var Temporary6;
            var Temporary9;
                  var Temporary12;

  var F = {procname: "strutils.addf", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2763;
    F.filename = "strutils.nim";
    var i_754977091 = 0;
    F.line = 2764;
    var num_754977092 = 0;
    Label1: {
      F.line = 2765;
        Label2: while (true) {
        if (!(i_754977091 < (formatstr_754977088).length)) break Label2;
          if (((formatstr_754977088[chckIndx(i_754977091, 0, (formatstr_754977088).length - 1)] == 36) && (addInt(i_754977091, 1) < (formatstr_754977088).length))) {
          F.line = 2767;
          switch (formatstr_754977088[chckIndx(addInt(i_754977091, 1), 0, (formatstr_754977088).length - 1)]) {
          case 35:
            if (((a_754977089).length - 1 < num_754977092)) {
            F.line = 2769;
            invalidFormatString_754977083(formatstr_754977088);
            }
            
            F.line = 2770;
            s_754977087[s_754977087_Idx].push.apply(s_754977087[s_754977087_Idx], a_754977089[chckIndx(num_754977092, 0, (a_754977089).length - 1)]);;
            F.line = 2771;
            i_754977091 = addInt(i_754977091, 2);
            F.line = 2772;
            num_754977092 = addInt(num_754977092, 1);
            break;
          case 36:
            F.line = 2774;
            addChar(s_754977087[s_754977087_Idx], 36);;
            F.line = 2775;
            i_754977091 = addInt(i_754977091, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            F.line = 2777;
            var j_754977111 = 0;
            F.line = 2778;
            i_754977091 = addInt(i_754977091, 1);
            F.line = 2779;
            var negative_754977117 = (formatstr_754977088[chckIndx(i_754977091, 0, (formatstr_754977088).length - 1)] == 45);
            if (negative_754977117) {
            F.line = 2780;
            i_754977091 = addInt(i_754977091, 1);
            }
            
            Label3: {
              F.line = 2781;
                Label4: while (true) {
                  if (!(i_754977091 < (formatstr_754977088).length)) Temporary5 = false; else {                    Temporary5 = (ConstSet25[formatstr_754977088[chckIndx(i_754977091, 0, (formatstr_754977088).length - 1)]] != undefined);                  }                if (!Temporary5) break Label4;
                  F.line = 2782;
                  j_754977111 = subInt(addInt(mulInt(j_754977111, 10), formatstr_754977088[chckIndx(i_754977091, 0, (formatstr_754977088).length - 1)]), 48);
                  F.line = 2783;
                  i_754977091 = addInt(i_754977091, 1);
                }
            };
            F.line = 2784;
            if (!(negative_754977117)) {
            Temporary6 = subInt(j_754977111, 1);
            }
            else {
            Temporary6 = subInt((a_754977089).length, j_754977111);
            }
            
            var idx_754977142 = Temporary6;
            if (((idx_754977142 < 0) || ((a_754977089).length - 1 < idx_754977142))) {
            F.line = 2785;
            invalidFormatString_754977083(formatstr_754977088);
            }
            
            F.line = 2786;
            s_754977087[s_754977087_Idx].push.apply(s_754977087[s_754977087_Idx], a_754977089[chckIndx(idx_754977142, 0, (a_754977089).length - 1)]);;
            break;
          case 123:
            F.line = 2788;
            var j_754977146 = addInt(i_754977091, 2);
            F.line = 2789;
            var k_754977147 = 0;
            F.line = 2790;
            var negative_754977148 = (formatstr_754977088[chckIndx(j_754977146, 0, (formatstr_754977088).length - 1)] == 45);
            if (negative_754977148) {
            F.line = 2791;
            j_754977146 = addInt(j_754977146, 1);
            }
            
            F.line = 2792;
            var isNumber_754977154 = 0;
            Label7: {
              F.line = 2793;
                Label8: while (true) {
                if (!((j_754977146 < (formatstr_754977088).length) && !((ConstSet26[formatstr_754977088[chckIndx(j_754977146, 0, (formatstr_754977088).length - 1)]] != undefined)))) break Label8;
                  if ((ConstSet27[formatstr_754977088[chckIndx(j_754977146, 0, (formatstr_754977088).length - 1)]] != undefined)) {
                  F.line = 2795;
                  k_754977147 = subInt(addInt(mulInt(k_754977147, 10), formatstr_754977088[chckIndx(j_754977146, 0, (formatstr_754977088).length - 1)]), 48);
                  if ((isNumber_754977154 == 0)) {
                  F.line = 2796;
                  isNumber_754977154 = 1;
                  }
                  
                  }
                  else {
                    F.line = 2798;
                    isNumber_754977154 = (-1);
                  }
                  
                  F.line = 2799;
                  j_754977146 = addInt(j_754977146, 1);
                }
            };
            if ((isNumber_754977154 == 1)) {
            F.line = 2801;
            if (!(negative_754977148)) {
            Temporary9 = subInt(k_754977147, 1);
            }
            else {
            Temporary9 = subInt((a_754977089).length, k_754977147);
            }
            
            var idx_754977177 = Temporary9;
            if (((idx_754977177 < 0) || ((a_754977089).length - 1 < idx_754977177))) {
            F.line = 2802;
            invalidFormatString_754977083(formatstr_754977088);
            }
            
            F.line = 2803;
            s_754977087[s_754977087_Idx].push.apply(s_754977087[s_754977087_Idx], a_754977089[chckIndx(idx_754977177, 0, (a_754977089).length - 1)]);;
            }
            else {
              F.line = 2805;
              var x_754977181 = findNormalized_754977070(substr_33558078(formatstr_754977088, addInt(i_754977091, 2), subInt(j_754977146, 1)), a_754977089);
              if (((0 <= x_754977181) && (x_754977181 < (a_754977089).length - 1))) {
              F.line = 2806;
              s_754977087[s_754977087_Idx].push.apply(s_754977087[s_754977087_Idx], a_754977089[chckIndx(addInt(x_754977181, 1), 0, (a_754977089).length - 1)]);;
              }
              else {
                F.line = 2807;
              invalidFormatString_754977083(formatstr_754977088);
              }
              
            }
            
            F.line = 2808;
            i_754977091 = addInt(j_754977146, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            F.line = 2810;
            var j_754977185 = addInt(i_754977091, 1);
            Label10: {
              F.line = 2811;
                Label11: while (true) {
                  if (!(j_754977185 < (formatstr_754977088).length)) Temporary12 = false; else {                    Temporary12 = (ConstSet29[formatstr_754977088[chckIndx(j_754977185, 0, (formatstr_754977088).length - 1)]] != undefined);                  }                if (!Temporary12) break Label11;
                  F.line = 2811;
                  j_754977185 = addInt(j_754977185, 1);
                }
            };
            F.line = 2812;
            var x_754977195 = findNormalized_754977070(substr_33558078(formatstr_754977088, addInt(i_754977091, 1), subInt(j_754977185, 1)), a_754977089);
            if (((0 <= x_754977195) && (x_754977195 < (a_754977089).length - 1))) {
            F.line = 2813;
            s_754977087[s_754977087_Idx].push.apply(s_754977087[s_754977087_Idx], a_754977089[chckIndx(addInt(x_754977195, 1), 0, (a_754977089).length - 1)]);;
            }
            else {
              F.line = 2814;
            invalidFormatString_754977083(formatstr_754977088);
            }
            
            F.line = 2815;
            i_754977091 = j_754977185;
            break;
          default: 
            F.line = 2817;
            invalidFormatString_754977083(formatstr_754977088);
            break;
          }
          }
          else {
            F.line = 2819;
            addChar(s_754977087[s_754977087_Idx], formatstr_754977088[chckIndx(i_754977091, 0, (formatstr_754977088).length - 1)]);;
            F.line = 2820;
            i_754977091 = addInt(i_754977091, 1);
          }
          
        }
    };
  framePtr = F.prev;

  
}

function nsuFormatSingleElem(formatstr_754977216, a_754977217) {
  var result_754977218 = [[]];

  var F = {procname: "strutils.%", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2874;
    F.filename = "strutils.nim";
    result_754977218[0] = nimCopy(null, mnewString(0), NTI33554449);
    F.line = 2875;
    nsuAddf(result_754977218, 0, formatstr_754977216, [nimCopy(null, a_754977217, NTI33554449)]);
  framePtr = F.prev;

  return result_754977218[0];

}

function xmlEscape_671089047(s_671089048) {
  var result_671089049 = [];

  var F = {procname: "unittest.xmlEscape", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 307;
    F.filename = "unittest.nim";
    result_671089049 = nimCopy(null, mnewString(0), NTI33554449);
    Label1: {
      F.line = 308;
      var c_671089050 = 0;
      F.line = 259;
      F.filename = "iterators.nim";
      var i_536873135 = 0;
      F.line = 260;
      var L_536873136 = (s_671089048).length;
      Label2: {
        F.line = 261;
          Label3: while (true) {
          if (!(i_536873135 < L_536873136)) break Label3;
            F.line = 308;
            F.filename = "unittest.nim";
            c_671089050 = s_671089048[chckIndx(i_536873135, 0, (s_671089048).length - 1)];
            F.line = 308;
            switch (c_671089050) {
            case 60:
              F.line = 310;
              result_671089049.push.apply(result_671089049, [38,108,116,59]);;
              break;
            case 62:
              F.line = 311;
              result_671089049.push.apply(result_671089049, [38,103,116,59]);;
              break;
            case 38:
              F.line = 312;
              result_671089049.push.apply(result_671089049, [38,97,109,112,59]);;
              break;
            case 34:
              F.line = 313;
              result_671089049.push.apply(result_671089049, [38,113,117,111,116,59]);;
              break;
            case 39:
              F.line = 314;
              result_671089049.push.apply(result_671089049, [38,97,112,111,115,59]);;
              break;
            default: 
              if ((c_671089050 < 32)) {
              F.line = 317;
              result_671089049.push.apply(result_671089049, ([38,35] || []).concat(HEX24_369098760(c_671089050) || [],[59]));;
              }
              else {
                F.line = 319;
              addChar(result_671089049, c_671089050);;
              }
              
              break;
            }
            F.line = 263;
            F.filename = "iterators.nim";
            i_536873135 = addInt(i_536873135, 1);
            if (!(((s_671089048).length == L_536873136))) {
            F.line = 264;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(264, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  return result_671089049;

}

function suiteStarted_671089101(formatter_671089102, suiteName_671089103) {
  var F = {procname: "unittest.suiteStarted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 342;
    F.filename = "unittest.nim";
    writeLine_1023410442(formatter_671089102.stream, [nsuFormatSingleElem([9,60,116,101,115,116,115,117,105,116,101,32,110,97,109,101,61,34,36,49,34,62], xmlEscape_671089047(suiteName_671089103))]);
  framePtr = F.prev;

  
}

function suiteStarted_671088957(formatter_671088958, suiteName_671088959) {
  var F = {procname: "unittest.suiteStarted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 268;
    F.filename = "unittest.nim";
    rawEcho([10,91,83,117,105,116,101,93,32], suiteName_671088959);
    F.line = 269;
    formatter_671088958.isInSuite = true;
  framePtr = F.prev;

  
}

function suiteStarted_671088700(formatter_671088701, suiteName_671088702) {
  var F = {procname: "unittest.suiteStarted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
  framePtr = F.prev;

  
}

function suiteStarted_671088703(formatter_671088701, suiteName_671088702) {
  var F = {procname: "unittest.suiteStarted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(formatter_671088701);
    if (isObj(formatter_671088701.m_type, NTI671088653)) {
    F.line = 199;
    F.filename = "unittest.nim";
    suiteStarted_671089101(formatter_671088701, suiteName_671088702);
    }
    else {
    if (isObj(formatter_671088701.m_type, NTI671088652)) {
    F.line = 199;
    suiteStarted_671088957(formatter_671088701, suiteName_671088702);
    }
    else {
    if (isObj(formatter_671088701.m_type, NTI671088651)) {
    F.line = 199;
    suiteStarted_671088700(formatter_671088701, suiteName_671088702);
    }
    }}
  framePtr = F.prev;

  
}

function toFloat_33556008(i_33556009) {
  var result_33556010 = 0.0;

  var F = {procname: "system.toFloat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1292;
    F.filename = "system.nim";
    result_33556010 = i_33556009;
  framePtr = F.prev;

  return result_33556010;

}

function HEX2F_33556020(x_33556021, y_33556022) {
  var result_33556023 = 0.0;

  var F = {procname: "system./", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1340;
    F.filename = "system.nim";
    result_33556023 = (toFloat_33556008(x_33556021) / toFloat_33556008(y_33556022));
  framePtr = F.prev;

  return result_33556023;

}

function epochTime_1040191729() {
  var result_1040191730 = 0.0;

  var F = {procname: "times.epochTime", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 2808;
    F.filename = "times.nim";
    result_1040191730 = HEX2F_33556020(new Date().getTime(), 1000);
  framePtr = F.prev;

  return result_1040191730;

}

function testStarted_671089104(formatter_671089105, testName_671089106) {
  var F = {procname: "unittest.testStarted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 345;
    F.filename = "unittest.nim";
    if (formatter_671089105.testErrors.length < 0) { for (var i = formatter_671089105.testErrors.length ; i < 0 ; ++i) formatter_671089105.testErrors.push([]); }
               else { formatter_671089105.testErrors.length = 0; };
    F.line = 346;
    if (formatter_671089105.testStackTrace.length < 0) { for (var i = formatter_671089105.testStackTrace.length; i < 0; ++i) formatter_671089105.testStackTrace.push(0); }
         else {formatter_671089105.testStackTrace.length = 0; };
    F.line = 347;
    formatter_671089105.testStartTime = epochTime_1040191729();
  framePtr = F.prev;

  
}

function testStarted_671088977(formatter_671088978, testName_671088979) {
  var F = {procname: "unittest.testStarted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 272;
    F.filename = "unittest.nim";
    formatter_671088978.isInTest = true;
  framePtr = F.prev;

  
}

function testStarted_671088704(formatter_671088705, testName_671088706) {
  var F = {procname: "unittest.testStarted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
  framePtr = F.prev;

  
}

function testStarted_671088707(formatter_671088705, testName_671088706) {
  var F = {procname: "unittest.testStarted", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(formatter_671088705);
    if (isObj(formatter_671088705.m_type, NTI671088653)) {
    F.line = 201;
    F.filename = "unittest.nim";
    testStarted_671089104(formatter_671088705, testName_671088706);
    }
    else {
    if (isObj(formatter_671088705.m_type, NTI671088652)) {
    F.line = 201;
    testStarted_671088977(formatter_671088705, testName_671088706);
    }
    else {
    if (isObj(formatter_671088705.m_type, NTI671088651)) {
    F.line = 201;
    testStarted_671088704(formatter_671088705, testName_671088706);
    }
    }}
  framePtr = F.prev;

  
}

function add_671089115(x_671089117, x_671089117_Idx, y_671089118) {
    var Temporary1;

  var F = {procname: "add.add", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1204;
    F.filename = "system.nim";
    var xl_671089122 = (x_671089117[x_671089117_Idx]).length;
    F.line = 1205;
    if (x_671089117[x_671089117_Idx].length < (Temporary1 = chckRange(addInt(xl_671089122, (y_671089118).length), 0, 2147483647), Temporary1)) { for (var i = x_671089117[x_671089117_Idx].length ; i < Temporary1 ; ++i) x_671089117[x_671089117_Idx].push([]); }
               else { x_671089117[x_671089117_Idx].length = Temporary1; };
    Label2: {
      F.line = 1206;
      var i_671089137 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536873139 = 0;
      F.line = 1206;
      F.filename = "system.nim";
      colontmp__536873139 = (y_671089118).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536873140 = 0;
      Label3: {
        F.line = 91;
          Label4: while (true) {
          if (!(res_536873140 <= colontmp__536873139)) break Label4;
            F.line = 1206;
            F.filename = "system.nim";
            i_671089137 = res_536873140;
            F.line = 1206;
            x_671089117[x_671089117_Idx][chckIndx(addInt(xl_671089122, i_671089137), 0, (x_671089117[x_671089117_Idx]).length - 1)] = nimCopy(null, y_671089118[chckIndx(i_671089137, 0, (y_671089118).length - 1)], NTI33554449);
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536873140 = addInt(res_536873140, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function failureOccurred_671089111(formatter_671089112, checkpoints_671089113, stackTrace_671089114) {
  var F = {procname: "unittest.failureOccurred", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 353;
    F.filename = "unittest.nim";
    add_671089115(formatter_671089112, "testErrors", checkpoints_671089113);
    if ((0 < (stackTrace_671089114).length)) {
    F.line = 355;
    formatter_671089112.testStackTrace = nimCopy(null, stackTrace_671089114, NTI33554449);
    }
    
  framePtr = F.prev;

  
}

function failureOccurred_671088980(formatter_671088981, checkpoints_671088982, stackTrace_671088983) {
    var Temporary1;

  var F = {procname: "unittest.failureOccurred", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    if ((0 < (stackTrace_671088983).length)) {
    F.line = 277;
    F.filename = "unittest.nim";
    rawEcho(stackTrace_671088983);
    }
    
    F.line = 278;
    if (formatter_671088981.isInSuite) {
    Temporary1 = [32,32,32,32];
    }
    else {
    Temporary1 = [];
    }
    
    var prefix_671088984 = nimCopy(null, Temporary1, NTI33554449);
    Label2: {
      F.line = 279;
      var msg_671089006 = [];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873143 = 0;
      F.line = 242;
      var L_536873144 = (checkpoints_671088982).length;
      Label3: {
        F.line = 243;
          Label4: while (true) {
          if (!(i_536873143 < L_536873144)) break Label4;
            F.line = 279;
            F.filename = "unittest.nim";
            msg_671089006 = checkpoints_671088982[chckIndx(i_536873143, 0, (checkpoints_671088982).length - 1)];
            F.line = 279;
            rawEcho(prefix_671088984, msg_671089006);
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873143 = addInt(i_536873143, 1);
            if (!(((checkpoints_671088982).length == L_536873144))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  
}

function failureOccurred_671088708(formatter_671088709, checkpoints_671088710, stackTrace_671088711) {
  var F = {procname: "unittest.failureOccurred", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
  framePtr = F.prev;

  
}

function failureOccurred_671088712(formatter_671088709, checkpoints_671088710, stackTrace_671088711) {
  var F = {procname: "unittest.failureOccurred", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(formatter_671088709);
    if (isObj(formatter_671088709.m_type, NTI671088653)) {
    F.line = 203;
    F.filename = "unittest.nim";
    failureOccurred_671089111(formatter_671088709, checkpoints_671088710, stackTrace_671088711);
    }
    else {
    if (isObj(formatter_671088709.m_type, NTI671088652)) {
    F.line = 203;
    failureOccurred_671088980(formatter_671088709, checkpoints_671088710, stackTrace_671088711);
    }
    else {
    if (isObj(formatter_671088709.m_type, NTI671088651)) {
    F.line = 203;
    failureOccurred_671088708(formatter_671088709, checkpoints_671088710, stackTrace_671088711);
    }
    }}
  framePtr = F.prev;

  
}

function nsuformatBiggestFloat(f_754976835, format_754976836, precision_754976837, decimalSep_754976838) {
  var result_754976839 = [];

  var F = {procname: "strutils.formatBiggestFloat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2452;
    F.filename = "strutils.nim";
    var precision_754976840 = precision_754976837;
    if ((precision_754976840 == (-1))) {
    F.line = 2455;
    precision_754976840 = 6;
    }
    
    F.line = 2456;
    var res_754976841 = null;
    F.line = 2457;
    switch (format_754976836) {
    case 0:
      F.line = 2459;
      res_754976841 = f_754976835.toString();
      break;
    case 1:
      F.line = 2461;
      res_754976841 = f_754976835.toFixed(precision_754976840);
      break;
    case 2:
      F.line = 2463;
      res_754976841 = f_754976835.toExponential(precision_754976840);
      break;
    }
    F.line = 2464;
    result_754976839 = nimCopy(null, cstrToNimstr(res_754976841), NTI33554449);
    if (((1.0 / f_754976835) == -Infinity)) {
    F.line = 2467;
    result_754976839 = nimCopy(null, ([45] || []).concat(cstrToNimstr(res_754976841) || []), NTI33554449);
    }
    
    Label1: {
      F.line = 2468;
      var i_754976846 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__536873150 = 0;
      F.line = 2468;
      F.filename = "strutils.nim";
      colontmp__536873150 = (result_754976839).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536873151 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536873151 < colontmp__536873150)) break Label3;
            F.line = 2468;
            F.filename = "strutils.nim";
            i_754976846 = i_536873151;
            if ((ConstSet30[result_754976839[chckIndx(i_754976846, 0, (result_754976839).length - 1)]] != undefined)) {
            F.line = 2471;
            result_754976839[chckIndx(i_754976846, 0, (result_754976839).length - 1)] = decimalSep_754976838;
            }
            
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536873151 = addInt(i_536873151, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_754976839;

}

function nsuformatFloat(f_754976868, format_754976869, precision_754976870, decimalSep_754976871) {
  var result_754976872 = [];

  var F = {procname: "strutils.formatFloat", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2525;
    F.filename = "strutils.nim";
    result_754976872 = nimCopy(null, nsuformatBiggestFloat(f_754976868, format_754976869, precision_754976870, decimalSep_754976871), NTI33554449);
  framePtr = F.prev;

  return result_754976872;

}

function nsuFormatOpenArray(formatstr_754977205, a_754977206) {
  var result_754977207 = [[]];

  var F = {procname: "strutils.%", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2867;
    F.filename = "strutils.nim";
    result_754977207[0] = nimCopy(null, mnewString(0), NTI33554449);
    F.line = 2868;
    nsuAddf(result_754977207, 0, formatstr_754977205, a_754977206);
  framePtr = F.prev;

  return result_754977207[0];

}

function testEnded_671089138(formatter_671089139, testResult_671089140) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

  var F = {procname: "unittest.testEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 358;
    F.filename = "unittest.nim";
    var time_671089141 = (epochTime_1040191729() - formatter_671089139.testStartTime);
    F.line = 359;
    var timeStr_671089142 = nsuformatFloat(time_671089141, 1, 8, 46);
    F.line = 360;
    writeLine_1023410442(formatter_671089139.stream, [nsuFormatOpenArray([9,9,60,116,101,115,116,99,97,115,101,32,110,97,109,101,61,34,36,35,34,32,116,105,109,101,61,34,36,35,34,62], [xmlEscape_671089047(testResult_671089140.testName), nimCopy(null, timeStr_671089142, NTI33554449)])]);
    F.line = 362;
    switch (testResult_671089140.status) {
    case 0:
      break;
    case 2:
      F.line = 366;
      writeLine_1023410442(formatter_671089139.stream, [[60,115,107,105,112,112,101,100,32,47,62]]);
      break;
    case 1:
      F.line = 368;
      if (((0 < (formatter_671089139.testStackTrace).length) && (0 < (formatter_671089139.testErrors).length))) {
      Temporary1 = xmlEscape_671089047((Temporary2 = HEX5BHEX5D_671089146(formatter_671089139.testErrors, 1), Temporary2)[0][Temporary2[1]]);
      }
      else {
      if ((0 < (formatter_671089139.testErrors).length)) {
      Temporary1 = xmlEscape_671089047(formatter_671089139.testErrors[chckIndx(0, 0, (formatter_671089139.testErrors).length - 1)]);
      }
      else {
      Temporary1 = [84,104,101,32,116,101,115,116,32,102,97,105,108,101,100,32,119,105,116,104,111,117,116,32,111,117,116,112,117,116,116,105,110,103,32,97,110,32,101,114,114,111,114];
      }
      }
      var failureMsg_671089173 = nimCopy(null, Temporary1, NTI33554449);
      F.line = 375;
      var errs_671089174 = [];
      if ((1 < (formatter_671089139.testErrors).length)) {
      F.line = 377;
      if ((0 < (formatter_671089139.testStackTrace).length)) {
      Temporary3 = 0;
      }
      else {
      Temporary3 = 1;
      }
      
      var startIdx_671089178 = Temporary3;
      F.line = 378;
      if ((0 < (formatter_671089139.testStackTrace).length)) {
      Temporary4 = subInt((formatter_671089139.testErrors).length, 2);
      }
      else {
      Temporary4 = subInt((formatter_671089139.testErrors).length, 1);
      }
      
      var endIdx_671089185 = Temporary4;
      Label5: {
        F.line = 382;
        var errIdx_671089190 = 0;
        F.line = 90;
        F.filename = "iterators_1.nim";
        var res_536873147 = startIdx_671089178;
        Label6: {
          F.line = 91;
            Label7: while (true) {
            if (!(res_536873147 <= endIdx_671089185)) break Label7;
              F.line = 382;
              F.filename = "unittest.nim";
              errIdx_671089190 = res_536873147;
              if ((0 < (errs_671089174).length)) {
              F.line = 384;
              errs_671089174.push.apply(errs_671089174, [10]);;
              }
              
              F.line = 382;
              errs_671089174.push.apply(errs_671089174, xmlEscape_671089047(formatter_671089139.testErrors[chckIndx(errIdx_671089190, 0, (formatter_671089139.testErrors).length - 1)]));;
              F.line = 93;
              F.filename = "iterators_1.nim";
              res_536873147 = addInt(res_536873147, 1);
            }
        };
      };
      }
      
      if ((0 < (formatter_671089139.testStackTrace).length)) {
      F.line = 388;
      F.filename = "unittest.nim";
      writeLine_1023410442(formatter_671089139.stream, [nsuFormatOpenArray([9,9,9,60,101,114,114,111,114,32,109,101,115,115,97,103,101,61,34,36,35,34,62,36,35,60,47,101,114,114,111,114,62], [nimCopy(null, failureMsg_671089173, NTI33554449), xmlEscape_671089047(formatter_671089139.testStackTrace)])]);
      if ((0 < (errs_671089174).length)) {
      F.line = 391;
      writeLine_1023410442(formatter_671089139.stream, [nsuFormatSingleElem([9,9,9,60,115,121,115,116,101,109,45,101,114,114,62,36,35,60,47,115,121,115,116,101,109,45,101,114,114,62], errs_671089174)]);
      }
      
      }
      else {
        F.line = 393;
      writeLine_1023410442(formatter_671089139.stream, [nsuFormatOpenArray([9,9,9,60,102,97,105,108,117,114,101,32,109,101,115,115,97,103,101,61,34,36,35,34,62,36,35,60,47,102,97,105,108,117,114,101,62], [nimCopy(null, failureMsg_671089173, NTI33554449), nimCopy(null, errs_671089174, NTI33554449)])]);
      }
      
      break;
    }
    F.line = 396;
    writeLine_1023410442(formatter_671089139.stream, [[9,9,60,47,116,101,115,116,99,97,115,101,62]]);
  framePtr = F.prev;

  
}

function testEnded_671089007(formatter_671089008, testResult_671089009) {
    var Temporary1;

  var F = {procname: "unittest.testEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 283;
    F.filename = "unittest.nim";
    formatter_671089008.isInTest = false;
    if ((!((formatter_671089008.outputLevel == 2)) && ((formatter_671089008.outputLevel == 0) || (testResult_671089009.status == 1)))) {
    F.line = 287;
    if ((0 < (testResult_671089009.suiteName).length)) {
    Temporary1 = [32,32];
    }
    else {
    Temporary1 = [];
    }
    
    var prefix_671089024 = nimCopy(null, Temporary1, NTI33554449);
    F.line = 301;
    rawEcho(prefix_671089024, [91], reprEnum(testResult_671089009.status, NTI671088643), [93,32], testResult_671089009.testName);
    }
    
  framePtr = F.prev;

  
}

function testEnded_671088713(formatter_671088714, testResult_671088715) {
  var F = {procname: "unittest.testEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
  framePtr = F.prev;

  
}

function testEnded_671088716(formatter_671088714, testResult_671088715) {
  var F = {procname: "unittest.testEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(formatter_671088714);
    if (isObj(formatter_671088714.m_type, NTI671088653)) {
    F.line = 208;
    F.filename = "unittest.nim";
    testEnded_671089138(formatter_671088714, testResult_671088715);
    }
    else {
    if (isObj(formatter_671088714.m_type, NTI671088652)) {
    F.line = 208;
    testEnded_671089007(formatter_671088714, testResult_671088715);
    }
    else {
    if (isObj(formatter_671088714.m_type, NTI671088651)) {
    F.line = 208;
    testEnded_671088713(formatter_671088714, testResult_671088715);
    }
    }}
  framePtr = F.prev;

  
}

function suiteEnded_671089191(formatter_671089192) {
  var F = {procname: "unittest.suiteEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 399;
    F.filename = "unittest.nim";
    writeLine_1023410442(formatter_671089192.stream, [[9,60,47,116,101,115,116,115,117,105,116,101,62]]);
  framePtr = F.prev;

  
}

function suiteEnded_671089045(formatter_671089046) {
  var F = {procname: "unittest.suiteEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 304;
    F.filename = "unittest.nim";
    formatter_671089046.isInSuite = false;
  framePtr = F.prev;

  
}

function suiteEnded_671088717(formatter_671088718) {
  var F = {procname: "unittest.suiteEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
  framePtr = F.prev;

  
}

function suiteEnded_671088719(formatter_671088718) {
  var F = {procname: "unittest.suiteEnded", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/unittest.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(formatter_671088718);
    if (isObj(formatter_671088718.m_type, NTI671088653)) {
    F.line = 210;
    F.filename = "unittest.nim";
    suiteEnded_671089191(formatter_671088718);
    }
    else {
    if (isObj(formatter_671088718.m_type, NTI671088652)) {
    F.line = 210;
    suiteEnded_671089045(formatter_671088718);
    }
    else {
    if (isObj(formatter_671088718.m_type, NTI671088651)) {
    F.line = 210;
    suiteEnded_671088717(formatter_671088718);
    }
    }}
  framePtr = F.prev;

  
}

function clear_1375732236(t_1375732239) {
  var F = {procname: "clear.clear", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 151;
      F.filename = "tableimpl.nim";
      var i_1375732303 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__536873154 = 0;
      F.line = 151;
      F.filename = "tableimpl.nim";
      colontmp__536873154 = (t_1375732239.data).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536873155 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536873155 < colontmp__536873154)) break Label3;
            F.line = 151;
            F.filename = "tableimpl.nim";
            i_1375732303 = i_536873155;
            F.line = 153;
            t_1375732239.data[chckIndx(i_1375732303, 0, (t_1375732239.data).length - 1)].Field0 = 0;
            F.line = 154;
            t_1375732239.data[chckIndx(i_1375732303, 0, (t_1375732239.data).length - 1)].Field1 = 0;
            F.line = 155;
            t_1375732239.data[chckIndx(i_1375732303, 0, (t_1375732239.data).length - 1)].Field2 = nimCopy(t_1375732239.data[chckIndx(i_1375732303, 0, (t_1375732239.data).length - 1)].Field2, {Field0: null, Field1: 0}, NTI1375731757);
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536873155 = addInt(i_536873155, 1);
          }
      };
    };
    F.line = 156;
    F.filename = "tableimpl.nim";
    t_1375732239.counter = 0;
  framePtr = F.prev;

  
}

function cleanUp_1375732183(self_1375732184) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 208;
    F.filename = "parse.nim";
    clear_1375732236(self_1375732184.visited);
  framePtr = F.prev;

  
}

function cleanUp_1375741223(self_1375741224) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1728;
    F.filename = "parse.nim";
    cleanUp_1375732183(self_1375741224);
  framePtr = F.prev;

  
}

function clear_1375740712(t_1375740715) {
  var F = {procname: "clear.clear", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 151;
      F.filename = "tableimpl.nim";
      var i_1375740778 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__536873158 = 0;
      F.line = 151;
      F.filename = "tableimpl.nim";
      colontmp__536873158 = (t_1375740715.data).length;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536873159 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536873159 < colontmp__536873158)) break Label3;
            F.line = 151;
            F.filename = "tableimpl.nim";
            i_1375740778 = i_536873159;
            F.line = 153;
            t_1375740715.data[chckIndx(i_1375740778, 0, (t_1375740715.data).length - 1)].Field0 = 0;
            F.line = 154;
            t_1375740715.data[chckIndx(i_1375740778, 0, (t_1375740715.data).length - 1)].Field1 = 0;
            F.line = 155;
            t_1375740715.data[chckIndx(i_1375740778, 0, (t_1375740715.data).length - 1)].Field2 = 0;
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536873159 = addInt(i_536873159, 1);
          }
      };
    };
    F.line = 156;
    F.filename = "tableimpl.nim";
    t_1375740715.counter = 0;
  framePtr = F.prev;

  
}

function cleanUp_1375740659(self_1375740660) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1673;
    F.filename = "parse.nim";
    clear_1375740712(self_1375740660.recursionCounter);
    F.line = 1674;
    cleanUp_1375732183(self_1375740660);
  framePtr = F.prev;

  
}

function cleanUp_1375732673(self_1375732184) {
  var F = {procname: "parse.cleanUp", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_1375732184);
    if (isObj(self_1375732184.m_type, NTI1375737788)) {
    F.line = 207;
    F.filename = "parse.nim";
    cleanUp_1375741223(self_1375732184);
    }
    else {
    if (isObj(self_1375732184.m_type, NTI1375736430)) {
    F.line = 207;
    cleanUp_1375740659(self_1375732184);
    }
    else {
    if (isObj(self_1375732184.m_type, NTI1375731768)) {
    F.line = 207;
    cleanUp_1375732183(self_1375732184);
    }
    }}
  framePtr = F.prev;

  
}

function HEX24_1375736839(self_1375736840) {
  var result_1375736841 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1028;
    F.filename = "parse.nim";
    result_1375736841 = nimCopy(null, nsuJoinSep([[34], nsuReplaceStr(self_1375736840.text, [34], [92,34]), [34]], []), NTI33554449);
  framePtr = F.prev;

  return result_1375736841;

}

function HEX24_1375737298(self_1375737299) {
  var result_1375737300 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1143;
    F.filename = "parse.nim";
    result_1375737300 = nimCopy(null, nsuJoinSep([[47], nsuReplaceStr(self_1375737299.reInfo.Field0, [47], [92,47]), [47]], []), NTI33554449);
  framePtr = F.prev;

  return result_1375737300;

}

function HEX24_1375737187(self_1375737188) {
  var result_1375737189 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1096;
    F.filename = "parse.nim";
    result_1375737189 = nimCopy(null, nsuJoinSep([[105,99,34], nsuReplaceStr(self_1375737188.text, [34], [92,34]), [34]], []), NTI33554449);
  framePtr = F.prev;

  return result_1375737189;

}

function HEX3DHEX3D_1375737675(x_1375737677, y_1375737678) {
  var result_1375737679 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((x_1375737677["Field0"] == y_1375737678["Field0"]))) {
    F.line = 1708;
    F.filename = "system.nim";
    result_1375737679 = false;
    break BeforeRet;
    }
    
    if (!((x_1375737677["Field1"] == y_1375737678["Field1"]))) {
    F.line = 1708;
    result_1375737679 = false;
    break BeforeRet;
    }
    
    F.line = 1709;
    result_1375737679 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737679;

}

function HEX24_1375737608(self_1375737609) {
    var Temporary1;
      var Temporary2;
    var Temporary3;
    var Temporary4;
    var Temporary5;
    var Temporary6;

  var result_1375737610 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1326;
    F.filename = "parse.nim";
    F.line = 1327;
    var postfix_1375737615 = (grammar_1375733213(self_1375737609).flags[0] != undefined);
    F.line = 1328;
    var subP_1375737616 = self_1375737609.subParsers[chckIndx(0, 0, (self_1375737609.subParsers).length - 1)];
    F.line = 1330;
    var subStr_1375737617 = [];
    if (((postfix_1375737615 && eqStrings(name_1375732769(subP_1375737616), [])) && contains_922746929(NaryParsers_1375731962, type_1375732762(subP_1375737616)))) {
    F.line = 1334;
    if (!(eqStrings(self_1375737609.subParsers[chckIndx(0, 0, (self_1375737609.subParsers).length - 1)].pname, []))) {
    Temporary1 = self_1375737609.subParsers[chckIndx(0, 0, (self_1375737609.subParsers).length - 1)].pname;
    }
    else {
    Temporary1 = HEX24_1375733037(self_1375737609.subParsers[chckIndx(0, 0, (self_1375737609.subParsers).length - 1)]);
    }
    
    subStr_1375737617 = nimCopy(null, nsuJoinSep([[40], nimCopy(null, Temporary1, NTI33554449), [41]], []), NTI33554449);
    }
    else {
      F.line = 1336;
      if (!(eqStrings(self_1375737609.subParsers[chckIndx(0, 0, (self_1375737609.subParsers).length - 1)].pname, []))) {
      Temporary2 = self_1375737609.subParsers[chckIndx(0, 0, (self_1375737609.subParsers).length - 1)].pname;
      }
      else {
      Temporary2 = HEX24_1375733037(self_1375737609.subParsers[chckIndx(0, 0, (self_1375737609.subParsers).length - 1)]);
      }
      
      subStr_1375737617 = nimCopy(null, Temporary2, NTI33554449);
    }
    
    if (HEX3DHEX3D_1375737675(self_1375737609.repRange, {Field0: 0, Field1: 1})) {
    if (postfix_1375737615) {
    Temporary4 = (subStr_1375737617 || []).concat([63] || []);
    }
    else {
    Temporary4 = nsuJoinSep([[91], nimCopy(null, subStr_1375737617, NTI33554449), [93]], []);
    }
    
    Temporary3 = Temporary4;
    }
    else {
    if (((self_1375737609.repRange["Field0"] == 0) && (1073741824 <= self_1375737609.repRange["Field1"]))) {
    if (postfix_1375737615) {
    Temporary5 = (subStr_1375737617 || []).concat([42] || []);
    }
    else {
    Temporary5 = nsuJoinSep([[123], nimCopy(null, subStr_1375737617, NTI33554449), [125]], []);
    }
    
    Temporary3 = Temporary5;
    }
    else {
    if (((self_1375737609.repRange["Field0"] == 1) && (1073741824 <= self_1375737609.repRange["Field1"]))) {
    if (postfix_1375737615) {
    Temporary6 = (subStr_1375737617 || []).concat([43] || []);
    }
    else {
    Temporary6 = nsuJoinSep([[123], nimCopy(null, subStr_1375737617, NTI33554449), [125,43]], []);
    }
    
    Temporary3 = Temporary6;
    }
    else {
      F.line = 1347;
      var tmpTuple_1375737685 = nimCopy(null, self_1375737609.repRange, NTI1375735634);
      F.line = 1347;
      var min_1375737686 = tmpTuple_1375737685["Field0"];
      F.line = 1347;
      var max_1375737687 = tmpTuple_1375737685["Field1"];
    Temporary3 = nsuJoinSep([nimCopy(null, subStr_1375737617, NTI33554449), [40], HEX24_369098766(BigInt(min_1375737686)), [44,32], HEX24_369098766(BigInt(max_1375737687)), [41]], []);
    }
    }}
    result_1375737610 = nimCopy(null, Temporary3, NTI33554449);
  framePtr = F.prev;

  return result_1375737610;

}

function HEX24_1375737456(self_1375737457) {
  var result_1375737458 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1213;
    F.filename = "parse.nim";
    result_1375737458 = nimCopy(null, [126], NTI33554449);
  framePtr = F.prev;

  return result_1375737458;

}

function HEX24_1375738169(self_1375738170) {
              var Temporary5;
              var Temporary6;

  var result_1375738171 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1492;
    F.filename = "parse.nim";
    F.line = 1492;
    F.line = 1492;
    var collectResult_1375738172 = [];
    Label1: {
      F.line = 1493;
      var i_1375738248 = (-1);
      Label2: {
        F.line = 1493;
        var subP_1375738252 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536873163 = 0;
        F.line = 242;
        var L_536873164 = (self_1375738170.subParsers).length;
        Label3: {
          F.line = 243;
            Label4: while (true) {
            if (!(i_536873163 < L_536873164)) break Label4;
              F.line = 1494;
              F.filename = "parse.nim";
              subP_1375738252 = self_1375738170.subParsers[chckIndx(i_536873163, 0, (self_1375738170.subParsers).length - 1)];
              F.line = 1494;
              i_1375738248 = addInt(i_1375738248, 1);
              F.line = 1495;
              if (!(eqStrings(subP_1375738252.pname, []))) {
              Temporary5 = subP_1375738252.pname;
              }
              else {
              Temporary5 = HEX24_1375733037(subP_1375738252);
              }
              
              var subStr_1375738258 = nimCopy(null, Temporary5, NTI33554449);
              F.line = 1496;
              if ((i_1375738248 == chckRange(self_1375738170.mandatory, (-2147483648), 2147483647))) {
              Temporary6 = [194,167];
              }
              else {
              Temporary6 = [];
              }
              
              var marker_1375738259 = nimCopy(null, Temporary6, NTI33554449);
              if ((contains_922746929([[58,65,108,116,101,114,110,97,116,105,118,101], [58,83,101,114,105,101,115]], type_1375732762(subP_1375738252)) && eqStrings(name_1375732769(subP_1375738252), []))) {
              F.line = 341;
              F.filename = "sugar.nim";
              collectResult_1375738172.push(nsuJoinSep([nimCopy(null, marker_1375738259, NTI33554449), [40], nimCopy(null, subStr_1375738258, NTI33554449), [41]], []));;
              }
              else {
                if (!(eqStrings(marker_1375738259, []))) {
                F.line = 341;
                collectResult_1375738172.push((marker_1375738259 || []).concat(subStr_1375738258 || []));;
                }
                else {
                  F.line = 341;
                  var Temporary7 = nimCopy(null, subStr_1375738258, NTI33554449);
                collectResult_1375738172.push(Temporary7);;
                }
                
              }
              
              F.line = 245;
              F.filename = "iterators.nim";
              i_536873163 = addInt(i_536873163, 1);
              if (!(((self_1375738170.subParsers).length == L_536873164))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
    var subStrs_1375738329 = nimCopy(null, collectResult_1375738172, NTI1375732464);
    result_1375738171 = nimCopy(null, nsuJoinSep(subStrs_1375738329, [32]), NTI33554449);
  framePtr = F.prev;

  return result_1375738171;

}

function HEX24_1375737752(self_1375737753) {
            var Temporary4;

  var result_1375737754 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1383;
    F.filename = "parse.nim";
    F.line = 1383;
    F.line = 1383;
    var collectResult_1375737755 = [];
    Label1: {
      F.line = 1384;
      var subP_1375737769 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873167 = 0;
      F.line = 242;
      var L_536873168 = (self_1375737753.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873167 < L_536873168)) break Label3;
            F.line = 1384;
            F.filename = "parse.nim";
            subP_1375737769 = self_1375737753.subParsers[chckIndx(i_536873167, 0, (self_1375737753.subParsers).length - 1)];
            F.line = 1384;
            if (!(eqStrings(subP_1375737769.pname, []))) {
            Temporary4 = subP_1375737769.pname;
            }
            else {
            Temporary4 = HEX24_1375733037(subP_1375737769);
            }
            
            var Temporary5 = nimCopy(null, Temporary4, NTI33554449);
            collectResult_1375737755.push(Temporary5);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873167 = addInt(i_536873167, 1);
            if (!(((self_1375737753.subParsers).length == L_536873168))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    var subStrs_1375737774 = nimCopy(null, collectResult_1375737755, NTI1375732464);
    result_1375737754 = nimCopy(null, nsuJoinSep(subStrs_1375737774, [124]), NTI33554449);
  framePtr = F.prev;

  return result_1375737754;

}

function HEX24_1375741205(self_1375741206) {
    var Temporary1;

  var result_1375741207 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1706;
    F.filename = "parse.nim";
    if (!(eqStrings(self_1375741206.subParsers[chckIndx(0, 0, (self_1375741206.subParsers).length - 1)].pname, []))) {
    Temporary1 = self_1375741206.subParsers[chckIndx(0, 0, (self_1375741206.subParsers).length - 1)].pname;
    }
    else {
    Temporary1 = HEX24_1375733037(self_1375741206.subParsers[chckIndx(0, 0, (self_1375741206.subParsers).length - 1)]);
    }
    
    result_1375741207 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_1375741207;

}

function HEX24_1375738518(self_1375738519) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
      var Temporary4;

  var result_1375738520 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 1582;
    F.filename = "parse.nim";
    F.line = 1583;
    if (self_1375738519.positive) {
    Temporary1 = [38];
    }
    else {
    Temporary1 = [60,45,38];
    }
    
    var prefix_1375738521 = nimCopy(null, Temporary1, NTI33554449);
    F.line = 1584;
    var subP_1375738522 = self_1375738519.subParsers[chckIndx(0, 0, (self_1375738519.subParsers).length - 1)];
    if ((contains_922746929(NaryParsers_1375731962, type_1375732762(subP_1375738522)) && eqStrings(name_1375732769(subP_1375738522), []))) {
    if (!(eqStrings(subP_1375738522.pname, []))) {
    Temporary3 = subP_1375738522.pname;
    }
    else {
    Temporary3 = HEX24_1375733037(subP_1375738522);
    }
    
    Temporary2 = nsuJoinSep([nimCopy(null, prefix_1375738521, NTI33554449), [40], nimCopy(null, Temporary3, NTI33554449), [41]], []);
    }
    else {
      if (!(eqStrings(subP_1375738522.pname, []))) {
      Temporary4 = subP_1375738522.pname;
      }
      else {
      Temporary4 = HEX24_1375733037(subP_1375738522);
      }
      
    Temporary2 = (prefix_1375738521 || []).concat(Temporary4 || []);
    }
    
    result_1375738520 = nimCopy(null, Temporary2, NTI33554449);
  framePtr = F.prev;

  return result_1375738520;

}

function HEX24_1375732999(self_1375733000) {
  var result_1375733001 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 295;
    F.filename = "parse.nim";
    F.line = 295;
    var args_1375733009 = [];
    Label1: {
      F.line = 296;
      var p_1375733013 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873171 = 0;
      F.line = 242;
      var L_536873172 = (self_1375733000.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873171 < L_536873172)) break Label3;
            F.line = 296;
            F.filename = "parse.nim";
            p_1375733013 = self_1375733000.subParsers[chckIndx(i_536873171, 0, (self_1375733000.subParsers).length - 1)];
            if (!((p_1375733013 == null))) {
            F.line = 297;
            args_1375733009.push(HEX24_1375733037(p_1375733013));;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873171 = addInt(i_536873171, 1);
            if (!(((self_1375733000.subParsers).length == L_536873172))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    result_1375733001 = nimCopy(null, nsuJoinSep([nimCopy(null, self_1375733000.pname, NTI33554449), [58], type_1375732762(self_1375733000), [40], nsuJoinSep(args_1375733009, [44,32]), [41]], []), NTI33554449);
  framePtr = F.prev;

  return result_1375733001;

}

function HEX24_1375733037(self_1375733000) {
  var result_1375733038 = [];

  var F = {procname: "parse.$", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_1375733000);
    if (isObj(self_1375733000.m_type, NTI1375734862)) {
    F.line = 294;
    F.filename = "parse.nim";
    result_1375733038 = HEX24_1375736839(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375735469)) {
    F.line = 294;
    result_1375733038 = HEX24_1375737298(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375734901)) {
    F.line = 294;
    result_1375733038 = HEX24_1375737187(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375735636)) {
    F.line = 294;
    result_1375733038 = HEX24_1375737608(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375735540)) {
    F.line = 294;
    result_1375733038 = HEX24_1375737456(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375735979)) {
    F.line = 294;
    result_1375733038 = HEX24_1375738169(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375735787)) {
    F.line = 294;
    result_1375733038 = HEX24_1375737752(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375736430)) {
    F.line = 294;
    result_1375733038 = HEX24_1375741205(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375736327)) {
    F.line = 294;
    result_1375733038 = HEX24_1375738518(self_1375733000);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733000.m_type, NTI1375731768)) {
    F.line = 294;
    result_1375733038 = HEX24_1375732999(self_1375733000);
    break BeforeRet;
    }
    }}}}}}}}}
  };
  framePtr = F.prev;

  return result_1375733038;

}

function refdParsers_1375735948(self_1375735949) {
              var Temporary4;
              var Temporary8;
              var Temporary12;

  var result_1375735950 = [];

  var F = {procname: "parse.refdParsers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((self_1375735949.referredParsers).length == 0)) {
    F.line = 766;
    F.filename = "parse.nim";
    self_1375735949.referredParsers = nimCopy(null, self_1375735949.subParsers, NTI1375731785);
    Label1: {
      F.line = 767;
      var matcher_1375735957 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873175 = 0;
      F.line = 242;
      var L_536873176 = (self_1375735949.skipList).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873175 < L_536873176)) break Label3;
            F.line = 767;
            F.filename = "parse.nim";
            matcher_1375735957 = self_1375735949.skipList[chckIndx(i_536873175, 0, (self_1375735949.skipList).length - 1)];
            F.line = 767;
            switch (matcher_1375735957.kind) {
            case 3:
              F.line = 770;
              var Temporary4 = matcher_1375735957;
              if (ConstSet31[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1375731760)); }
              self_1375735949.referredParsers.push(Temporary4.consumeParser);;
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873175 = addInt(i_536873175, 1);
            if (!(((self_1375735949.skipList).length == L_536873176))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label5: {
      F.line = 772;
      F.filename = "parse.nim";
      var matcher_1375735965 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873179 = 0;
      F.line = 242;
      var L_536873180 = (self_1375735949.resumeList).length;
      Label6: {
        F.line = 243;
          Label7: while (true) {
          if (!(i_536873179 < L_536873180)) break Label7;
            F.line = 772;
            F.filename = "parse.nim";
            matcher_1375735965 = self_1375735949.resumeList[chckIndx(i_536873179, 0, (self_1375735949.resumeList).length - 1)];
            F.line = 772;
            switch (matcher_1375735965.kind) {
            case 3:
              F.line = 775;
              var Temporary8 = matcher_1375735965;
              if (ConstSet32[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1375731760)); }
              self_1375735949.referredParsers.push(Temporary8.consumeParser);;
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873179 = addInt(i_536873179, 1);
            if (!(((self_1375735949.resumeList).length == L_536873180))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label9: {
      F.line = 777;
      F.filename = "parse.nim";
      var errMatcher_1375735992 = {Field0: ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null}), Field1: []};
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873183 = 0;
      F.line = 242;
      var L_536873184 = (self_1375735949.errorList).length;
      Label10: {
        F.line = 243;
          Label11: while (true) {
          if (!(i_536873183 < L_536873184)) break Label11;
            F.line = 777;
            F.filename = "parse.nim";
            errMatcher_1375735992 = self_1375735949.errorList[chckIndx(i_536873183, 0, (self_1375735949.errorList).length - 1)];
            F.line = 777;
            switch (errMatcher_1375735992.Field0.kind) {
            case 3:
              F.line = 780;
              var Temporary12 = errMatcher_1375735992.Field0;
              if (ConstSet33[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI1375731760)); }
              self_1375735949.referredParsers.push(Temporary12.consumeParser);;
              break;
            default: 
              break;
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873183 = addInt(i_536873183, 1);
            if (!(((self_1375735949.errorList).length == L_536873184))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    else {
      if (!(((self_1375735949.subParsers).length <= (self_1375735949.referredParsers).length))) {
      F.line = 783;
      F.filename = "parse.nim";
      failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(783, 5) `self.referredParsers.len >= self.subParsers.len` "));
      }
      
    }
    
    F.line = 784;
    result_1375735950 = self_1375735949["referredParsers"];
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375735950;

}

function refdParsers_1375733041(self_1375733042) {
  var result_1375733043 = [];

  var F = {procname: "parse.refdParsers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 311;
    F.filename = "parse.nim";
    result_1375733043 = self_1375733042["subParsers"];
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375733043;

}

function refdParsers_1375733060(self_1375733042) {
  var result_1375733061 = [];

  var F = {procname: "parse.refdParsers", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_1375733042);
    if (isObj(self_1375733042.m_type, NTI1375731769)) {
    F.line = 306;
    F.filename = "parse.nim";
    result_1375733061 = refdParsers_1375735948(self_1375733042);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733042.m_type, NTI1375731768)) {
    F.line = 306;
    result_1375733061 = refdParsers_1375733041(self_1375733042);
    break BeforeRet;
    }
    }
  };
  framePtr = F.prev;

  return result_1375733061;

}

function grammarHEX3D_1375733225(self_1375733226, grammar_1375733227) {
  var F = {procname: "parse.grammar=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 409;
    F.filename = "parse.nim";
    var uniqueID_1375733228 = 0;
    Label1: {
      F.line = 410;
      var p_1375733232 = null;
      F.line = 239;
      F.filename = "iterators.nim";
      var colontmp__536873187 = [];
      F.line = 376;
      F.filename = "parse.nim";
      colontmp__536873187 = descendants_1375733169(self_1375733226, refdSubs_1375733088);
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873188 = 0;
      F.line = 242;
      var L_536873189 = (colontmp__536873187).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873188 < L_536873189)) break Label3;
            F.line = 376;
            F.filename = "parse.nim";
            p_1375733232 = colontmp__536873187[chckIndx(i_536873188, 0, (colontmp__536873187).length - 1)];
            if (!((p_1375733232.grammarVar == GrammarPlaceholder_1375732179))) {
            F.line = 411;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(411, 5) `p.grammarVar == GrammarPlaceholder` "));
            }
            
            F.line = 412;
            p_1375733232.grammarVar = grammar_1375733227;
            F.line = 376;
            uniqueID_1375733228 = ((uniqueID_1375733228 + 1) >>> 0);
            F.line = 414;
            p_1375733232.uniqueID = uniqueID_1375733228;
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873188 = addInt(i_536873188, 1);
            if (!(((colontmp__536873187).length == L_536873189))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 378;
    F.filename = "parse.nim";
    resetTraversalTracker_1375733194(self_1375733226);
  framePtr = F.prev;

  
}

function grammarHEX3D_1375737423(self_1375737424, grammar_1375737425) {
  var F = {procname: "parse.grammar=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    if (!((((HEX3DHEX3D_1375733287(grammar_1375737425.commentRe, NeverMatchRegex_1375731761) || HEX3DHEX3D_1375733287(grammar_1375737425.commentRe, self_1375737424.comment.Field1)) || HEX3DHEX3D_1375733287(self_1375737424.comment.Field1, NeverMatchRegex_1375731761)) || ((self_1375737424.comment.Field0).length == 0)))) {
    F.line = 1204;
    F.filename = "parse.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1204, 3) `grammar.commentRe == NeverMatchRegex or grammar.commentRe == self.comment.regex or\x0A    self.comment.regex == NeverMatchRegex or\x0A    self.comment.reStr.len == 0` Multiple definitions of comments or insignificant whitespace not allowed!"));
    }
    
    F.line = 1207;
    grammarHEX3D_1375733225(self_1375737424, grammar_1375737425);
    if (((0 < (self_1375737424.comment.Field0).length) && !(HEX3DHEX3D_1375733287(self_1375737424.comment.Field1, NeverMatchRegex_1375731761)))) {
    if (!(HEX3DHEX3D_1375733287(grammar_1375737425.commentRe, NeverMatchRegex_1375731761))) {
    F.line = 1209;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim(1209, 5) `grammar.commentRe == NeverMatchRegex` implicit whitespace must only be defined once per grammar!"));
    }
    
    F.line = 1211;
    grammar_1375737425.commentRe = nimCopy(grammar_1375737425.commentRe, self_1375737424.comment.Field1, NTI1191182586);
    }
    
  framePtr = F.prev;

  
}

function grammarHEX3D_1375733262(self_1375733226, grammar_1375733227) {
  var F = {procname: "parse.grammar=", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_1375733226);
    if (isObj(self_1375733226.m_type, NTI1375735540)) {
    F.line = 408;
    F.filename = "parse.nim";
    grammarHEX3D_1375737423(self_1375733226, grammar_1375733227);
    }
    else {
    if (isObj(self_1375733226.m_type, NTI1375731768)) {
    F.line = 408;
    grammarHEX3D_1375733225(self_1375733226, grammar_1375733227);
    }
    }
  framePtr = F.prev;

  
}

function nsuContinuesWith(s_754976212, substr_754976213, start_754976214) {
  var result_754976215 = false;

  var F = {procname: "strutils.continuesWith", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1668;
    F.filename = "strutils.nim";
    var i_754976216 = 0;
    Label1: {
      F.line = 1669;
        Label2: while (true) {
        if (!true) break Label2;
          if (((substr_754976213).length <= i_754976216)) {
          F.line = 1670;
          result_754976215 = true;
          break BeforeRet;
          }
          
          if ((((s_754976212).length <= addInt(i_754976216, start_754976214)) || !((s_754976212[chckIndx(addInt(i_754976216, start_754976214), 0, (s_754976212).length - 1)] == substr_754976213[chckIndx(i_754976216, 0, (substr_754976213).length - 1)])))) {
          F.line = 1671;
          result_754976215 = false;
          break BeforeRet;
          }
          
          F.line = 1672;
          i_754976216 = addInt(i_754976216, 1);
        }
    };
  };
  framePtr = F.prev;

  return result_754976215;

}

function parse_1375736821(self_1375736822, location_1375736823) {
      var Temporary1;

  var result_1375736824 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (nsuContinuesWith((Temporary1 = str_1191182469(grammar_1375733213(self_1375736822).document), Temporary1)[0][Temporary1[1]], self_1375736822.text, chckRange(location_1375736823, 0, 2147483647))) {
    if ((self_1375736822.flags[9] != undefined)) {
    F.line = 1021;
    F.filename = "parse.nim";
    var colontmp__536873191 = EmptyNode_1375731991;
    F.line = 1021;
    var colontmp__536873192 = addInt(location_1375736823, (((self_1375736822.text).length) | 0));
    F.line = 1021;
    result_1375736824 = nimCopy(result_1375736824, {Field0: colontmp__536873191, Field1: colontmp__536873192}, NTI1375731757);
    break BeforeRet;
    }
    
    F.line = 1024;
    var colontmp__536873193 = init_1275069170(new_1275069123(), self_1375736822.nodeName[0], self_1375736822.nodeName[1], self_1375736822.slice, null);
    F.line = 1024;
    var colontmp__536873194 = addInt(location_1375736823, (((self_1375736822.text).length) | 0));
    F.line = 1024;
    result_1375736824 = nimCopy(result_1375736824, {Field0: colontmp__536873193, Field1: colontmp__536873194}, NTI1375731757);
    break BeforeRet;
    }
    
    F.line = 1025;
    var colontmp__536873195 = null;
    F.line = 1025;
    var colontmp__536873196 = location_1375736823;
    F.line = 1025;
    result_1375736824 = nimCopy(result_1375736824, {Field0: colontmp__536873195, Field1: colontmp__536873196}, NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375736824;

}

function matchLen_1191182712(slice_1191182713, pattern_1191182714, location_1191182715) {
    var Temporary1;

  var result_1191182716 = 0;

  var F = {procname: "strslice.matchLen", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!(((0 <= location_1191182715) && (location_1191182715 <= addInt(subInt(slice_1191182713.Field2, slice_1191182713.Field1), 1))))) {
    F.line = 250;
    F.filename = "strslice.nim";
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(250, 5) `location >= 0 and location <= slice.stop - slice.start + 1` "));
    }
    
    F.line = 251;
    pattern_1191182714.Field0.lastIndex = addInt(location_1191182715, slice_1191182713.Field1);
    F.line = 252;
    var m_1191182722 = (toJSStr((Temporary1 = str_1191182469(slice_1191182713), Temporary1)[0][Temporary1[1]]).match(pattern_1191182714.Field0) || []);
    if ((0 < (m_1191182722).length)) {
    if (!(((m_1191182722).length == 1))) {
    F.line = 254;
    failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim(254, 7) `m.len == 1` "));
    }
    
    F.line = 255;
    result_1191182716 = (((cstrToNimstr(m_1191182722[chckIndx(0, 0, (m_1191182722).length - 1)])).length) | 0);
    break BeforeRet;
    }
    
    F.line = 256;
    result_1191182716 = (-1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1191182716;

}

function parse_1375737263(self_1375737264, location_1375737265) {
  var result_1375737266 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1132;
    F.filename = "parse.nim";
    var l_1375737267 = matchLen_1191182712(grammar_1375733213(self_1375737264).document, self_1375737264.reInfo.Field1, location_1375737265);
    if ((0 <= l_1375737267)) {
    if ((self_1375737264.flags[9] != undefined)) {
    F.line = 1135;
    var colontmp__536873198 = EmptyNode_1375731991;
    F.line = 1135;
    var colontmp__536873199 = addInt(location_1375737265, l_1375737267);
    F.line = 1135;
    result_1375737266 = nimCopy(result_1375737266, {Field0: colontmp__536873198, Field1: colontmp__536873199}, NTI1375731757);
    break BeforeRet;
    }
    else {
    if (((self_1375737264.flags[7] != undefined) && (l_1375737267 == 0))) {
    F.line = 1137;
    var colontmp__536873200 = EmptyNode_1375731991;
    F.line = 1137;
    var colontmp__536873201 = location_1375737265;
    F.line = 1137;
    result_1375737266 = nimCopy(result_1375737266, {Field0: colontmp__536873200, Field1: colontmp__536873201}, NTI1375731757);
    break BeforeRet;
    }
    }
    F.line = 1138;
    var text_1375737287 = nimCopy(null, cut_1191182497(grammar_1375733213(self_1375737264).document, HEX2EHEX2E_1191182403(location_1375737265, subInt(addInt(location_1375737265, l_1375737267), 1))), NTI1191182339);
    F.line = 1139;
    var colontmp__536873202 = init_1275069170(new_1275069123(), self_1375737264.nodeName[0], self_1375737264.nodeName[1], text_1375737287, null);
    F.line = 1139;
    var colontmp__536873203 = addInt(location_1375737265, l_1375737267);
    F.line = 1139;
    result_1375737266 = nimCopy(result_1375737266, {Field0: colontmp__536873202, Field1: colontmp__536873203}, NTI1375731757);
    break BeforeRet;
    }
    
    F.line = 1140;
    var colontmp__536873204 = null;
    F.line = 1140;
    var colontmp__536873205 = location_1375737265;
    F.line = 1140;
    result_1375737266 = nimCopy(result_1375737266, {Field0: colontmp__536873204, Field1: colontmp__536873205}, NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737266;

}

function parse_1375737155(self_1375737156, location_1375737157) {
      var Temporary1;

  var result_1375737158 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (self_1375737156.compare((Temporary1 = str_1191182469(grammar_1375733213(self_1375737156).document), Temporary1)[0][Temporary1[1]], location_1375737157, self_1375737156.text)) {
    if ((self_1375737156.flags[9] != undefined)) {
    F.line = 1090;
    F.filename = "parse.nim";
    var colontmp__536873206 = EmptyNode_1375731991;
    F.line = 1090;
    var colontmp__536873207 = addInt(location_1375737157, (((self_1375737156.text).length) | 0));
    F.line = 1090;
    result_1375737158 = nimCopy(result_1375737158, {Field0: colontmp__536873206, Field1: colontmp__536873207}, NTI1375731757);
    break BeforeRet;
    }
    
    F.line = 1091;
    var nextLoc_1375737163 = addInt(location_1375737157, (((self_1375737156.text).length) | 0));
    F.line = 1092;
    var colontmp__536873208 = init_1275069170(new_1275069123(), self_1375737156.nodeName[0], self_1375737156.nodeName[1], cut_1191182497(grammar_1375733213(self_1375737156).document, HEX2EHEX2E_1191182403(location_1375737157, subInt(nextLoc_1375737163, 1))), null);
    F.line = 1092;
    var colontmp__536873209 = nextLoc_1375737163;
    F.line = 1092;
    result_1375737158 = nimCopy(result_1375737158, {Field0: colontmp__536873208, Field1: colontmp__536873209}, NTI1375731757);
    break BeforeRet;
    }
    
    F.line = 1093;
    var colontmp__536873210 = null;
    F.line = 1093;
    var colontmp__536873211 = location_1375737157;
    F.line = 1093;
    result_1375737158 = nimCopy(result_1375737158, {Field0: colontmp__536873210, Field1: colontmp__536873211}, NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737158;

}

function max_1375737562(x_1375737564, y_1375737565) {
    var Temporary1;

  var result_1375737566 = 0;

    if ((y_1375737565 <= x_1375737564)) {
    Temporary1 = x_1375737564;
    }
    else {
    Temporary1 = y_1375737565;
    }
    
    result_1375737566 = Temporary1;

  return result_1375737566;

}

function infiniteLoopWarning_1375737459(parser_1375737460, node_1375737461, location_1375737462) {
  var F = {procname: "parse.infiniteLoopWarning", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1223;
    F.filename = "parse.nim";
    break BeforeRet;
  };
  framePtr = F.prev;

  
}

function parse_1375737555(self_1375737556, location_1375737557) {
  var result_1375737558 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1299;
    F.filename = "parse.nim";
    var nodes_1375737567 = [];
    F.line = 1300;
    var loc_1375737568 = location_1375737557;
    F.line = 1301;
    var lastLoc_1375737569 = location_1375737557;
    F.line = 1302;
    var node_1375737570 = null;
    Label1: {
      F.line = 1303;
      var i_1375737583 = 0;
      F.line = 70;
      F.filename = "iterators_1.nim";
      var res_536873216 = 1;
      Label2: {
        F.line = 71;
          Label3: while (true) {
          if (!(res_536873216 <= self_1375737556.repRange.Field0)) break Label3;
            F.line = 1303;
            F.filename = "parse.nim";
            i_1375737583 = res_536873216;
            F.line = 1304;
            var __1375737584 = nimCopy(null, HEX28HEX29_1375735631(self_1375737556.subParsers[chckIndx(0, 0, (self_1375737556.subParsers).length - 1)], loc_1375737568), NTI1375731757);
            F.line = 1304;
            node_1375737570 = __1375737584["Field0"];
            F.line = 1304;
            loc_1375737568 = __1375737584["Field1"];
            if ((node_1375737570 == null)) {
            F.line = 1306;
            var colontmp__536873213 = null;
            F.line = 1306;
            var colontmp__536873214 = lastLoc_1375737569;
            F.line = 1306;
            result_1375737558 = nimCopy(result_1375737558, {Field0: colontmp__536873213, Field1: colontmp__536873214}, NTI1375731757);
            break BeforeRet;
            }
            else {
              F.line = 1308;
            nodes_1375737567.push(node_1375737570);;
            }
            
            if ((loc_1375737568 <= lastLoc_1375737569)) {
            F.line = 1310;
            infiniteLoopWarning_1375737459(self_1375737556, node_1375737570, loc_1375737568);
            F.line = 1311;
            break Label1;
            }
            
            F.line = 1312;
            lastLoc_1375737569 = loc_1375737568;
            F.line = 73;
            F.filename = "iterators_1.nim";
            res_536873216 = ((res_536873216 + 1) >>> 0);
          }
      };
    };
    Label4: {
      F.line = 1313;
      F.filename = "parse.nim";
      var i_1375737597 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__536873219 = 0;
      F.line = 1313;
      F.filename = "parse.nim";
      colontmp__536873219 = ((self_1375737556.repRange.Field0 + 1) >>> 0);
      F.line = 70;
      F.filename = "iterators_1.nim";
      var res_536873220 = colontmp__536873219;
      Label5: {
        F.line = 71;
          Label6: while (true) {
          if (!(res_536873220 <= self_1375737556.repRange.Field1)) break Label6;
            F.line = 1313;
            F.filename = "parse.nim";
            i_1375737597 = res_536873220;
            F.line = 1314;
            var __1375737598 = nimCopy(null, HEX28HEX29_1375735631(self_1375737556.subParsers[chckIndx(0, 0, (self_1375737556.subParsers).length - 1)], loc_1375737568), NTI1375731757);
            F.line = 1314;
            node_1375737570 = __1375737598["Field0"];
            F.line = 1314;
            loc_1375737568 = __1375737598["Field1"];
            if ((node_1375737570 == null)) {
            F.line = 1316;
            break Label4;
            }
            else {
              F.line = 1318;
            nodes_1375737567.push(node_1375737570);;
            }
            
            if ((loc_1375737568 <= lastLoc_1375737569)) {
            F.line = 1320;
            infiniteLoopWarning_1375737459(self_1375737556, node_1375737570, loc_1375737568);
            F.line = 1321;
            break Label4;
            }
            
            F.line = 1322;
            lastLoc_1375737569 = loc_1375737568;
            F.line = 73;
            F.filename = "iterators_1.nim";
            res_536873220 = ((res_536873220 + 1) >>> 0);
          }
      };
    };
    F.line = 1323;
    F.filename = "parse.nim";
    var colontmp__536873222 = grammar_1375733213(self_1375737556).returnSequence(self_1375737556, nodes_1375737567);
    F.line = 1323;
    var colontmp__536873223 = loc_1375737568;
    F.line = 1323;
    result_1375737558 = nimCopy(result_1375737558, {Field0: colontmp__536873222, Field1: colontmp__536873223}, NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737558;

}

function parse_1375737388(self_1375737389, location_1375737390) {
  var result_1375737391 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1194;
    F.filename = "parse.nim";
    var l_1375737392 = matchLen_1191182712(grammar_1375733213(self_1375737389).document, self_1375737389.combined.Field1, location_1375737390);
    if ((0 <= l_1375737392)) {
    if (((0 < l_1375737392) || !((self_1375737389.flags[7] != undefined)))) {
    if ((self_1375737389.flags[9] != undefined)) {
    F.line = 1198;
    var colontmp__536873224 = EmptyNode_1375731991;
    F.line = 1198;
    var colontmp__536873225 = addInt(location_1375737390, l_1375737392);
    F.line = 1198;
    result_1375737391 = nimCopy(result_1375737391, {Field0: colontmp__536873224, Field1: colontmp__536873225}, NTI1375731757);
    break BeforeRet;
    }
    
    F.line = 1199;
    var text_1375737412 = nimCopy(null, cut_1191182497(grammar_1375733213(self_1375737389).document, HEX2EHEX2E_1191182403(location_1375737390, subInt(addInt(location_1375737390, l_1375737392), 1))), NTI1191182339);
    F.line = 1200;
    var colontmp__536873226 = init_1275069170(new_1275069123(), self_1375737389.nodeName[0], self_1375737389.nodeName[1], text_1375737412, null);
    F.line = 1200;
    var colontmp__536873227 = addInt(location_1375737390, l_1375737392);
    F.line = 1200;
    result_1375737391 = nimCopy(result_1375737391, {Field0: colontmp__536873226, Field1: colontmp__536873227}, NTI1375731757);
    break BeforeRet;
    }
    
    }
    
    F.line = 1201;
    var colontmp__536873228 = EmptyNode_1375731991;
    F.line = 1201;
    var colontmp__536873229 = location_1375737390;
    F.line = 1201;
    result_1375737391 = nimCopy(result_1375737391, {Field0: colontmp__536873228, Field1: colontmp__536873229}, NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737391;

}

function reentry_1375736027(catcher_1375736028, location_1375736029) {
  var result_1375736032 = {Field0: null, Field1: 0};

  var F = {procname: "parse.reentry", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 792;
    F.filename = "parse.nim";
    var node_1375736033 = EmptyNode_1375731991;
    F.line = 793;
    var reloc_1375736034 = (-1);
    if ((0 < (catcher_1375736028.skipList).length)) {
    F.line = 795;
    var gr_1375736038 = grammar_1375733213(catcher_1375736028);
    F.line = 796;
    var __1375736039 = nimCopy(null, reentry_point_1375733273(gr_1375736038.document, location_1375736029, catcher_1375736028.skipList, gr_1375736038.commentRe, 10000), NTI1375732657);
    F.line = 796;
    node_1375736033 = __1375736039["Field0"];
    F.line = 796;
    reloc_1375736034 = __1375736039["Field1"];
    if (!((node_1375736033 == null))) {
    F.line = 799;
    var nd_1375736043 = node_1375736033;
    F.line = 800;
    var colontmp__536873239 = nd_1375736043;
    F.line = 800;
    var colontmp__536873240 = reloc_1375736034;
    F.line = 800;
    result_1375736032 = nimCopy(result_1375736032, {Field0: colontmp__536873239, Field1: colontmp__536873240}, NTI1375734246);
    break BeforeRet;
    }
    
    }
    
    F.line = 801;
    var colontmp__536873241 = init_1375731969(new_1275069123(), [95,95,90,79,77,66,73,69], [], null);
    F.line = 801;
    var colontmp__536873242 = (-1);
    F.line = 801;
    result_1375736032 = nimCopy(result_1375736032, {Field0: colontmp__536873241, Field1: colontmp__536873242}, NTI1375734246);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375736032;

}

function startsWith_1375736085(str_1375736087, sub_1375736088) {
  var result_1375736089 = false;

  var F = {procname: "startsWith.startsWith", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((len_1191182481(str_1375736087) < (((sub_1375736088).length) | 0))) {
    F.line = 135;
    F.filename = "strslice.nim";
    result_1375736089 = false;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 140;
      var idx_1375736090 = 0;
      F.line = 140;
      var c_1375736091 = 0;
      F.line = 193;
      F.filename = "iterators.nim";
      var i_536873253 = 0;
      F.line = 194;
      var L_536873254 = (sub_1375736088).length;
      Label2: {
        F.line = 195;
          Label3: while (true) {
          if (!(i_536873253 < L_536873254)) break Label3;
            F.line = 140;
            F.filename = "strslice.nim";
            idx_1375736090 = i_536873253;
            F.line = 140;
            c_1375736091 = sub_1375736088[chckIndx(i_536873253, 0, (sub_1375736088).length - 1)];
            if (!((str_1375736087.Field0[0][str_1375736087.Field0[1]][chckIndx(addInt(((idx_1375736090) | 0), str_1375736087.Field1), 0, (str_1375736087.Field0[0][str_1375736087.Field0[1]]).length - 1)] == c_1375736091))) {
            F.line = 141;
            result_1375736089 = false;
            break BeforeRet;
            }
            
            F.line = 197;
            F.filename = "iterators.nim";
            i_536873253 = addInt(i_536873253, 1);
            if (!(((sub_1375736088).length == L_536873254))) {
            F.line = 198;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(198, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 142;
    F.filename = "strslice.nim";
    result_1375736089 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375736089;

}

function HEX3DHEX3D_1375736080(str_1375736082, cmp_1375736083) {
  var result_1375736084 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/strslice.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((len_1191182481(str_1375736082) == (((cmp_1375736083).length) | 0)))) {
    F.line = 147;
    F.filename = "strslice.nim";
    result_1375736084 = false;
    break BeforeRet;
    }
    
    F.line = 153;
    result_1375736084 = startsWith_1375736085(str_1375736082, cmp_1375736083);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375736084;

}

function integerOutOfRangeError_771752261() {
  var F = {procname: "parseutils.integerOutOfRangeError", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 421;
    F.filename = "parseutils.nim";
    raiseException({message: [80,97,114,115,101,100,32,105,110,116,101,103,101,114,32,111,117,116,115,105,100,101,32,111,102,32,118,97,108,105,100,32,114,97,110,103,101], parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
  framePtr = F.prev;

  
}

function rawParseInt_771752263(s_771752264, b_771752265, b_771752265_Idx) {
      var Temporary1;
          var Temporary4;

  var result_771752266 = 0;

  var F = {procname: "parseutils.rawParseInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 429;
    F.filename = "parseutils.nim";
    var sign_771752267 = (-1n);
    F.line = 430;
    var i_771752268 = 0;
    if ((i_771752268 < (s_771752264).length)) {
    if ((s_771752264[chckIndx(i_771752268, 0, (s_771752264).length - 1)] == 43)) {
    F.line = 432;
    i_771752268 += 1;
    }
    else {
    if ((s_771752264[chckIndx(i_771752268, 0, (s_771752264).length - 1)] == 45)) {
    F.line = 434;
    i_771752268 += 1;
    F.line = 435;
    sign_771752267 = 1n;
    }
    }
    }
    
      if (!(i_771752268 < (s_771752264).length)) Temporary1 = false; else {        Temporary1 = (ConstSet39[s_771752264[chckIndx(i_771752268, 0, (s_771752264).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 437;
    b_771752265[b_771752265_Idx] = 0n;
    Label2: {
      F.line = 438;
        Label3: while (true) {
          if (!(i_771752268 < (s_771752264).length)) Temporary4 = false; else {            Temporary4 = (ConstSet40[s_771752264[chckIndx(i_771752268, 0, (s_771752264).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          F.line = 439;
          var c_771752302 = (s_771752264[chckIndx(i_771752268, 0, (s_771752264).length - 1)] - 48);
          if ((((-9223372036854775808n) + BigInt(c_771752302)) / 10n <= b_771752265[b_771752265_Idx])) {
          F.line = 441;
          b_771752265[b_771752265_Idx] = ((b_771752265[b_771752265_Idx] * 10n) - BigInt(c_771752302));
          }
          else {
            F.line = 443;
          integerOutOfRangeError_771752261();
          }
          
          F.line = 444;
          i_771752268 += 1;
          Label5: {
            F.line = 445;
              Label6: while (true) {
              if (!((i_771752268 < (s_771752264).length) && (s_771752264[chckIndx(i_771752268, 0, (s_771752264).length - 1)] == 95))) break Label6;
                F.line = 445;
                i_771752268 += 1;
              }
          };
        }
    };
    if (((sign_771752267 == (-1n)) && (b_771752265[b_771752265_Idx] == (-9223372036854775808n)))) {
    F.line = 447;
    integerOutOfRangeError_771752261();
    }
    else {
      F.line = 449;
      b_771752265[b_771752265_Idx] = (b_771752265[b_771752265_Idx] * sign_771752267);
      F.line = 450;
      result_771752266 = i_771752268;
    }
    
    }
    
  framePtr = F.prev;

  return result_771752266;

}

function npuParseBiggestInt(s_771752325, number_771752326, number_771752326_Idx) {
  var result_771752327 = 0;

  var F = {procname: "parseutils.parseBiggestInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 464;
    F.filename = "parseutils.nim";
    var res_771752328 = [0n];
    F.line = 467;
    result_771752327 = rawParseInt_771752263(s_771752325, res_771752328, 0);
    if (!((result_771752327 == 0))) {
    F.line = 469;
    number_771752326[number_771752326_Idx] = res_771752328[0];
    }
    
  framePtr = F.prev;

  return result_771752327;

}

function npuParseInt(s_771752330, number_771752331, number_771752331_Idx) {
  var result_771752332 = 0;

  var F = {procname: "parseutils.parseInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 482;
    F.filename = "parseutils.nim";
    var res_771752333 = [0n];
    F.line = 483;
    result_771752332 = npuParseBiggestInt(s_771752330, res_771752333, 0);
    if (((res_771752333[0] < (-2147483648n)) || (2147483647n < res_771752333[0]))) {
    F.line = 486;
    integerOutOfRangeError_771752261();
    }
    
    if (!((result_771752332 == 0))) {
    F.line = 488;
    number_771752331[number_771752331_Idx] = chckRange(Number(res_771752333[0]), (-2147483648), 2147483647);
    }
    
  framePtr = F.prev;

  return result_771752332;

}

function parseInt_771752843(s_771752844, number_771752845, number_771752845_Idx, start_771752846) {
  var result_771752847 = 0;

  var F = {procname: "parseutils.parseInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 999;
    F.filename = "parseutils.nim";
    result_771752847 = npuParseInt((s_771752844.slice(start_771752846, (s_771752844).length - 1 + 1)), number_771752845, number_771752845_Idx);
  framePtr = F.prev;

  return result_771752847;

}

function nsuParseInt(s_754975577) {
  var result_754975578 = [0];

  var F = {procname: "strutils.parseInt", prev: framePtr, filename: "/Users/di68kap/Entwicklung/Fremde/Nim/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1134;
    F.filename = "strutils.nim";
    result_754975578[0] = 0;
    F.line = 1135;
    var L_754975579 = parseInt_771752843(s_754975577, result_754975578, 0, 0);
    if ((!((L_754975579 == (s_754975577).length)) || (L_754975579 == 0))) {
    F.line = 1137;
    raiseException({message: ([105,110,118,97,108,105,100,32,105,110,116,101,103,101,114,58,32] || []).concat(s_754975577 || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_754975578[0];

}

function violation_1375736054(catcher_1375736055, location_1375736056, wasLookAhead_1375736057, expected_1375736058, reloc_1375736059, errorNode_1375736060) {
    var Temporary1;
    var Temporary3;
              
function match_1375736064(rule_1375736065, text_1375736066, location_1375736067) {
                    var Temporary1;
                    var Temporary2;
                    var Temporary3;
                    var Temporary4;
                    var Temporary5;

                var result_1375736068 = false;

                var F = {procname: "violation.match", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
                framePtr = F;
                BeforeRet: {
                  F.line = 812;
                  F.filename = "parse.nim";
                  switch (rule_1375736065.kind) {
                  case 0:
                    F.line = 814;
                    var Temporary1 = rule_1375736065;
                    if (ConstSet34[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'rxInfo\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1375731760)); }
                    result_1375736068 = (0 <= matchLen_1191182712(text_1375736066, Temporary1.rxInfo.Field1, location_1375736067));
                    break BeforeRet;
                    break;
                  case 1:
                    F.line = 816;
                    var Temporary2 = rule_1375736065;
                    if (ConstSet35[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'cmpStr\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1375731760)); }
                    var Temporary3 = rule_1375736065;
                    if (ConstSet36[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'cmpStr\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1375731760)); }
                    result_1375736068 = HEX3DHEX3D_1375736080(cut_1191182497(text_1375736066, HEX2EHEX2E_1191182403(location_1375736067, subInt(addInt(location_1375736067, (((Temporary2.cmpStr).length) | 0)), 1))), Temporary3.cmpStr);
                    break BeforeRet;
                    break;
                  case 2:
                    F.line = 818;
                    var Temporary4 = rule_1375736065;
                    if (ConstSet37[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'findProc\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1375731760)); }
                    result_1375736068 = (0 <= Temporary4.findProc(text_1375736066, location_1375736067, location_1375736067)["Field0"]);
                    break BeforeRet;
                    break;
                  case 3:
                    F.line = 820;
                    var Temporary5 = rule_1375736065;
                    if (ConstSet38[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'consumeParser\' is not accessible for type \'Matcher\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1375731760)); }
                    var parser_1375736092 = Temporary5.consumeParser;
                    F.line = 821;
++excHandler;
                    try {
                    F.line = 822;
                    var tmpTuple_1375736093 = HEX28HEX29_1375735631(parser_1375736092, location_1375736067);
                    F.line = 822;
                    var node_1375736094 = tmpTuple_1375736093["Field0"];
                    F.line = 822;
                    var pos_1375736095 = tmpTuple_1375736093["Field1"];
                    F.line = 823;
                    result_1375736068 = !((node_1375736094 == null));
                    break BeforeRet;
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
                    framePtr = F;
                    if (lastJSError && (isObj(lastJSError.m_type, NTI1375731778))) {
                    F.line = 825;
                    var pe_1375736099 = getCurrentException();
                    F.line = 825;
                    var msg_1375736100 = ([69,114,114,111,114,32,119,104,105,108,101,32,112,105,99,107,105,110,103,32,101,114,114,111,114,32,109,101,115,115,97,103,101,32,119,105,116,104,58,32] || []).concat(HEX24_1375733037(parser_1375736092) || []);
                    F.line = 826;
                    var error_1375736104 = init_1241514008(new_1375733368(), msg_1375736100, location_1375736067, 1301, (-1), (-1), (-1), [], (-1), []);
                    F.line = 827;
                    grammar_1375733213(parser_1375736092).errors.push(error_1375736104);;
                    }
                    else {
                    	reraiseException();
                    }
                    lastJSError = prevJSError;
                    } finally {
                    framePtr = F;
                    }
                    break;
                  }
                };
                framePtr = F.prev;

                return result_1375736068;

              }

  var result_1375736063 = {Field0: null, Field1: 0};

  var F = {procname: "parse.violation", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 830;
    F.filename = "parse.nim";
    var gr_1375736118 = grammar_1375733213(catcher_1375736055);
    F.line = 831;
    var snippet_1375736127 = cstrToNimstr(replace_1191182734(cut_1191182497(gr_1375736118.document, HEX2EHEX2E_1191182403(location_1375736056, addInt(location_1375736056, 9))), ure_1375731737([92,110]), [92,110]));
    F.line = 832;
    if ((len_1191182481(gr_1375736118.document) <= location_1375736056)) {
    Temporary1 = [69,79,70];
    }
    else {
      Label2: {
        F.line = 832;
        var fmtRes_1375736132 = [mnewString(0)];
        F.line = 832;
        fmtRes_1375736132[0].push.apply(fmtRes_1375736132[0], [194,187]);;
        F.line = 832;
        formatValue_1207959723(fmtRes_1375736132, 0, snippet_1375736127, []);
        F.line = 832;
        fmtRes_1375736132[0].push.apply(fmtRes_1375736132[0], [194,171]);;
      };
    Temporary1 = fmtRes_1375736132[0];
    }
    
    var found_1375736133 = nimCopy(null, Temporary1, NTI33554449);
    F.line = 833;
    if ((catcher_1375736055.symbol == null)) {
    Temporary3 = HEX24_1375733037(catcher_1375736055);
    }
    else {
    Temporary3 = catcher_1375736055.symbol.pname;
    }
    
    var sym_1375736137 = nimCopy(null, Temporary3, NTI33554449);
    F.line = 835;
    var errCode_1375736138 = 1010;
    F.line = 836;
    Label4: {
      F.line = 836;
      var fmtRes_1375736143 = [mnewString(0)];
      F.line = 836;
      formatValue_1207959723(fmtRes_1375736143, 0, expected_1375736058, []);
      F.line = 836;
      fmtRes_1375736143[0].push.apply(fmtRes_1375736143[0], [32,101,120,112,101,99,116,101,100,32,98,121,32,112,97,114,115,101,114,32]);;
      F.line = 836;
      formatValue_1207959723(fmtRes_1375736143, 0, sym_1375736137, []);
      F.line = 836;
      fmtRes_1375736143[0].push.apply(fmtRes_1375736143[0], [44,32,98,117,116,32]);;
      F.line = 836;
      formatValue_1207959723(fmtRes_1375736143, 0, found_1375736133, []);
      F.line = 836;
      fmtRes_1375736143[0].push.apply(fmtRes_1375736143[0], [32,102,111,117,110,100,33]);;
    };
    var message_1375736144 = nimCopy(null, fmtRes_1375736143[0], NTI33554449);
    Label5: {
      F.line = 838;
      var rule_1375736148 = ({kind: 0, rxInfo: {Field0: [], Field1: {Field0: null, Field1: null}}, cmpStr: [], findProc: null, consumeParser: null});
      F.line = 838;
      var msg_1375736149 = [];
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873246 = 0;
      F.line = 242;
      var L_536873247 = (catcher_1375736055.errorList).length;
      Label6: {
        F.line = 243;
          Label7: while (true) {
          if (!(i_536873246 < L_536873247)) break Label7;
            F.line = 838;
            F.filename = "parse.nim";
            rule_1375736148 = catcher_1375736055.errorList[chckIndx(i_536873246, 0, (catcher_1375736055.errorList).length - 1)]["Field0"];
            F.line = 838;
            msg_1375736149 = catcher_1375736055.errorList[chckIndx(i_536873246, 0, (catcher_1375736055.errorList).length - 1)]["Field1"];
            if (match_1375736064(rule_1375736148, gr_1375736118.document, location_1375736056)) {
            F.line = 840;
            var i_1375736150 = addInt(nsuFindChar(msg_1375736149, 58, 0, (-1)), 1);
            F.line = 841;
++excHandler;
            try {
            if ((0 < i_1375736150)) {
            F.line = 842;
            errCode_1375736138 = nsuParseInt(HEX5BHEX5D_754975999(msg_1375736149, HEX2EHEX2E_973078576(0, subInt(i_1375736150, 1))));
            }
            
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = F;
            if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
            F.line = 844;
            i_1375736150 = 0;
            }
            else {
            	reraiseException();
            }
            lastJSError = prevJSError;
            } finally {
            framePtr = F;
            }
            F.line = 845;
            message_1375736144 = nimCopy(null, nsuReplaceStr(nsuReplaceStr(HEX5BHEX5D_754976027(msg_1375736149, HEX2EHEX2E_922746984(i_1375736150, 1)), [123,48,125], expected_1375736058), [123,49,125], found_1375736133), NTI33554449);
            F.line = 846;
            break Label5;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873246 = addInt(i_536873246, 1);
            if (!(((catcher_1375736055.errorList).length == L_536873247))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if ((wasLookAhead_1375736057 && (len_1191182481(gr_1375736118.document) <= location_1375736056))) {
    F.line = 848;
    F.filename = "parse.nim";
    errCode_1375736138 = 1015;
    }
    
    F.line = 849;
    var error_1375736196 = init_1241514008(new_1375733368(), message_1375736144, location_1375736056, errCode_1375736138, (-1), (-1), (-1), [], (-1), []);
    F.line = 850;
    gr_1375736118.errors.push(error_1375736196);;
    F.line = 851;
    var colontmp__536873249 = error_1375736196;
    F.line = 851;
    var colontmp__536873250 = addInt(location_1375736056, nimMax(reloc_1375736059, 0));
    F.line = 851;
    result_1375736063 = nimCopy(result_1375736063, {Field0: colontmp__536873249, Field1: colontmp__536873250}, NTI1375734262);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375736063;

}

function parse_1375738079(self_1375738080, location_1375738081) {
                var Temporary5;

  var result_1375738082 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1458;
    F.filename = "parse.nim";
    var results_1375738089 = [];
    F.line = 1459;
    var loc_1375738090 = location_1375738081;
    F.line = 1460;
    var reloc_1375738091 = 0;
    F.line = 1461;
    var error_1375738092 = null;
    F.line = 1462;
    var node_1375738093 = null;
    F.line = 1462;
    var nd_1375738094 = null;
    F.line = 1463;
    var someNode_1375738095 = null;
    Label1: {
      F.line = 1465;
      var pos_1375738096 = (-1);
      Label2: {
        F.line = 1464;
        var parser_1375738100 = null;
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536873234 = 0;
        F.line = 242;
        var L_536873235 = (self_1375738080.subParsers).length;
        Label3: {
          F.line = 243;
            Label4: while (true) {
            if (!(i_536873234 < L_536873235)) break Label4;
              F.line = 1465;
              F.filename = "parse.nim";
              parser_1375738100 = self_1375738080.subParsers[chckIndx(i_536873234, 0, (self_1375738080.subParsers).length - 1)];
              F.line = 1465;
              pos_1375738096 = addInt(pos_1375738096, 1);
              F.line = 1465;
              var __1375738106 = nimCopy(null, HEX28HEX29_1375735631(parser_1375738100, loc_1375738090), NTI1375731757);
              F.line = 1465;
              node_1375738093 = __1375738106["Field0"];
              F.line = 1465;
              loc_1375738090 = __1375738106["Field1"];
              if ((node_1375738093 == null)) {
              if ((pos_1375738096 < self_1375738080.mandatory)) {
              F.line = 1468;
              var colontmp__536873232 = null;
              F.line = 1468;
              var colontmp__536873233 = location_1375738081;
              F.line = 1468;
              result_1375738082 = nimCopy(result_1375738082, {Field0: colontmp__536873232, Field1: colontmp__536873233}, NTI1375731757);
              break BeforeRet;
              }
              else {
                F.line = 1470;
                var __1375738110 = nimCopy(null, reentry_1375736027(self_1375738080, loc_1375738090), NTI1375734246);
                F.line = 1470;
                someNode_1375738095 = __1375738110["Field0"];
                F.line = 1470;
                reloc_1375738091 = __1375738110["Field1"];
                F.line = 1471;
                if (!(eqStrings(parser_1375738100.pname, []))) {
                Temporary5 = parser_1375738100.pname;
                }
                else {
                Temporary5 = HEX24_1375733037(parser_1375738100);
                }
                
                var __1375738111 = nimCopy(null, violation_1375736054(self_1375738080, loc_1375738090, false, Temporary5, reloc_1375738091, someNode_1375738095), NTI1375734262);
                F.line = 1471;
                error_1375738092 = __1375738111["Field0"];
                F.line = 1471;
                loc_1375738090 = __1375738111["Field1"];
                if ((0 <= reloc_1375738091)) {
                F.line = 1473;
                var __1375738112 = nimCopy(null, HEX28HEX29_1375735631(parser_1375738100, loc_1375738090), NTI1375731757);
                F.line = 1473;
                nd_1375738094 = __1375738112["Field0"];
                F.line = 1473;
                loc_1375738090 = __1375738112["Field1"];
                if (!((nd_1375738094 == null))) {
                F.line = 1475;
                results_1375738089.push(someNode_1375738095);;
                F.line = 1476;
                someNode_1375738095 = nd_1375738094;
                }
                
                if ((!((((someNode_1375738095.childrenSeq).length == 0) && (len_1191182481(someNode_1375738095.textSlice) == 0))) || !((((someNode_1375738095.nameRef[0][someNode_1375738095.nameRef[1]]).length == 0) || (someNode_1375738095.nameRef[0][someNode_1375738095.nameRef[1]][chckIndx(0, 0, (someNode_1375738095.nameRef[0][someNode_1375738095.nameRef[1]]).length - 1)] == 58))))) {
                F.line = 1478;
                results_1375738089.push(someNode_1375738095);;
                }
                
                }
                else {
                  F.line = 1480;
                  results_1375738089.push(someNode_1375738095);;
                  F.line = 1481;
                  break Label2;
                }
                
              }
              
              }
              else {
              if ((!((((node_1375738093.childrenSeq).length == 0) && (len_1191182481(node_1375738093.textSlice) == 0))) || !((((node_1375738093.nameRef[0][node_1375738093.nameRef[1]]).length == 0) || (node_1375738093.nameRef[0][node_1375738093.nameRef[1]][chckIndx(0, 0, (node_1375738093.nameRef[0][node_1375738093.nameRef[1]]).length - 1)] == 58))))) {
              F.line = 1483;
              results_1375738089.push(node_1375738093);;
              }
              }
              F.line = 245;
              F.filename = "iterators.nim";
              i_536873234 = addInt(i_536873234, 1);
              if (!(((self_1375738080.subParsers).length == L_536873235))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
    F.line = 1484;
    F.filename = "parse.nim";
    someNode_1375738095 = grammar_1375733213(self_1375738080).returnSequence(self_1375738080, results_1375738089);
    if (!((error_1375738092 == null))) {
    F.line = 177;
    F.filename = "nodetree.nim";
    var _ = assignSourcePos_1275069043(someNode_1375738095, location_1375738081);
    F.line = 1486;
    F.filename = "parse.nim";
    raiseException({origin: self_1375738080, node: someNode_1375738095, node_orig_len: subInt(loc_1375738090, location_1375738081), location: location_1375738081, error: error_1375738092, first_throw: true, m_type: NTI1375731778, parent: null, name: null, message: [], trace: [], up: null}, "ParsingException:ObjectType");
    }
    
    F.line = 1489;
    var colontmp__536873237 = someNode_1375738095;
    F.line = 1489;
    var colontmp__536873238 = loc_1375738090;
    F.line = 1489;
    result_1375738082 = nimCopy(result_1375738082, {Field0: colontmp__536873237, Field1: colontmp__536873238}, NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375738082;

}

function parse_1375737736(self_1375737737, location_1375737738) {
  var result_1375737739 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1374;
    F.filename = "parse.nim";
    var loc_1375737740 = location_1375737738;
    F.line = 1375;
    var node_1375737741 = null;
    Label1: {
      F.line = 1376;
      var parser_1375737745 = null;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536873261 = 0;
      F.line = 242;
      var L_536873262 = (self_1375737737.subParsers).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536873261 < L_536873262)) break Label3;
            F.line = 1376;
            F.filename = "parse.nim";
            parser_1375737745 = self_1375737737.subParsers[chckIndx(i_536873261, 0, (self_1375737737.subParsers).length - 1)];
            F.line = 1377;
            var __1375737746 = nimCopy(null, HEX28HEX29_1375735631(parser_1375737745, loc_1375737740), NTI1375731757);
            F.line = 1377;
            node_1375737741 = __1375737746["Field0"];
            F.line = 1377;
            loc_1375737740 = __1375737746["Field1"];
            if (!((node_1375737741 == null))) {
            F.line = 1379;
            var colontmp__536873259 = grammar_1375733213(self_1375737737).returnItem(self_1375737737, node_1375737741);
            F.line = 1379;
            var colontmp__536873260 = loc_1375737740;
            F.line = 1379;
            result_1375737739 = nimCopy(result_1375737739, {Field0: colontmp__536873259, Field1: colontmp__536873260}, NTI1375731757);
            break BeforeRet;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536873261 = addInt(i_536873261, 1);
            if (!(((self_1375737737.subParsers).length == L_536873262))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/Users/di68kap/Entwicklung/Fremde/Nim/lib/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 1380;
    F.filename = "parse.nim";
    var colontmp__536873264 = null;
    F.line = 1380;
    var colontmp__536873265 = location_1375737738;
    F.line = 1380;
    result_1375737739 = nimCopy(result_1375737739, {Field0: colontmp__536873264, Field1: colontmp__536873265}, NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375737739;

}

function parse_1375741201(self_1375741202, location_1375741203) {
  var result_1375741204 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1702;
    F.filename = "parse.nim";
    result_1375741204 = nimCopy(result_1375741204, HEX28HEX29_1375735631(self_1375741202.subParsers[chckIndx(0, 0, (self_1375741202.subParsers).length - 1)], location_1375741203), NTI1375731757);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1375741204;

}

function parse_1375738494(self_1375738495, location_1375738496) {
  var result_1375738497 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1568;
    F.filename = "parse.nim";
    var loc_1375738498 = 0;
    F.line = 1569;
    var node_1375738499 = null;
    F.line = 1571;
    var __1375738500 = nimCopy(null, HEX28HEX29_1375735631(self_1375738495.subParsers[chckIndx(0, 0, (self_1375738495.subParsers).length - 1)], location_1375738496), NTI1375731757);
    F.line = 1571;
    node_1375738499 = __1375738500["Field0"];
    F.line = 1571;
    loc_1375738498 = __1375738500["Field1"];
    if ((self_1375738495.positive != (node_1375738499 == null))) {
    if ((self_1375738495.flags[7] != undefined)) {
    F.line = 1574;
    node_1375738499 = EmptyNode_1375731991;
    }
    else {
      F.line = 1576;
      node_1375738499 = init_1375735661(new_1275069123(), self_1375738495.nodeName[0], self_1375738495.nodeName[1], [], null);
    }
    
    F.line = 1577;
    var colontmp__536873266 = node_1375738499;
    F.line = 1577;
    var colontmp__536873267 = location_1375738496;
    F.line = 1577;
    result_1375738497 = nimCopy(result_1375738497, {Field0: colontmp__536873266, Field1: colontmp__536873267}, NTI1375731757);
    break BeforeRet;
    }
    else {
      F.line = 1579;
      var colontmp__536873268 = null;
      F.line = 1579;
      var colontmp__536873269 = location_1375738496;
      F.line = 1579;
      result_1375738497 = nimCopy(result_1375738497, {Field0: colontmp__536873268, Field1: colontmp__536873269}, NTI1375731757);
      break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_1375738497;

}

function parse_1375733782(self_1375733783, location_1375733784) {
  var result_1375733785 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
    F.line = 577;
    F.filename = "parse.nim";
    rawEcho([80,97,114,115,101,114,46,112,97,114,115,101]);
    F.line = 578;
    var colontmp__536873270 = null;
    F.line = 578;
    var colontmp__536873271 = 0;
    F.line = 578;
    result_1375733785 = nimCopy(result_1375733785, {Field0: colontmp__536873270, Field1: colontmp__536873271}, NTI1375731757);
  framePtr = F.prev;

  return result_1375733785;

}

function parse_1375733786(self_1375733783, location_1375733784) {
  var result_1375733787 = {Field0: null, Field1: 0};

  var F = {procname: "parse.parse", prev: framePtr, filename: "/Users/di68kap/Entwicklung/DHParser/nim_rewrite/src/nimparser/parse.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 511;
    F.filename = "jssys.nim";
    chckNilDisp(self_1375733783);
    if (isObj(self_1375733783.m_type, NTI1375734862)) {
    F.line = 576;
    F.filename = "parse.nim";
    result_1375733787 = nimCopy(result_1375733787, parse_1375736821(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375735469)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375737263(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375734901)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375737155(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375735636)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375737555(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375735540)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375737388(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375735979)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375738079(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375735787)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375737736(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375736430)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375741201(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375736327)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375738494(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    else {
    if (isObj(self_1375733783.m_type, NTI1375731768)) {
    F.line = 576;
    result_1375733787 = nimCopy(result_1375733787, parse_1375733782(self_1375733783, location_1375733784), NTI1375731757);
    break BeforeRet;
    }
    }}}}}}}}}
  };
  framePtr = F.prev;

  return result_1375733787;

}
