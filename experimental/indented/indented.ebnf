# indented-tree-grammar

@ whitespace   = horizontal
@ comment      = /#.*/
@ ignorecase   = False

# Tree-simplification while parsing:  none, flatten, merge_treetops, merge
@ reduction    = flatten
@ disposable   = EOF, DEEPER_LEVEL, SAME_LEVEL, empty_line, DEDENT
@ drop         = whitespace, strings, EOF, empty_line, DEEPER_LEVEL, SAME_LEVEL, DEDENT

document       = { empty_line } { [LF] INDENT node }+ /\s*/ EOF
node           = tag_name { attr } § content ~
content        = leaf_content | branch_content
               { empty_line }
               § !(LF HAS_DEEPER_INDENT) DEDENT
leaf_content   = string
               | DEEPER_LEVEL string { SAME_LEVEL § string }
branch_content = DEEPER_LEVEL node { SAME_LEVEL § node }

DEEPER_LEVEL   = { empty_line } &(LF HAS_DEEPER_INDENT) LF INDENT
SAME_LEVEL     = { empty_line } LF SAME_INDENT

tag_name       = IDENTIFIER
attr           = attribute value
   attribute   = "`" IDENTIFIER
   value       = '"' /[^"\n]*/ '"'~

empty_line     = LF ~ &LF
string         = QUOTE { !:QUOTE /[^'"\n]*/ } ::QUOTE ~

INDENT            = / */
SAME_INDENT       = :INDENT § !/ /
HAS_DEEPER_INDENT = :INDENT / +/
DEDENT            = [&:?INDENT]

QUOTE    = `'` | `"`

IDENTIFIER = /\w+/~
LF         =  /\n/
EOF        =  !/./        # no more characters ahead, end of file reached
