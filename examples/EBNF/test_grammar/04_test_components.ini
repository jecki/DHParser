
[match:expression]
M1: 'a | b'
M2: 'a b | c d'
M3: 'a (b | c) d'

[ast:expression]
M1: (expression (symbol "a") (symbol "b"))
M2: (expression (sequence (symbol "a") (symbol "b")) (sequence (symbol "c") (symbol "d")))
M3: (sequence (symbol "a") (expression (symbol "b") (symbol "c")) (symbol "d"))


[match:sequence]
M1: 'a b'
M2: 'a b c'
M3: 'a ยง[b] c'
M4: 'ยง&:symbol'

[ast:sequence]
M1: (sequence (symbol "a") (symbol "b"))
M2: (sequence (symbol "a") (symbol "b") (symbol "c"))
M3: (sequence (symbol "a") (:Token "ยง") (option (symbol "b")) (symbol "c"))
M4: (sequence (:Token "ยง") (term (flowmarker "&") (retrieveop ":") (symbol "symbol")))


[match:term]
M1*: 'symbol'
M2*: '"literal"'
M3*: "'literal'"
M4*: '`plaintext`'
M5*: '/regexp/'
M6*: '~'
M7*: '{ one }+'
M8*: '{ zero }'
M9*: '[option]'
M10*: '&:symbol'
M11*: '!<a b>'

[ast:term]
M1: (symbol "symbol")
M2: (literal '"literal"')
M3: (literal "'literal'")
M4: (plaintext "`plaintext`")
M5: (regexp "/regexp/")
M6: (whitespace "~")
M7: (oneormore (symbol "one"))
M8: (repetition (symbol "zero"))
M9: (option (symbol "option"))
M10: (term (flowmarker "&") (retrieveop ":") (symbol "symbol"))
M11: (term (flowmarker "!") (unordered (sequence (symbol "a") (symbol "b"))))


[fail:term]
F1: ':(group)'      # retrieve operators only work with symbols
F2: '&{zero}'       # lookahead operators don't make sense with parsers
F3: '&[option]'     # that never fail

