
[match:symbol]
M1: "identifier"
M2: "identifier_1"
M3: "IdEnTiFiEr"

[fail:symbol]
F1: "two words"
F2: "5_starting_with_a_digit"


[match:literal]
M1: '"simple literal"'
M2: '"literal with following whitespace" '
M3: "'literal with single quotation marks'"
M4: "'literal with escaped \' quotation marks'"
M5: '"another literal with escaped \" quotation marks"'
M6: """'literal containing different quotation marks: " '"""
M7: '''"another literal containing different quotation marks: ' "'''
M8: '''"literal spanning
        several lines"'''
M9: '"\\"'
M10: '"\"'
M11: '"\"" '

[fail:literal]
F1: ' "preceeding whitespace is not parsed by literal"'
F2: ''' "don't forget closing quotation marks'''
F3: '"\\" other stuff "'
F4: '"\\\""'            # sorry, this does not work, use a regular expression instead


[match:regexp]
M1: '/[A-Z][a-z]+/'     # plain regex
M2: '/\w+/'             # regex with backslashes
M4: '/\//'              # forward slashes must be escaped
M5: '/\s*/ '            # whitespace may follow the regex-definition
M6: '/\\/ '
M7: '/\// '             # escaping of forward slash
M8: '/\\(\/)/'          # use grouping to avoid ambiguities

[fail:regexp]
F1: ' /no preceeding whitespace/'
F2: '/\\/ other stuff /'
F3: '/\\\//'            # use /\\(\/)/ instead


[match:char_range]

[ast:char_range]

[fail:char_range]


[match:character]

[ast:character]

[fail:character]


[match:free_char]

[ast:free_char]

[fail:free_char]


[match:any_char]

[ast:any_char]

[fail:any_char]


[match:whitespace]      # whitespace denoted by '~' is considered insignificant by convention
M1: '~'
M2: '~ '

[fail:whitespace]
F1: ' ~'