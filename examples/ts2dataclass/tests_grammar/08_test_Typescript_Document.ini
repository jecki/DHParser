
[match:document]
M1: """

    /**
     * Defines an integer number in the range of -2^31 to 2^31 - 1.
     */
    export type integer = number;

    /**
     * Defines an unsigned integer number in the range of 0 to 2^31 - 1.
     */
    export type uinteger = number;

    {
    start: { line: 5, character: 23 },
    end : { line: 6, character: 0 }
    }

    """

M2: """
    type DocumentUri = string;

    type URI = string;

    /**
     * Client capabilities specific to regular expressions.
     */
    export interface RegularExpressionsClientCapabilities {
        /**
         * The engine's name.
         */
        engine: string;

        /**
         * The engine's version.
         */
        version?: string;
    }

    export const EOL: string[] = ['\n', '\r\n', '\r'];

    interface Position {
        /**
         * Line position in a document (zero-based).
         */
        line: uinteger;

        /**
         * Character offset on a line in a document (zero-based). Assuming that
         * the line is represented as a string, the `character` value represents
         * the gap between the `character` and `character + 1`.
         *
         * If the character value is greater than the line length it defaults back
         * to the line length.
         */
        character: uinteger;
    }

    {
        start: { line: 5, character: 23 },
        end : { line: 6, character: 0 }
    }

    interface Range {
        /**
         * The range's start position.
         */
        start: Position;

        /**
         * The range's end position.
         */
        end: Position;
    }
    """
M4: """textDocument.codeAction.resolveSupport = { properties: ['edit'] };"""
M5: '''{ line: 2, startChar:  5, length: 3, tokenType: "property",
        tokenModifiers: ["private", "static"]
    },
    { line: 2, startChar: 10, length: 4, tokenType: "type", tokenModifiers: [] },
    { line: 5, startChar:  2, length: 7, tokenType: "class", tokenModifiers: [] }

    {
       tokenTypes: ['property', 'type', 'class'],
       tokenModifiers: ['private', 'static']
    }

    { line: 2, startChar:  5, length: 3, tokenType: 0, tokenModifiers: 3 },
    { line: 2, startChar: 10, length: 4, tokenType: 1, tokenModifiers: 0 },
    { line: 5, startChar:  2, length: 7, tokenType: 2, tokenModifiers: 0 }

    { deltaLine: 2, deltaStartChar: 5, length: 3, tokenType: 0, tokenModifiers: 3 },
    { deltaLine: 0, deltaStartChar: 5, length: 4, tokenType: 1, tokenModifiers: 0 },
    { deltaLine: 3, deltaStartChar: 2, length: 7, tokenType: 2, tokenModifiers: 0 }

    // 1st token,  2nd token,  3rd token
    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]

    { line: 3, startChar:  5, length: 3, tokenType: "property",
        tokenModifiers: ["private", "static"]
    },
    { line: 3, startChar: 10, length: 4, tokenType: "type", tokenModifiers: [] },
    { line: 6, startChar:  2, length: 7, tokenType: "class", tokenModifiers: [] }

    // 1st token,  2nd token,  3rd token
    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0]'''
M6: """interface InitializeParams extends WorkDoneProgressParams {
		processId: integer | null;
		clientInfo?: {
			name: string;
			version?: string;
		};
		locale?: string;
		rootPath?: string | null;
		rootUri: DocumentUri | null;
		initializationOptions?: any;
		capabilities: ClientCapabilities;
		trace?: TraceValue;
		workspaceFolders?: WorkspaceFolder[] | null;
    }"""

[ast:document]

[fail:document]

