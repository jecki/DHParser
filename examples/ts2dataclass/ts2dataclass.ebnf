# ts2dataclass-grammar
# for examples of typescript-interfaces
# see: https://microsoft.github.io/language-server-protocol/specifications/specification-current/

#######################################################################
#
#  EBNF-Directives
#
#######################################################################

@ whitespace  = /\s*/           # implicit whitespace, includes linefeed, but not empty lines
@ literalws   = right           # literals have implicit whitespace on the right hand side
@ comment     = /(?:\/\/.*)|(?:\/\*(?:.|\n)*?\*\/)/   # /* ... */ or // to EOL
@ ignorecase  = False           # literals and regular expressions are case-sensitive
@ reduction   = merge_treetops  # anonymous nodes are being reduced where possible
@ disposable  = INT, NEG, FRAC, DOT, EXP, EOF
@ drop        = EOF, whitespace, strings # EOF and insignificant whitespace (tilde) will be dropped


#######################################################################
#
#:  Typescript Document
#
#######################################################################

document    = ~ { interface | type_alias | namespace | enum | const
                | literal | declaration ";" } EOF


#######################################################################
#
#:  Interfaces
#
#######################################################################

interface   = ["export"] "interface" §identifier [type_parameter]
              ["extends" identifier { "," identifier}]
              declarations_block
  type_parameter = "<" identifier ">"
type_alias  = ["export"] "type" §identifier "=" (types ";" | declarations_block)

declarations_block = "{"  [declaration { ";" declaration } [";"]] "}"
declaration = (identifier [optional] | index_signature) [":" types]
  optional  = "?"
  index_signature = "[" identifier ":" type "]"
types       = type { "|" types } | "(" types ")" [array_marker]
type        = (basic_type | identifier) [array_marker]
            | declarations_block | type_tuple | literal
type_tuple  = "[" type {"," type} "]"


#######################################################################
#
#:  Namespaces
#
#######################################################################

namespace   = ["export"] "namespace" §identifier
              "{" { const } "}"

#######################################################################
#
#:  Enums
#
#######################################################################

enum        = ["export"] "enum" §"{" item { "," item } "}"
  item      = identifier ["=" literal]


#######################################################################
#
#: Consts
#
#######################################################################

const       = ["export"] "const" §declaration "=" (literal | identifier) ";"
assignment  = qualifier "=" literal ";"

#######################################################################
#
#: literals
#
#######################################################################

literal    = number | string | array | object
number     = INT FRAC EXP ~
string     = /"[^"\n]*"/~ | /'[^'\n]*'/~
array      = `[`~ literal { `,`~ literal } `]`~
object     = `{`~ association { `,`~ association } `}`~
 association = name `:`~ literal
name       = identifier

#######################################################################
#
#: Keywords
#
#######################################################################

basic_type   = (`object` | `array` | `string` | `number` | `boolean` | `null`)~
array_marker = `[]`~


#######################################################################
#
#: Entities
#
#######################################################################

qualifier  = identifier { `.` identifier }
identifier = /(?!\d)\w+/~

INT         = [NEG] ( /[1-9][0-9]+/ | /[0-9]/ )
NEG         = `-`
FRAC        = [ DOT /[0-9]+/ ]
DOT         = `.`
EXP         = [ (`E`|`e`) [`+`|`-`] /[0-9]+/ ]

EOF        =  !/./        # no more characters ahead, end of file reached
