# re-grammar

#######################################################################
#
#  EBNF-Directives
#
#######################################################################

# Regular expression for implicit whitespace or one of: horizontal, linefeed, vertical
# Implicit whitespace is denoted by the tilde-character: ~
@ whitespace  = //  # never match any whitespace, but match empty string
# @ whitespace  = /\s*(?:#.*(?=\n|$))?\s*/  # match whitespace and comments for verbose regular expressions!

# Implicit whitespace adjacent to literals: left, right, both, none
# E.g. if @literalws = right then ")" means the same as ")"~
@ literalws   = none

# Regular expression for comments, e.g. /#.*(?:\n|$)/
# Use: /(?:\/\/.*)|(?:\/\*(?:.|\n)*?\*\/)/ for C++-style comments: /* ... */ or // to EOL
@ comment     = //

# Case-sensitivity: True, False
@ ignorecase  = False

# Tree-simplification while parsing:  none, flatten, merge_treetops, merge
@ reduction   = merge         # anonymous nodes are being reduced where possible

# Tags that may be replaced with their content while parsing
@ disposable  = EOF, BS, _number, _illegal, _entity, _escape, _special, _item,
                _grpItem, _extension, _anyChar, _character, _octal,
                _nibble, _escapedCh

# Tags that will be dropped with all their content while parsing or any of
# the special values: strings, backticked, whitespace, regexps
# Here, EOF and insignificant whitespace (tilde) will be dropped
@ drop        = EOF, BS, whitespace, strings


#: Regular Expressions

regular_expression = ~ [flagGroups] (regex | ")") EOF
regex      = ~ pattern { "|" ~ pattern }
pattern    = { repetition | _item }
_item      = (_entity | charSeq) ~
_entity    = _special | _escape | charset | group

flagGroups = { "(?" flags § ")" }+
flags      =  positive [negative] | negative
  positive = /[aiLmsux]+/
  negative = "-" /[imsx]+/


#: repetition

repetition = _item repType [ notGreedy | noBacktracking ] ~
  repType = zeroOrOne | zeroOrMore | oneOrMore | range
    zeroOrOne  = "?"
    zeroOrMore = "*"
    oneOrMore  = "+"
    range      = "{" min ["," max] "}"
      min      = _number
      max      = _number
      _number  = /[0-9]+/
  notGreedy      = "?"
  noBacktracking = "+"


#: special

_special   = any | start | end
  any      = "."
  start    = "^"
  end      = "$"

#: escape

_escape      = BS § ( bs | chCode | chName | groupId | reEsc | specialEsc | error | escCh )
  reEsc      = /[AbBdDsSwWZ]/
  specialEsc = /[abfnNrtUvx]/
  chCode     = "x" hex2 | "u" hex4 | "U" hex8 | oct
    hex2     = _nibble*2
    hex4     = _nibble*4
    hex8     = _nibble*8
    _nibble  = /[0-9a-fA-F]/
    oct      = "0" _octal{0,3} | _octal*3
    _octal   = /[0-7]/
  chName     = "N{" /[\w ]+/ "}"
  escCh      = _anyChar | /[)|+*?]/
  groupId    = /\d\d?/
  error      = &_illegal @Error("Unknown escape sequence") _illegal
    _illegal = /[a-zA-Z]/

#: charset

charset    = "[" [complement] { chRange | escapedSet | _escapedCh | BS error | ch }+ "]"
  complement = "^"
  chRange    = (_escapedCh | ch) "-" (_escapedCh | ch)
  escapedSet = BS /[dDsSwW]/
  _escapedCh = BS (chCode | chSpecial)
  chSpecial  = /[abfnrtv]/
  ch         = !"]" [BS] _anyChar


#: group

group     = "(" § (_extension | capturing) ")"
_extension = "?" § ( nonCapturing | subRegex | namedGroup | backRef
                  | comment | lookaround | bifurcation)

capturing  = grpRegex
nonCapturing = [flags] ":" § grpRegex
subRegex   = ">" § grpRegex
namedGroup = "P<" § groupName ">" grpRegex
backRef    = "P=" § groupName
comment    = "#" /(?:[\\]\)|[^)\\]+)+/

lookaround = lrtype § grpRegex
  lrtype   = `=` | `!` | `<=` | `<!`

bifurcation = "(" § (groupId | groupName) ")" pattern "|" grpPattern

groupName  = /(?!\d)\w+/

grpRegex   = ~ grpPattern { "|" ~ grpPattern }
grpPattern = { grpRepetition | _grpItem }
grpRepetition = _grpItem repType [ notGreedy | noBacktracking ] ~
_grpItem   = (_entity  | characters) ~

#: misc

characters = { !_entity _character ~}+
_character = /[^)|+*?]/
charSeq    = { !_entity _anyChar ~ }+
_anyChar   = /[^|+*?]/

BS  = bs
bs  = /\\/   # a single backslash
EOF = !/./

VERBOSE_WHITESPACE = /\s*(?:#.*(?=\n|$))?\s*/  # whitespace (including comments) in verbose mode
