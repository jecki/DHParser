
[match:syntax]
M1: """# Hierarchical syntax
    Grammar    <- Spacing Definition+ EndOfFile
    Definition <- Identifier LEFTARROW Expression
    Expression <- Sequence (SLASH Sequence)*
    Sequence   <- Prefix*
    Prefix     <- (AND / NOT)? Suffix
    Suffix     <- Primary (QUESTION / STAR / PLUS)?
    Primary    <- Identifier !LEFTARROW
                / OPEN Expression CLOSE
                / Literal / Class / DOT

    # Lexical syntax
    Identifier <- IdentStart IdentCont* Spacing
    IdentStart <- [a-zA-Z_]
    IdentCont  <- IdentStart / [0-9]
    Literal    <- [´] (![´] Char)* [´] Spacing
                / ["] (!["] Char)* ["] Spacing
    Class      <- ´[´ (!´]´ Range)* ´]´ Spacing
    Range      <- Char ´-´ Char / Char
    Char       <- ´\\´ [nrt´"\[\]\\]
                / ´\\´ [0-2][0-7][0-7]
                / ´\\´ [0-7][0-7]?
                / !´\\´ .

    LEFTARROW  <- ´<-´ Spacing
    SLASH      <- ´/´ Spacing
    AND        <- ´&´ Spacing
    NOT        <- ´!´ Spacing
    QUESTION   <- ´?´ Spacing
    STAR       <- ´*´ Spacing
    PLUS       <- ´+´ Spacing
    OPEN       <- ´(´ Spacing
    CLOSE      <- ´)´ Spacing
    DOT        <- ´.´ Spacing

    Spacing    <- (Space / Comment)*
    Comment    <- ´#´ (!EndOfLine .)* EndOfLine
    Space      <- ´ ´ / ´\t´ / EndOfLine
    EndOfLine  <- ´\r\n´ / ´\n´ / ´\r´
    EndOfFile  <- !."""

M2: """/* Source: https://www.w3.org/TR/xml/ */

    document	   ::= prolog element Misc*
    Char	       ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
    S	           ::= (#x20 | #x9 | #xD | #xA)+

    NameStartChar  ::= ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF]
                     | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F]
                     | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD]
                     | [#x10000-#xEFFFF]
    NameChar	   ::= NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
    Name	       ::= NameStartChar (NameChar)*
    Names	       ::= Name (#x20 Name)*
    Nmtoken	       ::= (NameChar)+
    Nmtokens	   ::= Nmtoken (#x20 Nmtoken)*

    EntityValue	   ::= '"' ([^%&"] | PEReference | Reference)* '"'
                     | "'" ([^%&'] | PEReference | Reference)* "'"
    AttValue	   ::= '"' ([^<&"] | Reference)* '"'
                     |  "'" ([^<&'] | Reference)* "'"
    SystemLiteral  ::= ('"' [^"]* '"') | ("'" [^']* "'")
    PubidLiteral   ::= '"' PubidChar* '"' | "'" (PubidChar - "'")* "'"
    PubidChar	   ::= #x20 | #xD | #xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]

    CharData	   ::= [^<&]* - ([^<&]* ']]>' [^<&]*)
    Comment	       ::= '<!--' ((Char - '-') | ('-' (Char - '-')))* '-->'

    PI	           ::= '<?' PITarget (S (Char* - (Char* '?>' Char*)))? '?>'
    PITarget	   ::= Name - (('X' | 'x') ('M' | 'm') ('L' | 'l'))

    CDSect	       ::= CDStart CData CDEnd
    CDStart	       ::= '<![CDATA['
    CData	       ::= (Char* - (Char* ']]>' Char*))
    CDEnd	       ::= ']]>'

    prolog	       ::= XMLDecl? Misc* (doctypedecl Misc*)?
    XMLDecl	       ::= '<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'
    VersionInfo    ::= S 'version' Eq ("'" VersionNum "'" | '"' VersionNum '"')
    Eq	           ::= S? '=' S?
    VersionNum	   ::= '1.' [0-9]+
    Misc	       ::= Comment | PI | S

    doctypedecl	   ::= '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>'
    DeclSep	       ::= PEReference | S
    intSubset	   ::= (markupdecl | DeclSep)*
    markupdecl	   ::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment

    extSubset	   ::= TextDecl? extSubsetDecl
    extSubsetDecl  ::= ( markupdecl | conditionalSect | DeclSep)*

    SDDecl	       ::= S 'standalone' Eq (("'" ('yes' | 'no') "'") | ('"' ('yes' | 'no') '"'))

    element	       ::= EmptyElemTag | STag content ETag
    STag	       ::= '<' Name (S Attribute)* S? '>'
    Attribute	   ::= Name Eq AttValue
    ETag           ::= '</' Name S? '>'
    content	       ::= CharData? ((element | Reference | CDSect | PI | Comment) CharData?)*
    EmptyElemTag   ::= '<' Name (S Attribute)* S? '/>'

    elementdecl	   ::= '<!ELEMENT' S Name S contentspec S? '>'
    contentspec	   ::= 'EMPTY' | 'ANY' | Mixed | children

    children	   ::= (choice | seq) ('?' | '*' | '+')?
    cp	           ::= (Name | choice | seq) ('?' | '*' | '+')?
    choice	       ::= '(' S? cp ( S? '|' S? cp )+ S? ')'
    seq	           ::= '(' S? cp ( S? ',' S? cp )* S? ')'

    Mixed	       ::= '(' S? '#PCDATA' (S? '|' S? Name)* S? ')*'
                     | '(' S? '#PCDATA' S? ')'

    AttlistDecl	   ::= '<!ATTLIST' S Name AttDef* S? '>'
    AttDef	       ::= S Name S AttType S DefaultDecl

    AttType	       ::= StringType | TokenizedType | EnumeratedType
    StringType	   ::= 'CDATA'
    TokenizedType  ::= 'ID'
                     | 'IDREF'
                     | 'IDREFS'
                     | 'ENTITY'
                     | 'ENTITIES'
                     | 'NMTOKEN'
                     | 'NMTOKENS'

    EnumeratedType ::= NotationType | Enumeration
    NotationType   ::= 'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')'
    Enumeration	   ::= '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')'

    DefaultDecl	   ::= '#REQUIRED' | '#IMPLIED'
                     | (('#FIXED' S)? AttValue)

    conditionalSect ::= includeSect | ignoreSect
    includeSect	   ::= '<![' S? 'INCLUDE' S? '[' extSubsetDecl ']]>'
    ignoreSect	   ::= '<![' S? 'IGNORE' S? '[' ignoreSectContents* ']]>'
    ignoreSectContents::= Ignore ('<![' ignoreSectContents ']]>' Ignore)*
    Ignore	       ::= Char* - (Char* ('<![' | ']]>') Char*)

    CharRef	       ::= '&#' [0-9]+ ';' | '&#x' [0-9a-fA-F]+ ';'

    Reference	   ::= EntityRef | CharRef
    EntityRef	   ::= '&' Name ';'
    PEReference	   ::= '%' Name ';'

    EntityDecl	   ::= GEDecl | PEDecl
    GEDecl	       ::= '<!ENTITY' S Name S EntityDef S? '>'
    PEDecl	       ::= '<!ENTITY' S '%' S Name S PEDef S? '>'
    EntityDef	   ::= EntityValue | (ExternalID NDataDecl?)
    PEDef	       ::= EntityValue | ExternalID

    ExternalID	   ::= 'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral
    NDataDecl	   ::= S 'NDATA' S Name

    TextDecl	   ::= '<?xml' VersionInfo? EncodingDecl S? '?>'
    extParsedEnt   ::=   	TextDecl? content

    EncodingDecl   ::= S 'encoding' Eq ('"' EncName '"' | "'" EncName "'" )
    EncName	       ::= [A-Za-z] ([A-Za-z0-9._] | '-')* 	/* Encoding name contains only Latin characters */

    NotationDecl   ::= '<!NOTATION' S Name S (ExternalID | PublicID) S? '>'	[VC: Unique Notation Name]
    PublicID	   ::= 'PUBLIC' S PubidLiteral"""

M3: '''@ literalws = right
       @ drop = whitespace   # <- there is no alternative syntax for directives!!!
       expression ::= term, { ("+" | "-"), term};
       term       ::= factor, { ("*" | "/"), factor};
       factor     ::= [sign], (NUMBER | VARIABLE | group), { VARIABLE | group };
       sign       ::= `+` | `-`;
       group      ::= "(", expression, ")";
       NUMBER     ::= /(?:0|(?:[1-9]\\d*))(?:\\.\\d+)?/, ~;
       VARIABLE   ::= /[A-Za-z]/, ~;'''

M4: '''@ literalws = right
    @ drop = whitespace  # <- there is no alternative syntax for directives!!!
    expression = `a`, `b`'''

M5: '''
    @ comment    = /(?!#x[A-Fa-f0-9])#.*(?:\n|$)|\/\*(?:.|\n)*?\*\/|\(\*(?:.|\n)*?\*\)/
        # comments can be either C-Style: /* ... */
        # or pascal/modula/oberon-style: (* ... *)
        # or python-style: # ... \n, excluding, however, character markers: #x20
    @ whitespace = /\s*/                            # whitespace includes linefeed
    @ literalws  = right                            # trailing whitespace of literals will be ignored tacitly
    @ disposable = component, pure_elem, countable, FOLLOW_UP, SYM_REGEX, ANY_SUFFIX, EOF
    @ drop       = whitespace, EOF                  # do not include these even in the concrete syntax tree
    @ RNG_BRACE_filter = matching_bracket()         # filter or transform content of RNG_BRACE on retrieve

    # re-entry-rules for resuming after parsing-error

    @ definition_resume = /\n\s*(?=@|\w+\w*\s*=)/
    @ directive_resume  = /\n\s*(?=@|\w+\w*\s*=)/

    # specialized error messages for certain cases

    @ definition_error  = /,/, 'Delimiter "," not expected in definition!\nEither this was meant to '
                               'be a directive and the directive symbol @ is missing\nor the error is '
                               'due to inconsistent use of the comma as a delimiter\nfor the elements '
                               'of a sequence.'

    #: top-level

    syntax     = ~ { definition | directive } EOF
    definition = symbol §DEF~ [ OR~ ] expression ENDL~ & FOLLOW_UP  # [OR~] to support v. Rossum's syntax

    directive  = "@" §symbol "=" component { "," component } & FOLLOW_UP
      # component  = (regexp | literals | procedure | symbol !DEF)
      component  = literals | procedure | expression
      literals   = { literal }+                       # string chaining, only allowed in directives!
      procedure  = SYM_REGEX "()"                     # procedure name, only allowed in directives!

    FOLLOW_UP  = `@` | symbol | EOF


    #: components

    expression = sequence { OR~ sequence }
    sequence   = ["§"] ( interleave | lookaround )  # "§" means all following terms mandatory
                 { AND~ ["§"] ( interleave | lookaround ) }
    interleave = difference { "°" ["§"] difference }
    lookaround = flowmarker § (oneormore | pure_elem)
    difference = term ["-" § (oneormore | pure_elem)]
    term       = oneormore | counted | repetition | option | pure_elem


    #: elements

    countable  = option | oneormore | element
    pure_elem  = element § !ANY_SUFFIX              # element strictly without a suffix
    element    = [retrieveop] symbol !DEF          # negative lookahead to be sure it's not a definition
               | literal
               | plaintext
               | regexp
               # | char_range
               | character ~
               | any_char
               | whitespace
               | group


    ANY_SUFFIX = /[?*+]/


    #: flow-operators

    flowmarker = "!"  | "&"                         # '!' negative lookahead, '&' positive lookahead
               | "<-!" | "<-&"                      # '<-!' negative lookbehind, '<-&' positive lookbehind
    retrieveop = "::" | ":?" | ":"                  # '::' pop, ':?' optional pop, ':' retrieve


    #: groups

    group      = "(" no_range §expression ")"
    oneormore  = "{" no_range expression "}+" | element "+"
    repetition = "{" no_range §expression "}" | element "*" no_range
    option     = # !char_range
                 "[" §expression "]" | element "?"
    counted    = countable range | countable TIMES~ multiplier | multiplier TIMES~ §countable

    range      = RNG_OPEN~ multiplier [ RNG_DELIM~ multiplier ] RNG_CLOSE~
    no_range   = !multiplier | &multiplier TIMES
    multiplier = /[1-9]\d*/~


    #: leaf-elements

    symbol     = SYM_REGEX ~                        # e.g. expression, term, parameter_list
    literal    = /"(?:(?<!\\)\\"|[^"])*?"/~         # e.g. "(", '+', 'while'
               | /'(?:(?<!\\)\\'|[^'])*?'/~         # whitespace following literals will be ignored tacitly.
    plaintext  = /`(?:(?<!\\)\\`|[^`])*?`/~         # like literal but does not eat whitespace
               | /´(?:(?<!\\)\\´|[^´])*?´/~
    regexp     = RE_LEADIN RE_CORE RE_LEADOUT ~   # e.g. /\w+/, ~/#.*(?:\n|$)/~
    # regexp     = /\/(?:(?<!\\)\\(?:\/)|[^\/])*?\//~     # e.g. /\w+/, ~/#.*(?:\n|$)/~
    char_range = `[` &char_range_heuristics
                     [`^`] (character | free_char) { [`-`] character | free_char } "]"
    character  = CH_LEADIN HEXCODE
    free_char  = /[^\n\[\]\\]/ | /\\[nrt`´'"(){}\[\]\/\\]/
    any_char   = "."
    whitespace = /~/~                               # insignificant whitespace

    #: delimiters

    EOF = !/./

    DEF        = `=`
    OR         = `|`
    AND        = ``
    ENDL       = ``

    RNG_OPEN   = `{`
    RNG_CLOSE  = `}`
    RNG_DELIM  = `,`
    TIMES      = `*`

    RE_LEADIN  = `/`
    RE_LEADOUT = `/`

    CH_LEADIN  = `0x`

    #: heuristics

    char_range_heuristics  = ! ( /[\n\t ]/
                               | ~ literal_heuristics
                               | [`::`|`:?`|`:`] SYM_REGEX /\s*\]/ )
    literal_heuristics     = /~?\s*"(?:[\\]\]|[^\]]|[^\\]\[[^"]*)*"/
                           | /~?\s*'(?:[\\]\]|[^\]]|[^\\]\[[^']*)*'/
                           | /~?\s*`(?:[\\]\]|[^\]]|[^\\]\[[^`]*)*`/
                           | /~?\s*´(?:[\\]\]|[^\]]|[^\\]\[[^´]*)*´/
                           | /~?\s*\/(?:[\\]\]|[^\]]|[^\\]\[[^\/]*)*\//
    regex_heuristics       = /[^ ]/ | /[^\/\n*?+\\]*[*?+\\][^\/\n]\//


    #: basic-regexes

    RE_CORE    = /(?:(?<!\\)\\(?:\/)|[^\/])*/       # core of a regular expression, i.e. the dots in /.../
    SYM_REGEX  = /(?!\d)\w+/                        # regular expression for symbols
    HEXCODE    = /[A-Fa-f0-9]{1,8}/
    '''
M6: '''
    @ comment    = /(?!#x[A-Fa-f0-9])#.*(?:\n|$)|\/\*(?:.|\n)*?\*\/|\(\*(?:.|\n)*?\*\)/
        # comments can be either C-Style: /* ... */
        # or pascal/modula/oberon-style: (* ... *)
        # or python-style: # ... \n, excluding, however, character markers: #x20
    @ whitespace = /\s*/                            # whitespace includes linefeed
    @ literalws  = right                            # trailing whitespace of literals will be ignored tacitly
    @ disposable = component, pure_elem, countable, FOLLOW_UP, SYM_REGEX, ANY_SUFFIX, EOF
    @ drop       = whitespace, EOF                  # do not include these even in the concrete syntax tree
    @ RNG_BRACE_filter = matching_bracket()         # filter or transform content of RNG_BRACE on retrieve

    # re-entry-rules for resuming after parsing-error

    @ definition_resume = /\n\s*(?=@|\w+\w*\s*=)/
    @ directive_resume  = /\n\s*(?=@|\w+\w*\s*=)/


    # specialized error messages for certain cases

    @ definition_error  = /,/, 'Delimiter "," not expected in definition!\nEither this was meant to '
                               'be a directive and the directive symbol @ is missing\nor the error is '
                               'due to inconsistent use of the comma as a delimiter\nfor the elements '
                               'of a sequence.'


    #: top-level

    syntax     = ~ { definition | directive } EOF
    definition = symbol §:DEF~ [ :OR~ ] expression :ENDL~ & FOLLOW_UP  # [:OR~] to support v. Rossum's syntax

    directive  = "@" §symbol "=" component { "," component } & FOLLOW_UP
      # component  = (regexp | literals | procedure | symbol !DEF)
      component  = literals | procedure | expression
      literals   = { literal }+                       # string chaining, only allowed in directives!
      procedure  = SYM_REGEX "()"                     # procedure name, only allowed in directives!

    FOLLOW_UP  = `@` | symbol | EOF


    #: components

    expression = sequence { :OR~ sequence }
    sequence   = ["§"] ( interleave | lookaround )  # "§" means all following terms mandatory
                 { !`@` !(symbol :DEF) :AND~ ["§"] ( interleave | lookaround ) }
    interleave = difference { "°" ["§"] difference }
    lookaround = flowmarker § (oneormore | pure_elem)
    difference = term ["-" § (oneormore | pure_elem)]
    term       = oneormore | counted | repetition | option | pure_elem


    #: elements

    countable  = option | oneormore | element
    pure_elem  = element § !ANY_SUFFIX              # element strictly without a suffix
    element    = [retrieveop] symbol !:DEF          # negative lookahead to be sure it's not a definition
               | literal
               | plaintext
               | regexp
               | char_range
               | character ~
               | any_char
               | whitespace
               | group


    ANY_SUFFIX = /[?*+]/


    #: flow-operators

    flowmarker = "!"  | "&"                         # '!' negative lookahead, '&' positive lookahead
               | "<-!" | "<-&"                      # '<-!' negative lookbehind, '<-&' positive lookbehind
    retrieveop = "::" | ":?" | ":"                  # '::' pop, ':?' optional pop, ':' retrieve


    #: groups

    group      = "(" no_range §expression ")"
    oneormore  = "{" no_range expression "}+" | element "+"
    repetition = "{" no_range §expression "}" | element "*" no_range
    option     = !char_range "[" §expression "]" | element "?"
    counted    = countable range | countable :TIMES~ multiplier | multiplier :TIMES~ §countable

    range      = RNG_BRACE~ multiplier [ :RNG_DELIM~ multiplier ] ::RNG_BRACE~
    no_range   = !multiplier | &multiplier :TIMES
    multiplier = /[1-9]\d*/~


    #: leaf-elements

    symbol     = SYM_REGEX ~                        # e.g. expression, term, parameter_list
    literal    = /"(?:(?<!\\)\\"|[^"])*?"/~         # e.g. "(", '+', 'while'
               | /'(?:(?<!\\)\\'|[^'])*?'/~         # whitespace following literals will be ignored tacitly.
    plaintext  = /`(?:(?<!\\)\\`|[^`])*?`/~         # like literal but does not eat whitespace
               | /´(?:(?<!\\)\\´|[^´])*?´/~
    regexp     = :RE_LEADIN RE_CORE :RE_LEADOUT ~   # e.g. /\w+/, ~/#.*(?:\n|$)/~
    # regexp     = /\/(?:(?<!\\)\\(?:\/)|[^\/])*?\//~     # e.g. /\w+/, ~/#.*(?:\n|$)/~
    char_range = `[` &char_range_heuristics
                     [`^`] (character | free_char) { [`-`] character | free_char } "]"
    character  = :CH_LEADIN HEXCODE
    free_char  = /[^\n\[\]\\]/ | /\\[nrt`´'"(){}\[\]\/\\]/
    any_char   = "."
    whitespace = /~/~                               # insignificant whitespace

    #: delimiters

    EOF = !/./ [:?DEF] [:?OR] [:?AND] [:?ENDL]      # [:?DEF], [:?OR], ... clear stack by eating stored value
               [:?RNG_DELIM] [:?BRACE_SIGN] [:?CH_LEADIN] [:?TIMES] [:?RE_LEADIN] [:?RE_LEADOUT]

    DEF        = `=` | `:=` | `::=` | `<-` | /:\n/ | `: `  # with `: `, retrieve markers mustn't be followed by a blank!
    OR         = `|` | `/` !regex_heuristics
    AND        = `,` | ``
    ENDL       = `;` | ``

    RNG_BRACE  = :BRACE_SIGN
    BRACE_SIGN = `{` | `(`
    RNG_DELIM  = `,`
    TIMES      = `*`

    RE_LEADIN  = `/` &regex_heuristics | `^/`
    RE_LEADOUT = `/`

    CH_LEADIN  = `0x` | `#x`

    #: heuristics

    char_range_heuristics  = ! ( /[\n\t ]/
                               | ~ literal_heuristics
                               | [`::`|`:?`|`:`] SYM_REGEX /\s*\]/ )
    literal_heuristics     = /~?\s*"(?:[\\]\]|[^\]]|[^\\]\[[^"]*)*"/
                           | /~?\s*'(?:[\\]\]|[^\]]|[^\\]\[[^']*)*'/
                           | /~?\s*`(?:[\\]\]|[^\]]|[^\\]\[[^`]*)*`/
                           | /~?\s*´(?:[\\]\]|[^\]]|[^\\]\[[^´]*)*´/
                           | /~?\s*\/(?:[\\]\]|[^\]]|[^\\]\[[^\/]*)*\//
    regex_heuristics       = /[^ ]/ | /[^\/\n*?+\\]*[*?+\\][^\/\n]\//


    #: basic-regexes

    RE_CORE    = /(?:(?<!\\)\\(?:\/)|[^\/])*/       # core of a regular expression, i.e. the dots in /.../
    SYM_REGEX  = /(?!\d)\w+/                        # regular expression for symbols
    HEXCODE    = /[A-Fa-f0-9]{1,8}/
    '''
M7: ''' Start   <- Spacing Expr EOL? EOF
        Expr    <- Term ((PLUS / MINUS) Term)*
        Term    <- Factor ((TIMES / DIVIDE) Factor)*
        Factor  <- Sign* (LPAR Expr RPAR
                         / INTEGER )
        Sign    <- NEG / POS
        INTEGER <- ~( '0' / [1-9] [0-9]* ) Spacing
        PLUS    <- '+' Spacing
        MINUS   <- '-' Spacing
        TIMES   <- '*' Spacing
        DIVIDE  <- '/' Spacing
        LPAR    <- '(' Spacing
        RPAR    <- ')' Spacing
        NEG     <- '-' Spacing
        POS     <- '+' Spacing
        Spacing <- [ \t\n\f\v\r]*
        EOL     <- '\r\n' / [\n\r]
        EOF     <- !.'''

M8: '''
    @whitespace = horizontal
    @disposable = EOF, LF, SAME_INDENT
    @drop       = strings, whitespace, EOF, LF, SAME_INDENT
    tree     = INDENT node DEDENT /\s*/ EOF
    INDENT   = / */
    node     = tag_name [content]

    content  = string | children
    children = &(LF HAS_DEEPER_INDENT)
               LF INDENT § node { LF SAME_INDENT § node }
               !(LF HAS_DEEPER_INDENT) DEDENT
    tag_name = /\w+/~
    string   = '"' § /(?:"|[^"\n])*/ '"' ~

    SAME_INDENT       = :INDENT § !/ /
    HAS_DEEPER_INDENT = :INDENT / +/
    DEDENT            = &:?INDENT
    LF       = /\n/
    EOF      = !/./
    '''

[ast:syntax]

[fail:syntax]


[match:definition]
M1*: 'expression ::= term, { ("+" | "-"), term};'
M2: 'expression = `a`, `b`'

[ast:definition]

[fail:definition]


[match:directive]
M1: """@ definition_error  = /,/, 'Delimiter "," not expected in definition!\nEither this was meant to '
                           'be a directive and the directive symbol @ is missing\nor the error is '
                           'due to inconsistent use of the comma as a delimiter\nfor the elements '
                           'of a sequence.'"""

[ast:directive]

[fail:directive]


[match:literals]

[ast:literals]

[fail:literals]


[match:procedure]

[ast:procedure]

[fail:procedure]


[match:FOLLOW_UP]

[ast:FOLLOW_UP]

[fail:FOLLOW_UP]

