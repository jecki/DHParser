# EBNF-Grammar in EBNF

# This is faster version of EBNF relying on fixed constants for delimiters,
# rather than variables that are captured on first use as in "EBNF.ebnf".
# Different syntactical variants are not detected by the grammar itself,
# but need to be configured either by adjusting the definitions of DEF, OR,
# AND, ENDL, RNG_OPEN, RNG_CLOSE, RNG_DELIM, CH_LEADIN, TIMES, RE_LEADIN,
# RE_LEADOUT either within this grammar definition or in the Grammar-object
# changing the `text`-field of the respective parser objects.

@ comment    = /(?!#x[A-Fa-f0-9])#.*(?:\n|$)|\/\*(?:.|\n)*?\*\/|\(\*(?:.|\n)*?\*\)/
    # comments can be either C-Style: /* ... */
    # or pascal/modula/oberon-style: (* ... *)
    # or python-style: # ... \n, excluding, however, character markers: #x20
@ whitespace = /\s*/                            # whitespace includes linefeed
@ literalws  = right                            # trailing whitespace of literals will be ignored tacitly
@ disposable = is_mdef, component, pure_elem, countable, no_range, FOLLOW_UP, SYM_REGEX, ANY_SUFFIX, EOF
@ drop       = whitespace, EOF, no_range        # do not include these even in the concrete syntax tree


# re-entry-rules to resume parsing after a syntax-error
 
@ definition_resume = /\n\s*(?=@|\w+\w*\s*=)/
@ directive_resume  = /\n\s*(?=@|\w+\w*\s*=)/

# specialized error messages for certain cases

@ definition_error  = /,/, 'Delimiter "," not expected in definition!\nEither this was meant to '
                           'be a directive and the directive symbol @ is missing\nor the error is '
                           'due to inconsistent use of the comma as a delimiter\nfor the elements '
                           'of a sequence.'

#: top-level

syntax     = ~ { definition | directive | macrodef } EOF
definition = symbol §DEF~ [ OR~ ] expression ENDL~ &FOLLOW_UP  # [OR~] to support v. Rossum's syntax

directive  = "@" §symbol "=" component { "," component } &FOLLOW_UP
  component  = regexp | literals | procedure | symbol !DEF
             | &`$` !is_mdef § placeholder !DEF
             | "(" expression ")" | RAISE_EXPR_WO_BRACKETS expression
  literals   = { literal }+                       # string chaining, only allowed in directives!
  procedure  = SYM_REGEX "()"                     # procedure name, only allowed in directives!

macrodef   = "$" name~ ["(" §placeholder { "," placeholder }  ")"]
             DEF~ [ OR~ ] macrobody ENDL~ & FOLLOW_UP
  macrobody  = expression
  is_mdef    = & "$" name ["(" placeholder { "," placeholder }  ")"] ~DEF

FOLLOW_UP  = `@` | `$` | symbol | EOF


#: components

expression = sequence { OR~ sequence }
sequence   = ["§"] ( interleave | lookaround )  # "§" means all following terms mandatory
             { AND~ ["§"] ( interleave | lookaround ) }
interleave = difference { "°" ["§"] difference }
lookaround = flowmarker § (oneormore | pure_elem)
difference = term ["-" § (oneormore | pure_elem)]
term       = oneormore | counted | repetition | option | pure_elem


#: elements

countable  = option | oneormore | element
pure_elem  = element § !ANY_SUFFIX              # element strictly without a suffix
element    = [retrieveop] symbol !DEF           # negative lookahead to be sure it's not a definition
           | literal
           | plaintext
           | regexp
           | character ~
           | any_char
           | whitespace
           | group
           | macro !DEF
           | placeholder !DEF
           | parser                             # a user defined parser


ANY_SUFFIX = /[?*+]/


#: flow-operators

flowmarker = "!"  | "&"                         # '!' negative lookahead, '&' positive lookahead
           | "<-!" | "<-&"                      # '<-!' negative lookbehind, '<-&' positive lookbehind
retrieveop = "::" | ":?" | ":"                  # '::' pop, ':?' optional pop, ':' retrieve


#: groups

group      = "(" no_range §expression ")"
oneormore  = "{" no_range expression "}+" | element "+"
repetition = "{" no_range §expression "}" | element "*" no_range
option     = "[" §expression "]" | element "?"
counted    = countable range | countable TIMES~ multiplier | multiplier TIMES~ §countable

range      = RNG_OPEN~ multiplier [ RNG_DELIM~ multiplier ] RNG_CLOSE~
no_range   = !multiplier | &multiplier TIMES   # should that be &(multiplier TIMES)??
multiplier = /[1-9]\d*/~


#: leaf-elements

parser     = "@" name "(" §[argument] ")"        # a user defined parser
  argument = literal | name~

symbol     = SYM_REGEX ~                        # e.g. expression, term, parameter_list
literal    = /"(?:(?<!\\)\\"|[^"])*?"/~         # e.g. "(", '+', 'while'
           | /'(?:(?<!\\)\\'|[^'])*?'/~         # whitespace following literals will be ignored tacitly.
plaintext  = /`(?:(?<!\\)\\`|[^`])*?`/~         # like literal but does not eat whitespace
           | /´(?:(?<!\\)\\´|[^´])*?´/~
regexp     = RE_LEADIN RE_CORE RE_LEADOUT ~   # e.g. /\w+/, ~/#.*(?:\n|$)/~
character  = CH_LEADIN HEXCODE
any_char   = "."
whitespace = /~/~                               # insignificant whitespace


#: macros

macro       = "$" name "(" no_range expression { "," no_range expression } ")"
placeholder = "$" name !`(` ~

name        = SYM_REGEX


#: delimiters

EOF = !/./

DEF        = `=`
OR         = `|`
AND        = ``
ENDL       = ``

RNG_OPEN   = `{`
RNG_CLOSE  = `}`
RNG_DELIM  = `,`
TIMES      = `*`

RE_LEADIN  = `/`
RE_LEADOUT = `/`

CH_LEADIN  = `0x`

#: basic-regexes

RE_CORE    = /(?:(?<!\\)\\(?:\/)|[^\/])*/       # core of a regular expression, i.e. the dots in /.../
SYM_REGEX  = /(?!\d)\w+/                        # regular expression for symbols
HEXCODE    = /[A-Fa-f0-9]{1,8}/


#: error-markers

RAISE_EXPR_WO_BRACKETS = ``
