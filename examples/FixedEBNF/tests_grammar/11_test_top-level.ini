
[match:syntax]
M1: """
    @literalws = left
    expression = term { (`+`|`-`) WS § term }
    term = factor { (`*`|`/`) WS § factor }
    factor = [ sign ] (NUMBER | group)
    group = `(` WS § expression `)` WS
    sign = (`+` | `-`) WS
    HIDE:NUMBER = /(?:0|(?:[1-9]\d*))(?:\.\d+)?/ WS
    DROP:WS = /\s*/

    gap = /[^\d()]*(?=[\d(])/

    @expression_resume = /(?=\d|\(|\)|$)/
    @expression_skip = gap
    @term_resume = /(?=\d|\(|$)/
    @group_resume = /(?=\)|$)/"""

M2: """
    expression = term { (`+`|`-`) WS § term }
    term = factor { (`*`|`/`) WS § factor }
    factor = [ sign ] (NUMBER | group)
    group = `(` WS § expression `)` WS
    sign = (`+` | `-`) WS
    HIDE:NUMBER = /(?:0|(?:[1-9]\d*))(?:\.\d+)?/ WS
    DROP:WS = /\s*/

    @expression_resume = /(?=\d|\(|\)|$)/
    @expression_skip = (/[^\d()]*(?=[\d(])/)
    @term_resume = /(?=\d|\(|$)/
    @group_resume = /(?=\)|$)/"""

M3: """Char = 0x9 | 0xA | 0xD | [0x20-0xD7FF] | [0xE000-0xFFFD] | [0x10000-0x10FFFF]"""

M4: """# EBNF-Grammar in EBNF

    # This is faster version of EBNF relying on fixed constants for delimiters,
    # rather than variables that are captured on first use as in "EBNF.ebnf".
    # Different syntactical variants are not detected by the grammar itself,
    # but need to be configured either by adjusting the definitions of DEF, OR,
    # AND, ENDL, RNG_OPEN, RNG_CLOSE, RNG_DELIM, CH_LEADIN, TIMES, RE_LEADIN,
    # RE_LEADOUT either within this grammar definition or in the Grammar-object
    # changing the `text`-field of the respective parser objects.

    @ comment    = /(?!#x[A-Fa-f0-9])#.*(?:\n|$)|\/\*(?:.|\n)*?\*\/|\(\*(?:.|\n)*?\*\)/
        # comments can be either C-Style: /* ... */
        # or pascal/modula/oberon-style: (* ... *)
        # or python-style: # ... \n, excluding, however, character markers: #x20
    @ whitespace = /\s*/                            # whitespace includes linefeed
    @ literalws  = right                            # trailing whitespace of literals will be ignored tacitly
    @ hide       = is_mdef, component, pure_elem, countable, no_range, FOLLOW_UP,
                   ANY_SUFFIX, MOD_SYM, MOD_SEP, EOF
    @ drop       = whitespace, MOD_SYM, EOF, no_range   # do not include these even in the concrete syntax tree


    # re-entry-rules to resume parsing after a syntax-error

    @ definition_resume = /\n\s*(?=@|\w+\w*\s*=)/
    @ directive_resume  = /\n\s*(?=@|\w+\w*\s*=)/

    # specialized error messages for certain cases

    @ definition_error  = /,/, 'Delimiter "," not expected in definition!\nEither this was meant to '
                               'be a directive and the directive symbol @ is missing\nor the error is '
                               'due to inconsistent use of the comma as a delimiter\nfor the elements '
                               'of a sequence.'

    #: top-level

    syntax     = ~ { definition | directive | macrodef } EOF
    definition = [modifier] symbol §DEF~ [ OR~ ] expression [MOD_SYM~ hide]
                 ENDL~ &FOLLOW_UP  # [OR~] to support v. Rossum's syntax
      modifier = (drop | [hide]) MOD_SEP   # node LF after modifier allowed!
      is_def   = [MOD_SEP symbol] DEF | MOD_SEP is_mdef
      MOD_SEP  = / *: */

    directive  = "@" §symbol "=" component { "," component } &FOLLOW_UP
      component  = regexp | literals | procedure | symbol !is_def
                 | &`$` !is_mdef § placeholder !is_def
                 | "(" expression ")" | RAISE_EXPR_WO_BRACKETS expression
      literals   = { literal }+                       # string chaining, only allowed in directives!
      procedure  = SYM_REGEX "()"                     # procedure name, only allowed in directives!

    macrodef   = [modifier] "$" name~ ["(" §placeholder { "," placeholder }  ")"]
                 DEF~ [ OR~ ] macrobody [MOD_SYM~ hide] ENDL~ & FOLLOW_UP
      macrobody  = expression
      is_mdef    = "$" name ["(" placeholder { "," placeholder }  ")"] ~DEF

    FOLLOW_UP  = `@` | `$` | modifier | symbol | EOF


    #: components

    expression = sequence { OR~ sequence }
    sequence   = ["§"] ( interleave | lookaround )  # "§" means all following terms mandatory
                 { AND~ ["§"] ( interleave | lookaround ) }
    interleave = difference { "°" ["§"] difference }
    lookaround = flowmarker § part
    difference = term [!`->` "-" § part]
    term       = (oneormore | counted | repetition | option | pure_elem) [MOD_SYM~ drop]
    part       = (oneormore | pure_elem) [MOD_SYM~ drop]


    #: tree-reduction-markers aka "AST-hints"

    drop       = "DROP" | "Drop" | "drop" | "SKIP" | "Skip" | "skip"
    hide       = "HIDE" | "Hide" | "hide" | "DISPOSE" | "Dispose" | "dispose"


    #: elements

    countable  = option | oneormore | element
    pure_elem  = element § !ANY_SUFFIX              # element strictly without a suffix
    element    = [retrieveop] symbol !is_def
               | literal
               | plaintext
               | char_ranges
               | character ~
               | regexp
               | char_range
               | any_char
               | whitespace
               | group
               | macro !is_def
               | placeholder !is_def
               | parser                            # a user defined parser
    ANY_SUFFIX = /[?*+]/


    #: flow-operators

    flowmarker = "!"  | "&"                         # '!' negative lookahead, '&' positive lookahead
               | "<-!" | "<-&"                      # '<-!' negative lookbehind, '<-&' positive lookbehind
    retrieveop = "::" | ":?" | ":"                  # '::' pop, ':?' optional pop, ':' retrieve


    #: groups

    group      = "(" no_range §expression ")"
    oneormore  = "{" no_range expression "}+" | element "+"
    repetition = "{" no_range §expression "}" | element "*" no_range
    option     = !char_range "[" §expression "]" | element "?"
    counted    = countable range | countable TIMES~ multiplier | multiplier TIMES~ §countable

    range      = RNG_OPEN~ multiplier [ RNG_DELIM~ multiplier ] RNG_CLOSE~
    no_range   = !multiplier | &multiplier TIMES   # should that be &(multiplier TIMES)??
    multiplier = /[1-9]\d*/~


    #: leaf-elements

    parser     = "@" name "(" §[argument] ")"        # a user defined parser
      argument = literal | name~

    symbol     = SYM_REGEX ~                        # e.g. expression, term, parameter_list
    literal    = /"(?:(?<!\\)\\"|[^"])*?"/~         # e.g. "(", '+', 'while'
               | /'(?:(?<!\\)\\'|[^'])*?'/~         # whitespace following literals will be ignored tacitly.
               | /’(?:(?<!\\)\\’|[^’])*?’/~
    plaintext  = /`(?:(?<!\\)\\`|[^`])*?`/~         # like literal but does not eat whitespace
               | /´(?:(?<!\\)\\´|[^´])*?´/~
    regexp     = RE_LEADIN RE_CORE RE_LEADOUT ~   # e.g. /\w+/, ~/#.*(?:\n|$)/~

    char_range = `[` [`^`] { restricted_range_desc }+ "]"
      restricted_range_desc = character [ `-` character ]
    char_ranges = RE_LEADIN range_chain { `|` range_chain } RE_LEADOUT ~
      range_chain = `[` [`^`] { range_desc }+ `]`
      range_desc = (character | free_char) [ `-` (character | free_char) ]

    character  = (CH_LEADIN | `%x` | `U+` | `u+` | `\x` | `\u` | `\U`) HEXCODE
    free_char  = /[^\n\[\]\\]/ | /\\[nrtfv`´'"(){}\[\]\/\\]/
    any_char   = "."
    whitespace = /~/~                               # insignificant whitespace


    #: macros

    macro       = "$" name "(" no_range expression { "," no_range expression } ")"
    placeholder = "$" name !`(` ~

    name        = SYM_REGEX


    #: delimiters

    EOF = !/./

    DEF        = `=`
    OR         = `|`
    AND        = ``
    ENDL       = ``

    RNG_OPEN   = `{`
    RNG_CLOSE  = `}`
    RNG_DELIM  = `,`
    TIMES      = `*`

    RE_LEADIN  = `/`
    RE_LEADOUT = `/`

    CH_LEADIN  = `0x`

    MOD_SYM    = `->`  # symbol for postfix modifier

    #: basic-regexes

    RE_CORE    = /(?:(?<!\\)\\(?:\/)|[^\/])*/       # core of a regular expression, i.e. the dots in /.../
    SYM_REGEX  = /(?!\d)\w+/                        # regular expression for symbols
    HEXCODE    = /(?:[A-Fa-f1-9]|0(?!x)){1,8}/


    #: error-markers

    RAISE_EXPR_WO_BRACKETS = ``
    """

M5: """
    # logi-grammar

    #######################################################################
    #
    #  EBNF-Directives
    #
    #######################################################################

    # Regular expression for implicit whitespace or one of: horizontal, linefeed, vertical
    # Implicit whitespace is denoted by the tilde-character: ~
    @ whitespace  = horizontal

    # Implicit whitespace adjacent to literals: left, right, both, none
    # E.g. if @literalws = right then ")" means the same as `)`~
    @ literalws   = right

    # Regular expression for comments, e.g. /#.*(?:\n|$)/
    # Use: /(?:\/\/.*)|(?:\/\*(?:.|\n)*?\*\/)/ for C++-style comments: /* ... */ or // to EOL
    @ comment     = /;.*?(?:\n|$)/

    # Case-sensitivity: True, False
    @ ignorecase  = False

    # Tree-simplification while parsing:  none, flatten, merge_treetops, merge
    @ reduction   = merge         # anonymous nodes are being merged where possible

    # Tags that may be replaced with their content while parsing
    @ disposable  = _EOF, _LF, _cdot, _element, _affirmation, _dots, _assertion_sign,
                    _nat_number, _not, _lB, _rB, _exists_sign, _individual, _assertion

    # Tags that will be dropped with all their content while parsing or any of
    # the special values: strings, backticked, whitespace, regexps
    # Here, EOF and insignificant whitespace (tilde) will be dropped
    @ drop        = whitespace, strings, _EOF, _cdot, _assertion_sign, _not,
                    _lB, _rB, _exists_sign, _LF


    #######################################################################
    #
    #:  Structure and Components
    #
    #######################################################################

    principia       = ~ { statement {_LF}} _EOF
      statement     = numbering _assertion
      numbering     = ("*" | "∗") chapter _cdot counter ~

    _assertion      = definition | axiom | theorem

    definition      = formula ~ "Df"
    axiom           = _assertion_sign [_dots] formula ~ "Pp"
    theorem         = _assertion_sign [_dots] formula


    #######################################################################
    #
    #:  Formulae
    #
    #######################################################################

    formula         = formula4 | formula3 | formula2 | formula1 | formula0

      formula4        = and4 _d4 operator { _d4 and4 _d4 operator }
                        (_d4 and4 | _d3 and3 | _d2 and2 | _d1 and1 | formula0 | _element)
                      | (and4 _d4 | and3 _d3 | and2 _d2 | and1 _d1 | formula0 | _element)
                        operator _d4 and4 { _d4 operator _d4 and4 }
                      | and4

      formula3        = and3 _d3 operator { _d3 and3 _d3 operator }
                        (_d3 and3 | _d2 and2 | _d1 and1 | formula0 | _element)
                      | (and3 _d3 | and2 _d2 | and1 _d1 | formula0 | _element)
                        operator _d3 and3 { _d3 operator _d3 and3 }
                      | and3

      formula2        = and2 _d2 operator { _d2 and2 _d2 operator }
                        (_d2 and2 | _d1 and1 | formula0 | _element)
                      | (and2 _d2 | and1 _d1 | formula0 | _element)
                        operator _d2 and2 { _d2 operator _d2 and2 }
                      | and2

      formula1        = and1 _d1 operator { _d1 and1 _d1 operator }
                        (_d1 and1 | formula0 | _element)
                      | (and1 _d1 | formula0 | _element)
                        operator _d1 and1 { _d1 operator _d1 and1 }
                      | and1

      formula0        =  _element { operator _element }

    operator        = (Or | ifthen [subscript] | ifonlyif [subscript] | equals)
      subscript     = variable " "

    # And             = and4 | and3 | and2 | and1  # TODO: and-connections with more than two parts
      and4            = formula3 _a4 formula3 | formula3 | _element
      and3            = formula2 _a3 formula2 | formula2 | _element
      and2            = formula1 _a2 formula1 | formula1 | _element
      and1            = formula0 _a1 formula0 | formula0 | _element

    _element          = Not | _affirmation
    Not               = _not _affirmation
    _affirmation      = for_all | exists | group | predication | proposition
                      | function | variable | restricted_var | constant | number

    for_all           = _lB variable _rB _a1 formula0  # TODO: unsimplify this!
    exists            = _lB _exists_sign variable _rB _a1 and1  # TODO: unsimplify this!
    group             = `(`~ formula `)`~ | `{`~ formula `}`~
    predication       = relation _lB _individual {"," _individual } _rB
                      | _individual relation _individual
    function          = function_name (_individual | circumflected)  # TODO: unsimplify this!
    restricted_var    = circumflected function

    _individual       = variable | constant | number


    #######################################################################
    #
    #:  Atomic Expressions
    #
    #######################################################################

    chapter         = _nat_number
    counter         = /0*/ _nat_number

    proposition     = /[pqrstu]/        # propositional variable
    variable        = /[xyz]/           # individual variable
    circumflected   = /[x̂ŷẑ]/ | /^[xyz]/ # circonflexed variable
    constant        = /[abcde]/         # individual constant
    number          = _nat_number
    function_name   = /[fghϕψχ]/        # higher order variable
    relation        = /[QRSTPG][a-z]?/  # relation or predication

    Or              = (`∨` | `v`)~
    ifthen          = (`⊃` | `=>`)~
    ifonlyif        = (`≡` | `<=>`)~
    equals          = `=`~

    #######################################################################
    #
    #:  Disposables
    #
    #######################################################################

    _dots           = _d4 | _d3 | _d2 | _d1
      _d1           = `.`~ &_logical_connector  |  <-&_reverse_logical_connector `.`~
      _d2           = `:`~ &_logical_connector  |  <-&_reverse_logical_connector `:`~
      _d3           = (`:.` | `.:`)~ &_logical_connector  |  <-&_reverse_logical_connector (`:.` | `.:`)~
      _d4           = `::`~ &_logical_connector  |  <-&_reverse_logical_connector `::`~

    _nat_number     = /[1-9]\d*/
    _cdot           = /[·⋅]/ | `.` &_nat_number

    _exists_sign    = `∃` | `€`
    # _unique_sign    = `E`

    _assertion_sign = (`⊢` | `|-`)~
    _not            = (`∼` | `~`)~

    # _and            = _a4 | _a3 | _a2 | _a1
      _a1           = `.`~ !_logical_connector
      _a2           = `:`~ !_logical_connector
      _a3           = (`.:` | `:.`)~ !_logical_connector
      _a4           = `::`~ !_logical_connector

    _lB             = "("
    _rB             = ")"

    _logical_connector         = /[⊢∨⊃≡=]|[|]-|=>|<=>/
    _reverse_logical_connector = /[⊢∨⊃≡=]|-[|]|>=|<=>/

    _LF             = /[ \t\r]*\n\s*/
    _EOF            = !/./          # no more characters ahead, end of file
    """

[ast:syntax]

[fail:syntax]


[match:definition]

[ast:definition]

[fail:definition]


[match:modifier]

[ast:modifier]

[fail:modifier]


[match:is_def]

[ast:is_def]

[fail:is_def]


[match:MOD_SEP]

[ast:MOD_SEP]

[fail:MOD_SEP]


[match:directive]

[ast:directive]

[fail:directive]


[match:component]

[ast:component]

[fail:component]


[match:literals]

[ast:literals]

[fail:literals]


[match:procedure]

[ast:procedure]

[fail:procedure]


[match:macrodef]

[ast:macrodef]

[fail:macrodef]


[match:macrobody]

[ast:macrobody]

[fail:macrobody]


[match:is_mdef]

[ast:is_mdef]

[fail:is_mdef]


[match:FOLLOW_UP]

[ast:FOLLOW_UP]

[fail:FOLLOW_UP]

