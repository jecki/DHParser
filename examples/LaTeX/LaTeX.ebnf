# LaTeX-Grammar for DHParser

# preamble
@ literalws  = right
@ whitespace = /[ \t]*(?:\n(?![ \t]*\n)[ \t]*)?/    # insignificant whitespace, including at most one linefeed
@ comment    = /%.*/                                # note: trailing linefeed is not part of the comment proper
@ reduction  = merge_treetops
@ disposable = _WSPC, _GAP, _LB, _PARSEP, _LETTERS, _NAME, INTEGER, FRAC,
               _QUALIFIED, TEXT_NOPAR, TEXT, _block_content, PATH, PATHSEP,
               HASH, COLON, TAG,
               block_environment, known_environment, text_element,
               line_element, inline_environment, known_inline_env, info_block,
               begin_inline_env, end_inline_env, command, known_command
@ drop       = strings, backticked, whitespace, regexps, _WSPC, _GAP, _PARSEP, _LB

########################################################################
#
#: outer document structure
#
########################################################################

latexdoc       = preamble §document
preamble       = { [_WSPC] command }+

document       = [_WSPC] "\begin{document}"
                 §frontpages
                 (Chapters | Sections)
                 [Bibliography] [Index] [_WSPC]
                 "\end{document}" [_WSPC] EOF
frontpages     = sequence


#######################################################################
#
#: document structure
#
#######################################################################

Chapters       = { [_WSPC] Chapter }+
Chapter        = `\chapter` [hide_from_toc] heading { sequence | Sections }

Sections       = { [_WSPC] Section }+
Section        = `\section` [hide_from_toc] heading { sequence | SubSections }

SubSections    = { [_WSPC] SubSection }+
SubSection     = `\subsection` [hide_from_toc] heading { sequence | SubSubSections }

SubSubSections = { [_WSPC] SubSubSection }+
SubSubSection  = `\subsubsection` [hide_from_toc] heading { sequence | Paragraphs }

hide_from_toc  = "*"

Paragraphs     = { [_WSPC] Paragraph  }+
Paragraph      = "\paragraph" heading { sequence | SubParagraphs }

SubParagraphs  = { [_WSPC] SubParagraph }+
SubParagraph   = "\subparagraph" heading [ sequence ]

Bibliography   = [_WSPC] "\bibliography" heading
Index          = [_WSPC] "\printindex"

heading        = block

#######################################################################
#
#: document content
#
#######################################################################


#### block environments ####

block_environment   = known_environment | generic_block
known_environment   = itemize | enumerate | figure | tabular | quotation
                    | verbatim
generic_block       = begin_generic_block sequence §end_generic_block
begin_generic_block = <-&_LB begin_environment LFF
end_generic_block   = <-&_LB  end_environment LFF

itemize             = "\begin{itemize}" [_WSPC] { command | item } §"\end{itemize}"
enumerate           = "\begin{enumerate}" [_WSPC] { command | item } §"\end{enumerate}"
item                = "\item" sequence

figure              = "\begin{figure}" sequence §"\end{figure}"
quotation           = ("\begin{quotation}" sequence §"\end{quotation}")
                    | ("\begin{quote}" sequence §"\end{quote}")
verbatim            = "\begin{verbatim}" sequence §"\end{verbatim}"
tabular             = "\begin{tabular}" tabular_config { tabular_row } §"\end{tabular}"
tabular_row         = (multicolumn | tabular_cell) { "&" (multicolumn | tabular_cell) }
                      ("\\" ( hline | { cline } ) [_PARSEP] | &`\end{tabular}`)
tabular_cell        = raisebox [S|_PARSEP] | { line_element [S|_PARSEP] }
raisebox            = "\raisebox" rb_offset [rb_up] [rb_down] block
  rb_offset         = "{" number UNIT ~ "}"
  rb_up             = "[" number UNIT ~ "]"
  rb_down           = "[" number UNIT ~ "]"
tabular_config      = "{" { cfg_celltype [cfg_unit] | cfg_separator }+ §"}"
  cfg_celltype      = /[lcrp]/
  cfg_unit          = `{` number UNIT `}`
  cfg_separator     = `|`

TBCFG_VALUE         = /[lcr|]+/~

#### paragraphs and sequences of paragraphs ####

block_of_paragraphs = "{" [sequence] §"}"
sequence            = [_WSPC] { (paragraph | block_environment) [_PARSEP|S] }+
paragraph           = { !blockcmd text_element [S] }+
text_element        = line_element | LINEFEED
line_element        = text | inline_environment | command | block


#### inline enivronments ####

inline_environment  = known_inline_env | generic_inline_env
known_inline_env    = inline_math
generic_inline_env  = begin_inline_env ~ paragraph §end_inline_env
begin_inline_env    = (<-!_LB begin_environment) | (begin_environment !LFF)
end_inline_env      = end_environment
                      ## (<-!_LB end_environment)   | (end_environment !LFF)  # ambiguity with generic_block when EOF
begin_environment   = /\\begin{/ §NAME /}/
end_environment     = /\\end{/ §::NAME /}/

inline_math         = /\$/ /[^$]*/ §/\$/


#### commands ####

command             = known_command | text_command | generic_command

known_command       = citet | citep | footnote | includegraphics | caption
                    | multicolumn | hline | cline | documentclass | pdfinfo
                    | hypersetup | label | ref | href | url
text_command        = TXTCOMMAND | ESCAPED | BRACKETS
generic_command     = !no_command CMDNAME [[ ~ config ] { ~ block }+ ]
                    | `{` CMDNAME _block_content §`}`

citet               = "\citet" [config] block
citep               = ("\citep" | "\cite") [config] block
footnote            = "\footnote" block_of_paragraphs
includegraphics     = "\includegraphics" [ config ] block
caption             = "\caption" block
multicolumn         = "\multicolumn" "{" INTEGER "}" tabular_config block_of_paragraphs
hline               = "\hline"
cline               = "\cline{" INTEGER "-" INTEGER "}"
documentclass       = "\documentclass" [ config ] block
pdfinfo             = "\pdfinfo" info_block
hypersetup          = "\hypersetup" param_block
label               = "\label{" CHARS "}"
ref                 = ( "\ref{" | "\pageref{" ) CHARS "}"
url                 = "\url{" urlstring "}"
href                = "\href{" urlstring "}" block
  urlstring         = [protocol] { path } [target]
  protocol          = /\w+:\/\/(?!\*)/
  path              = PATH PATHSEP
  target            = PATH { <-!/s?ptth/ COLON PATH } [ (HASH| <-!/s?ptth/ COLON) TAG ]


#######################################################################
#
#: text
#
#######################################################################

block          = "{" _block_content §`}`
_block_content = { (block_environment | text_element | paragraph) [_PARSEP|S] }
info_block     = "{" §{ info_assoc } "}"
info_assoc     = info_key ~ [ "(" §info_value ")" ]
info_key       = `/` _NAME
info_value     = TEXT_NOPAR { S TEXT_NOPAR }  # text without parentheses
# text           = CHARS { (S | trennung) CHARS }
# text           = LINE { (S | trennung) LINE }
text           = TEXT { (S | trennung) TEXT }
trennung       = `\-`

no_command     = "\begin{" | "\end" | BACKSLASH structural
blockcmd       = BACKSLASH ( ( "begin{" | "end{" )
                             ( "enumerate" | "itemize" | "figure" | "quote"
                             | "quotation" | "tabular") "}"
                           | structural | begin_generic_block | end_generic_block )

structural     = "subsection" | "section" | "chapter" | "subsubsection"
               | "paragraph" | "subparagraph" | "item"


#######################################################################
#
#: parameters
#
#######################################################################

config       = "[" § (parameters &"]" | cfg_text) "]"
param_block  = "{" [parameters] "}"
parameters   = (association | flag) { "," (association | flag) }  [ WARN_Komma ]
association  = key~ "=" value~
flag         = _QUALIFIED | magnitude
key          = _QUALIFIED
value        = magnitude | _LETTERS | CMDNAME | param_block | block
magnitude    = number [UNIT]
number       = INTEGER [FRAC]
cfg_text     = { (~ text) | CMDNAME | SPECIAL }


#######################################################################
#
#: errors and warnings
#
#######################################################################

WARN_Komma = ","


#######################################################################
#
#: primitives
#
#######################################################################

CMDNAME    = /\\(?:(?![\d_])\w)+/~
TXTCOMMAND = /\\text\w+/
ESCAPED    = /\\[%$&_\/{} ]/
SPECIAL    = /[$&_\/\\\\]/
BRACKETS   = /[\[\]]/                       # left or right square bracket: [ ]
LINEFEED   = /[\\][\\]/

_QUALIFIED = IDENTIFIER { /[:.-]/ IDENTIFIER }
IDENTIFIER = _NAME
NAME       = _NAME                          # captured! don't use without retrival
_NAME      = /(?!\d)\w+\*?/
INTEGER    = /-?(?:(?:[1-9][0-9]+)|[0-9])/
FRAC       = /\.[0-9]+/
UNIT       = /(?!\d)\w+/

PATH       = /[\w=~?.,%&\[\]-]+/
PATHSEP    = /\/(?!\*)/
HASH       = `#`
COLON      = `:`
TAG        = /[\w=?.:\-%&\[\] \/]+/

TEXT       = /(?:[^\\%$&\{\}\[\]\n]+(?:\n(?![ \t]*\n))?)+/
TEXT_NOPAR = /(?:[^\\%$&\{\}\[\]\(\)\n]+(?:\n(?![ \t]*\n))?)+/  # text without parnetheses
LINE       = /[^\\%$&\{\}\[\]\n]+/          # a line of text
CHARS      = /[^\\%$&\{\}\[\]\s\n]+/        # some piece of text excluding whitespace,
                                            # linefeed and special characters
_LETTERS   = /\w+/
LF         = NEW_LINE { COMMENT__ WHITESPACE__ }  # linefeed but not an empty line
LFF        = NEW_LINE [ _WSPC ]             # at least one linefeed
S          = &/[% \t\n]/ !_GAP WSP_RE__     # significant whitespace
_PARSEP    = { WHITESPACE__ COMMENT__ } _GAP [_WSPC] # paragraph separator
_WSPC      = { COMMENT__ | /\s+/ }+         # arbitrary horizontal or vertical whitespace
_GAP       = /[ \t]*(?:\n[ \t]*)+\n/~       # at least one empty line, i.e.
                                            # [whitespace] linefeed [whitespace] linefeed
NEW_LINE   = /[ \t]*/ [COMMENT__] /\n/
_LB        = /\s*?\n|$/                     # backwards line break for Lookbehind-Operator
                                            # beginning of text marker '$' added for test code
BACKSLASH  = /[\\]/

EOF        = /(?!.)/                        # End-Of-File
