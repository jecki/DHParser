# full XML-grammar, see https://www.w3.org/TR/xml/

#######################################################################
#
#  EBNF-Directives
#
#######################################################################

@ whitespace  = /\s*/                # insignificant whitespace, signified by ~
@ literalws   = none                 # literals have no implicit whitespace
@ comment     = //                   # no implicit comments
@ ignorecase  = False                # literals and regular expressions are case-sensitive
@ drop        = strings, whitespace  # drop anonymous tokens and whitespace


#######################################################################
#
#  Document Frame and Prolog
#
#######################################################################

document        = prolog element [Misc] EOF
prolog          = [ ~ XMLDecl ] [Misc] [doctypedecl [Misc]]
XMLDecl         = '<?xml' VersionInfo [EncodingDecl] [SDDecl] ~ '?>'

VersionInfo     = ~ 'version' ~ '=' ~ ("'" VersionNum "'" | '"' VersionNum '"')
VersionNum      = /[0-9]+\.[0-9]+/

EncodingDecl    = ~ 'encoding' ~ '=' ~ ("'" EncName "'" | '"' EncName '"')
EncName         = /[A-Za-z][A-Za-z0-9._\-]*/

SDDecl          = ~ 'standalone' ~ '=' ~ (("'" (`yes` | `no`) "'") | ('"' (`yes` | `no`) '"'))

#######################################################################
#
#  Document Type Definition
#
#######################################################################

doctypedecl	    = '<!DOCTYPE' ~ § Name [~ ExternalID] ~ ['[' intSubset ']' ~] '>'
intSubset       = { markupdecl | DeclSep }
DeclSep         = PEReference | S
markupdecl      = elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment
extSubset       = [TextDecl] extSubsetDecl
extSubsetDecl   = { markupdecl | conditionalSect | DeclSep }

conditionalSect = includeSect | ignoreSect
includeSect     = '<![' ~ 'INCLUDE' ~ '[' extSubsetDecl ']]>'
ignoreSect      = '<![' ~ 'IGNORE' ~ '[' ignoreSectContents ']]>'
ignoreSectContents = IgnoreChars {'<![' ignoreSectContents ']]>' IgnoreChars}

extParsedEnt    = [TextDecl] content
TextDecl        = '<?xml' [VersionInfo] EncodingDecl ~ '?>'

elementdecl     = '<!ELEMENT' §S Name ~ contentspec ~ '>'
contentspec     = EMPTY | ANY | Mixed | children
EMPTY           = 'EMPTY'
ANY             = 'ANY'

Mixed           = '(' ~ '#PCDATA' { ~ '|' ~ Name } ~ ')*'
                | '(' ~ '#PCDATA' ~ ')'

children        = (choice | seq) ['?' | '*' | '+']
choice          = '(' ~ { ~ '|' ~ cp }+ ~ ')'
cp              = (Name | choice | seq) ['?' | '*' | '+']
seq             = '(' ~ cp { ~ ',' ~ cp } ~ ')'

AttlistDecl     = '<!ATTLIST' §S Name { ~ AttDef } ~ '>'
AttDef          = Name ~ §AttType S DefaultDecl
AttType         = StringType | TokenizedType | EnumeratedType
StringType      = 'CDATA'
TokenizedType   = IDREFS | IDREF | ID | ENTITY | ENTITIES | NMTOKENS | NMTOKEN
ID              = 'ID'
IDREF           = 'IDREF'
IDREFS          = 'IDREFS'
ENTITY          = 'ENTITY'
ENTITIES        = 'ENTITIES'
NMTOKEN         = 'NMTOKEN'
NMTOKENS        = 'NMTOKENS'

EnumeratedType  = NotationType | Enumeration
NotationType    = 'NOTATION' S '(' ~ Name { ~ '|' ~ Name } ~ ')'
Enumeration     = '(' ~ Nmtoken { ~ '|' ~ Nmtoken } ~ ')'

DefaultDecl     = REQUIRED | IMPLIED | FIXED
REQUIRED        = '#REQUIRED'
IMPLIED         = '#IMPLIED'
FIXED           = ['#FIXED' S] AttValue

EntityDecl      = GEDecl | PEDecl
GEDecl          = '<!ENTITY' S Name §S EntityDef ~ '>'
PEDecl          = '<!ENTITY' S '%' §S Name S PEDef ~ '>'
EntityDef       = EntityValue | ExternalID [NDataDecl]
PEDef           = EntityValue | ExternalID

NotationDecl    = '<!NOTATION' §S Name ~ (ExternalID | PublicID) ~ '>'

ExternalID      = 'SYSTEM' §S SystemLiteral
                | 'PUBLIC' §S PubidLiteral S SystemLiteral
PublicID        = 'PUBLIC' §S PubidLiteral
NDataDecl       = 'NData' §S Name


#######################################################################
#
# Logical Structures
#
#######################################################################

element         = emptyElement | STag §content ETag
STag            = '<' TagName { ~ Attribute } ~ '>'
ETag            = '</' §::TagName ~ '>'

emptyElement    = '<' Name { ~ Attribute } ~ '/>'

TagName         = Name
Attribute       = Name ~ §'=' ~ AttValue

content         = [ CharData ]
                  { (element | Reference | CDSect | PI | Comment)
                    [CharData] }


#######################################################################
#
#  Literals
#
#######################################################################

EntityValue     = '"' { /[^%&"]+/ | PEReference | Reference } '"'
			    | "'" { /[^%&']+/ | PEReference | Reference } "'"
AttValue        = '"' { /[^<&"]+/ | Reference } '"'
			    | "'" { /[^<&']+/ | Reference } "'"
SystemLiteral	= '"' /[^"]*/ '"' | "'" /[^']*/ "'"
PubidLiteral    = '"' [PubidChars] '"'
                | "'" [PubidCharsSingleQuoted] "'"


#######################################################################
#
#  References
#
#######################################################################

Reference       = EntityRef | CharRef
EntityRef       = '&' Name ';'
PEReference     = '%' Name ';'


#######################################################################
#
#  Names and Tokens
#
#######################################################################

Nmtokens        = Nmtoken { / / Nmtoken }
Nmtoken         = NameChars
Names           = Name { / / Name }
Name            = NameStartChar [NameChars]
NameStartChar   = /_|:|[A-Z]|[a-z]
                   |[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]
                   |[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]
                   |[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]
                   |[\uF900-\uFDCF]|[\uFDF0-\uFFFD]
                   |[\U00010000-\U000EFFFF]/
NameChars       = /(?:_|:|-|\.|[A-Z]|[a-z]|[0-9]
                   |\u00B7|[\u0300-\u036F]|[\u203F-\u2040]
                   |[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]
                   |[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]
                   |[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]
                   |[\uF900-\uFDCF]|[\uFDF0-\uFFFD]
                   |[\U00010000-\U000EFFFF])+/


#######################################################################
#
#  Comments, Processing Instructions and CDATA sections
#
#######################################################################

Misc            = { Comment | PI | S }+
Comment         = '<!--' { CommentChars | /-(?!-)/ } '-->'
# Comment         = '<!--' ((Char - '-') | ('-' (Char - '-')))* '-->'
PI              = '<?' PITarget [~ PIChars] '?>'
PITarget        = !/X|xM|mL|l/ Name
CDSect          = '<![CDATA[' CData ']]>'


#######################################################################
#
#  Characters, Explicit Whitespace and End of File
#
#######################################################################

PubidCharsSingleQuoted = /(?:\x20|\x0D|\x0A|[a-zA-Z0-9]|[-()+,.\/:=?;!*#@$_%])+/
PubidChars      = /(?:\x20|\x0D|\x0A|[a-zA-Z0-9]|[-'()+,.\/:=?;!*#@$_%])+/

CharData        = /(?:(?!\]\]>)[^<&])+/
CData           = /(?:(?!\]\]>)(?:\x09|\x0A|\x0D|[\u0020-\uD7FF]|[\uE000-\uFFFD]|[\U00010000-\U0010FFFF]))+/

IgnoreChars     = /(?:(?!(?:<!\[)|(?:\]\]>))(?:\x09|\x0A|\x0D|[\u0020-\uD7FF]|[\uE000-\uFFFD]|[\U00010000-\U0010FFFF]))+/
PIChars         = /(?:(?!\?>)(?:\x09|\x0A|\x0D|[\u0020-\uD7FF]|[\uE000-\uFFFD]|[\U00010000-\U0010FFFF]))+/
CommentChars    = /(?:(?!-)(?:\x09|\x0A|\x0D|[\u0020-\uD7FF]|[\uE000-\uFFFD]|[\U00010000-\U0010FFFF]))+/
CharRef         = ('&#' /[0-9]+/ ';') | ('&#x' /[0-9a-fA-F]+/ ';')
Chars           = /(?:\x09|\x0A|\x0D|[\u0020-\uD7FF]|[\uE000-\uFFFD]|[\U00010000-\U0010FFFF])+/
Char            = /\x09|\x0A|\x0D|[\u0020-\uD7FF]|[\uE000-\uFFFD]|[\U00010000-\U0010FFFF]/
S               = /\s+/         # whitespace
EOF             = !/./          # no more characters ahead, end of file reached
