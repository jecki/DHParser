# json-grammar  see: https://json.org/


#######################################################################
#
#:  EBNF-Directives
#
#######################################################################

@ whitespace  = vertical        # implicit whitespace, includes any number of line feeds
@ literalws   = right           # literals have implicit whitespace on the right hand side
@ comment     = /(?:\/\/|#).*/  # comments range from a '#' odr '//' sign to the end of the line
@ ignorecase  = False           # literals and regular expressions are case-sensitive
@ drop        = whitespace, strings  # drop tokens and whitespace early
@ anonymous   = /_[A-Za-z]+|[A-Z]+/


#######################################################################
#
#:  JSON elements
#
#######################################################################

json       = ~ _element _EOF
_element   = object | array | string | number | _bool | null
object     = "{" member { "," §member } §"}"
member     = string §":" _element
array      = "[" [ _element { "," _element } ] §"]"
string     = `"` §_CHARACTERS `"` ~
number     = INT FRAC EXP ~
_bool      = true | false
true       = `true` ~
false      = `false` ~
null       = "null"


#######################################################################
#
#:  JSON primitives
#
#######################################################################

_CHARACTERS = { PLAIN | ESCAPE }
PLAIN       = /[^"\\]+/
ESCAPE      = /\\[\/bnrt\\]/ | UNICODE
UNICODE     = "\u" HEX HEX
HEX         = /[0-9a-fA-F][0-9a-fA-F]/

INT         = [NEG] /[1-9][0-9]+/ | /[0-9]/
NEG         = `-`
FRAC        = [ DOT /[0-9]+/ ]
DOT         = `.`
EXP         = [ (`E`|`e`) [`+`|`-`] /[0-9]+/ ]

_EOF        =  !/./        # no more characters ahead, end of file reached
