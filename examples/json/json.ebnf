# json-grammar  see: https://json.org/

#######################################################################
#
#  EBNF-Directives
#
#######################################################################

@ whitespace  = vertical        # implicit whitespace, includes any number of line feeds
@ literalws   = right           # literals have implicit whitespace on the right hand side
@ comment     = /(?:\/\/|#).*/  # comments range from a '#' odr '//' sign to the end of the line
@ ignorecase  = False           # literals and regular expressions are case-sensitive
@ drop        = whitespace, token  # drop tokens and whitespace early


#######################################################################
#
#:  JSON elements
#
#######################################################################

@ object_resume = /\}\s*/

#  Introducing '_member' simplifies tolerance easier, see 02_test_JDON_elements [fail:json] F2
#  resume the calling parser (object) at the next key-string or at the closing braces of the object
@ _members_resume = /(?=(?:"[^"\n]+"\s*:)|\})/

@ member_error  = /["\'`´]/, 'String values must be enclosed by double-quotation marks: "..."!'
@ member_resume = /(?=,|\})/

@ string_error  = /\\/, 'Possible escaped values are \\/, \\\\, \\b, \\n, \\r, \\t, or \\u, but not {1}'
@ string_error  = '', 'Illegal character "{1}" in string.'
@ string_skip   = /(?=")/

json       = ~ _element _EOF
_element    = object | array | string | number | bool | null
object     = "{" {_members} §"}"

_members   = member { "," §member &(","|"}") }
member     = string §":" _element

array      = "[" [_element { "," _element }] "]"
string     = `"` §_CHARACTERS `"` ~
number     = INT FRAC EXP ~
bool       = /true/~ | /false/~  # use regexes so values are not dropped as tokens
null       = "null"

#######################################################################
#
#:  JSON primitives
#
#######################################################################

_CHARACTERS = { PLAIN | ESCAPE }
PLAIN       = /[^"\\]+/
ESCAPE      = /\\[\/bnrt\\]/ | UNICODE
UNICODE     = "\u" HEX HEX
HEX         = /[0-9a-fA-F][0-9a-fA-F]/

INT         = [NEG] /[0-9]/ | /[1-9][0-9]+/
NEG         = `-`
FRAC        = [ DOT /[0-9]+/ ]
DOT         = `.`
EXP         = [ (`E`|`e`) [`+`|`-`] /[0-9]+/ ]

_EOF        =  !/./        # no more characters ahead, end of file reached

