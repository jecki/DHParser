# json-grammar  see: https://json.org/

#######################################################################
#
#  EBNF-Directives
#
#######################################################################

@ whitespace  = vertical        # implicit whitespace, includes any number of line feeds
@ literalws   = right           # literals have implicit whitespace on the right hand side
@ comment     = /(?:\/\/|#).*/  # comments range from a '#' odr '//' sign to the end of the line
@ ignorecase  = False           # literals and regular expressions are case-sensitive
@ drop        = whitespace, token  # drop tokens and whitespace early


#######################################################################
#
#:  JSON elements
#
#######################################################################

@ object_resume = /(?<=\})/

@ member_error  = /\w+/, 'Possible non-numerical and non-string values are `true`, `false` or `null` (always written with small letters and without quotation marks).'
@ member_error  = /["\'`´]/, 'String values must be enclosed by double-quotation marks: "..."!'
@ member_error  = /\\/, 'Possible escaped values are /, \\, b, n, r, t, or u.'
@ member_error  = /\d/, '{1} does not represent a valid number or other value.'
@ member_resume = /,|\}/

@ string_error  = '', 'Illegal character "{1}" in string.'
@ string_skip   = /"/

json       = ~ element EOF
element    = value
value      = object | array | string | number | bool | null
object     = "{" [member { "," §member }] "}"
member     = string §":" element
array      = "[" [value { "," value }] "]"
string     = `"` §CHARACTERS `"` ~
number     = INT FRAC EXP ~
bool       = /true/~ | /false/~  # use regexes so values are not dropped as tokens
null       = "null"

#######################################################################
#
#:  JSON primitives
#
#######################################################################

CHARACTERS = { /[^"\\]+/ | ESCAPE }
ESCAPE     = /\\[\/bnrt\\]/ | /\\u/ HEX HEX HEX HEX
HEX        = /[0-9a-fA-F]/

INT        = [`-`] /[0-9]/ | /[1-9][0-9]+/
FRAC       = [ `.` /[0-9]+/ ]
EXP        = [ (`E`|`e`) [`+`|`-`] /[0-9]+/ ]

EOF      =  !/./        # no more characters ahead, end of file reached

