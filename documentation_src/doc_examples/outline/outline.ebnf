# outline-grammar

#  EBNF-Directives

@ whitespace  = /[ \t]*/  # only horizontal whitespace, no linefeeds
@ reduction   = merge     # simplify tree as much as possible
@ disposable  = WS, EOF, LINE, LFF, LLF, L, LF, 
                CHARS, TEXT, ESCAPED, inner_txt
@ drop        = WS, EOF, backticked, whitespace

#:  Outline

document = main [WS] Â§EOF

main  = [WS] `#` !`#` ~ heading [WS blocks] { WS section }
section  = `##` !`#` ~ heading [WS blocks] { WS subsection }
subsection  = `###` !`#` ~ heading [WS blocks] { WS subsubsection }
subsubsection  = `####` !`#` ~ heading [WS blocks] { WS s5section }
s5section  = `#####` !`#` ~ heading [WS blocks] { WS s6section }
s6section  = `######` !`#` ~ heading [WS blocks]

heading = LINE

#: blocks

blocks  = !is_heading LINE { LFF !is_heading LINE }
is_heading = /##?#?#?#?#?(?!#)/

markup    = (text | bold | emphasis) { [LLF] (text | bold | emphasis) }
text      = (TEXT | ESCAPED) { [LLF] (TEXT | ESCAPED) }

#: inline-elements

emphasis  = `*` !`*` inner_txt `*`
          | `_` !`_` inner_txt `_`
bold      = `**` inner_txt `**`
          | `__` inner_txt `__`
inner_txt = [L] markup [L]

#:  Regular Expressions

LINE      = /[^\n]+/                # everything up to the next line-feed
TEXT      = CHARS { LLF CHARS }
CHARS     = /[^\s\\_*]+/
ESCAPED   = `\` /./
LLF       = L | LF
L         = /[ \t]+/                # significant whitespace
LF        = /[ \t]*\n[ \t]*(?!\n)/  #  single line-feed
# LFN       = ~/\n(?![ \t]*\n)/~      # normalized single line-feed
PARSEP    = ~/\n/ ~/\n/
WS        = LFF
LFF       = /(?:[ \t]*\n)+/    # any ws at line-end and all following empty lines
EOF       =  !/./  # no more characters ahead, end of file reached
